(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{654:function(v,_,a){"use strict";a.r(_);var t=a(13),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h3",{attrs:{id:"什么是系统设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是系统设计"}},[v._v("#")]),v._v(" 什么是系统设计？")]),v._v(" "),a("p",[v._v("定义：基于特定的需求定义系统元素的过程，元素包括：架构/结构、模块、接口、数据。架构的定义：软件架构是有关软件整体结构与组件(模块)的抽象描述，用于指导大型软件系统各个方面的设计。")]),v._v(" "),a("p",[v._v("系统设计的目的：是为了解决系统复杂度的问题。")]),v._v(" "),a("h3",{attrs:{id:"怎么做系统设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么做系统设计"}},[v._v("#")]),v._v(" 怎么做系统设计？")]),v._v(" "),a("p",[v._v("广义上看：\n企业架构框架（TOGAF）中定义的四个维度：")]),v._v(" "),a("ol",[a("li",[v._v("业务架构（企业的视⻆，结合愿景&使命&价值观，决定做什么业务&业务流程&业务环节）")]),v._v(" "),a("li",[v._v("应用架构（基于业务架构，设计出相应的能够支持业务架构的应用系统）")]),v._v(" "),a("li",[v._v("数据架构（描述应用系统里面的信息模型）")]),v._v(" "),a("li",[v._v("技术架构（落地指导，使用什么软件、什么硬件、网络怎么通信等")])]),v._v(" "),a("p",[v._v("两种方法：")]),v._v(" "),a("ol",[a("li",[v._v("面向过程方法（SA、SD、SP）")]),v._v(" "),a("li",[v._v("面向对象方法（OOA、OOD、OOP）")])]),v._v(" "),a("h3",{attrs:{id:"怎么做系统设计-面向对象的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么做系统设计-面向对象的方法"}},[v._v("#")]),v._v(" 怎么做系统设计：面向对象的方法")]),v._v(" "),a("p",[v._v("面向对象就是语言级别“模块化”，不能仅仅是指导编码。")]),v._v(" "),a("p",[v._v("复杂问题解决之道：")]),v._v(" "),a("ol",[a("li",[v._v("分治，化大为小，分而治之。")]),v._v(" "),a("li",[v._v("抽象，归纳总结，降低认知负载。")]),v._v(" "),a("li",[v._v("知识沉淀，标准化解决方案，")])]),v._v(" "),a("p",[v._v("过程：需求分析，领域建模，技术选型，编码落地")]),v._v(" "),a("p",[v._v("目标：易维护，易拓展")]),v._v(" "),a("p",[v._v("通用原则：")]),v._v(" "),a("ol",[a("li",[v._v("高内聚：单一职责，开闭原则")]),v._v(" "),a("li",[v._v("低耦合：里式替换原则，接口隔离，依赖导致，开闭原则，迪米特原则，复合原则")])]),v._v(" "),a("p",[v._v("落地方法：领域驱动设计")]),v._v(" "),a("h3",{attrs:{id:"系统设计-具体做什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统设计-具体做什么"}},[v._v("#")]),v._v(" 系统设计-具体做什么")]),v._v(" "),a("p",[v._v("系统设计：挑战主要是正确性、可维护性、可扩展性，主要解决的事业务复杂度的问题，通过业务建模和归纳抽象的方式解决。\n后端设计：挑战主要是高并发、高性能、高可用，主要解决的是负载问题（容量和流量），主要通过工程方法应对")]),v._v(" "),a("h3",{attrs:{id:"功能需求分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能需求分析"}},[v._v("#")]),v._v(" 功能需求分析")]),v._v(" "),a("h4",{attrs:{id:"用例分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用例分析"}},[v._v("#")]),v._v(" 用例分析")]),v._v(" "),a("p",[v._v("全局视⻆出发，寻找所有功能场景，明确系统需要支持哪些功能、参与⻆色。说明：用例图只是一种表达形式，表格、WIKI描述等都OK，团队内约定统一即可。产出物：")]),v._v(" "),a("p",[v._v("功能场景列表：")]),v._v(" "),a("ul",[a("li",[v._v("商品创建")]),v._v(" "),a("li",[v._v("商品编辑")]),v._v(" "),a("li",[v._v("商品价格管理")]),v._v(" "),a("li",[v._v("商品库存管理")]),v._v(" "),a("li",[v._v("商品规则管理•...")])]),v._v(" "),a("p",[v._v("参与⻆色：")]),v._v(" "),a("ul",[a("li",[v._v("商户")]),v._v(" "),a("li",[v._v("销售")]),v._v(" "),a("li",[v._v("运营")]),v._v(" "),a("li",[v._v("三方系统")])]),v._v(" "),a("h4",{attrs:{id:"业务流程分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#业务流程分析"}},[v._v("#")]),v._v(" 业务流程分析")]),v._v(" "),a("p",[v._v("对每一个场景进行完整链路梳理，寻找主流程、数据、关键业务规则：多个用例场景交叉分析，覆盖全面，并且时间上是否具备连续性。比如下述流程")]),v._v(" "),a("p",[v._v("选择门店(门店正常校验) -> 选择合同(合同校验) -> 录入信息(基本信息价格等) -> 保存(临时，暂存) -> 提交(数据是否校验完整) -> 审核(机器人工) -> 发布(立即发布)。")]),v._v(" "),a("p",[v._v("产出物：")]),v._v(" "),a("ul",[a("li",[v._v("关键业务流程（商品制作流程、商品审核流程、商品发布流程）")]),v._v(" "),a("li",[v._v("数据对象（商品暂存数据、商品价格、商品库存、商品规则）")]),v._v(" "),a("li",[v._v("关键业务规则（商品关联门店必须正常营业、合同有效才能创建商品、商家必须设置库存和价格）")])]),v._v(" "),a("p",[v._v("此阶段可以使用的工具：")]),v._v(" "),a("ul",[a("li",[v._v("活动图")]),v._v(" "),a("li",[v._v("流程图")]),v._v(" "),a("li",[v._v("时许图")]),v._v(" "),a("li",[v._v("类图")])]),v._v(" "),a("h4",{attrs:{id:"核心关注点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心关注点"}},[v._v("#")]),v._v(" 核心关注点")]),v._v(" "),a("ul",[a("li",[v._v("用户能干什么（用例 or 决策命令）")]),v._v(" "),a("li",[v._v("依赖什么数据（领域对象 or 读模型）")]),v._v(" "),a("li",[v._v("具体怎么做（业务规则 or 策略）")]),v._v(" "),a("li",[v._v("谁来做，在哪里做（聚合 or 聚合根）")])]),v._v(" "),a("h3",{attrs:{id:"领域建模"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#领域建模"}},[v._v("#")]),v._v(" 领域建模")]),v._v(" "),a("h4",{attrs:{id:"定义和理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义和理解"}},[v._v("#")]),v._v(" 定义和理解")]),v._v(" "),a("p",[v._v("定义：在限定的范围内，通过主观意识借助实体或者虚拟表现构成客观阐述形态结构的一种表达目的物件")]),v._v(" "),a("p",[v._v("理解：")]),v._v(" "),a("ol",[a("li",[v._v("前提：问题域，先确定范围，再进行建模")]),v._v(" "),a("li",[v._v("关系：模型结构是客观存在的，模型是对业务的映射。")]),v._v(" "),a("li",[v._v("过程：建模的过程是主观的，依赖于对业务理解程度")]),v._v(" "),a("li",[v._v("统一语言、沉淀知识，认知传递")])]),v._v(" "),a("p",[v._v("总结：")]),v._v(" "),a("ul",[a("li",[v._v("领域建模是通过归纳总结的方式，对业务知识进行提取的过程（基于事实，不要过度臆测）；")]),v._v(" "),a("li",[v._v("领域建模是一个持续迭代完善的过程，依赖于对业务更加深刻的理解（平滑演进，不追求完美）")])]),v._v(" "),a("h4",{attrs:{id:"划分边界、缩小范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#划分边界、缩小范围"}},[v._v("#")]),v._v(" 划分边界、缩小范围")]),v._v(" "),a("ul",[a("li",[v._v("基本原则：高内聚，低耦合")]),v._v(" "),a("li",[v._v("一个经验做法：基于明确的业务流程、业务环节进行划分，通过时间上不连续的环节进行切入")])]),v._v(" "),a("p",[v._v("比如下边这个流程：")]),v._v(" "),a("p",[v._v("选择门店(门店正常校验) -> 选择合同(合同校验) -> 录入信息(基本信息价格等) -> 保存(临时，暂存) -> 提交(数据是否校验完整) -> 审核(机器人工) -> 发布(立即发布)")]),v._v(" "),a("p",[v._v("选择门店、选择合同、录入信息、保存、提交可以归结为“商品制作”")]),v._v(" "),a("p",[v._v("审核可以归结为：“商品审核”")]),v._v(" "),a("p",[v._v("商品发布可以归结为：“商品发布”")]),v._v(" "),a("h4",{attrs:{id:"领域内建模"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#领域内建模"}},[v._v("#")]),v._v(" 领域内建模")]),v._v(" "),a("ul",[a("li",[v._v("明确数据实体、实体关系和行为")]),v._v(" "),a("li",[v._v("明确是否需要进一步划分子域")])]),v._v(" "),a("p",[v._v("需求分析结果：")]),v._v(" "),a("p",[v._v("数据实体：")]),v._v(" "),a("ul",[a("li",[v._v("商品草稿由流程状态聚合")]),v._v(" "),a("li",[v._v("商品草稿由基本信息、商品状态、商品价格、商品库存和商品库存组成")]),v._v(" "),a("li",[v._v("商品草稿依赖合同、POI")])]),v._v(" "),a("p",[v._v("领域行为：")]),v._v(" "),a("ul",[a("li",[v._v("草稿保存")]),v._v(" "),a("li",[v._v("草稿提交")]),v._v(" "),a("li",[v._v("快照构建")]),v._v(" "),a("li",[v._v("撤回流程")]),v._v(" "),a("li",[v._v("废弃流程")])]),v._v(" "),a("h4",{attrs:{id:"归纳和抽象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#归纳和抽象"}},[v._v("#")]),v._v(" 归纳和抽象")]),v._v(" "),a("p",[v._v("模型下沉、共享")]),v._v(" "),a("h3",{attrs:{id:"怎么判断划分是否合理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么判断划分是否合理"}},[v._v("#")]),v._v(" 怎么判断划分是否合理")]),v._v(" "),a("p",[v._v("只能证伪，不能证明")]),v._v(" "),a("p",[v._v("原则：高内聚，低耦合")]),v._v(" "),a("ul",[a("li",[v._v("领域稳定，不会随着功能场景的新增，实体、关键行为不断变化，无法有效收敛。反例：上单校验域")]),v._v(" "),a("li",[v._v("领域关系明确，领域间不存在相互依赖问题，有明确的依赖方向，领域内概念不存在二义性。")])]),v._v(" "),a("p",[v._v("直观判断：需求承接，是不是总有人吐槽，改动的点太多、太分散，不知道改哪些地方？")]),v._v(" "),a("h3",{attrs:{id:"经典分层架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#经典分层架构"}},[v._v("#")]),v._v(" 经典分层架构")]),v._v(" "),a("p",[v._v("架构核心思路：遵循高内聚低耦合原则，分层治理，关注点分离")]),v._v(" "),a("ul",[a("li",[v._v("四层架构和依赖倒置的四层架构：层之间严格分层，松耦合分层；依赖倒置主要指的是基础设施层，依赖倒置。")]),v._v(" "),a("li",[v._v("六边形架构：分离内部与外部，通过适配器进行隔离。")]),v._v(" "),a("li",[v._v("整洁架构：内向依赖，且向稳定依赖")])]),v._v(" "),a("p",[v._v("架构的演变过程基本是：分层架构->六边形架构->整洁架构，围绕领域模型展开分层：")]),v._v(" "),a("ul",[a("li",[v._v("领域模型：核心业务数据、规则，稳定")]),v._v(" "),a("li",[v._v("领域层：面向领域模型实现核心业务逻辑，细粒度，稳定")]),v._v(" "),a("li",[v._v("应用层：面向功能用例提供服务，负责完整流程串联，包含贴近用户的个性化规则逻辑，相对不稳定")])]),v._v(" "),a("p",[v._v("最终形成的代码形式：\n核心：分层，且往稳定方向依赖\n适配+扩展：分离变与不变\n依赖倒置：隔离基础设施依赖")]),v._v(" "),a("h3",{attrs:{id:"典型架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#典型架构"}},[v._v("#")]),v._v(" 典型架构")]),v._v(" "),a("h4",{attrs:{id:"插件化架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件化架构"}},[v._v("#")]),v._v(" 插件化架构")]),v._v(" "),a("p",[v._v("理解：分离变与不变，聚焦核心能力建设，开放个性化逻辑\n优点：•灵活性高，内核稳定\n缺点：•技术难度高（组件集成、包隔离、热部署等问题）；•协同成本高（插件开发、测试及问题排查成本更高）")]),v._v(" "),a("h4",{attrs:{id:"cqrs架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cqrs架构"}},[v._v("#")]),v._v(" CQRS架构")]),v._v(" "),a("p",[v._v("理解：读写职责分离，基于场景特征进行拆分（存储、模型、服务\n核心：•读写模型分离，各自演进优化\n适用：•读写场景特征明确，且复杂度高\n不适用：•业务场景简单，CQRS会让系统复杂化")]),v._v(" "),a("h4",{attrs:{id:"服务集成模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务集成模式"}},[v._v("#")]),v._v(" 服务集成模式")]),v._v(" "),a("p",[v._v("命令驱动模式：由统一的请求驱动串联，符合命令模式；一般为同步交互模式\n事件驱动：请求触发，内部基于事件驱动流转，松耦合模式；一般为异步交互模式")]),v._v(" "),a("h3",{attrs:{id:"api设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api设计"}},[v._v("#")]),v._v(" API设计")]),v._v(" "),a("p",[v._v("API的理解：组件化->模块化->分布式，API即是代码/程序块对外暴露的交互定义，小到一个类，大到一个系统\nAPI定义难点：")]),v._v(" "),a("ul",[a("li",[v._v("使用者和维护者之间理解不一致，你永远不知道使用者的脑洞有多大")]),v._v(" "),a("li",[v._v("需求持续变化，第一个版本只是开始，需要持续迭代，不仅要向后兼容，还要向前可扩展")]),v._v(" "),a("li",[v._v("提供出去，终生维护")])]),v._v(" "),a("h3",{attrs:{id:"api设计注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api设计注意事项"}},[v._v("#")]),v._v(" API设计注意事项")]),v._v(" "),a("p",[v._v("出发点：站在用户的视⻆，面向用例，以可迭代可演进的思路进行定义")]),v._v(" "),a("p",[v._v("简单易理解")]),v._v(" "),a("p",[v._v("封装复杂度：深API，而非宽API，参数尽可能简单，面向能力定义，而非实现\n概念清晰：API的定义和背后的对象概念、行为一致，通过API定义能够快速理解API背后的能力\n体验一致：命名方式、概念、描述、异常处理机制等，理解一次即可使用全部API")]),v._v(" "),a("p",[v._v("合理抽象层级")]),v._v(" "),a("p",[v._v("面向特定功能：解决一个问题，比如：handlePoiClosed（POI关店）\n面向一类场景：解决一类问题，比如：handlePoiOffline(POI惩罚、POI关店、POI暂停营业等）\n面向数据模型：放弃业务场景理解，面向数据提供接口，比如：updateProduct")]),v._v(" "),a("h3",{attrs:{id:"关于概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于概念"}},[v._v("#")]),v._v(" 关于概念")]),v._v(" "),a("p",[v._v("常犯的错误：引入新的概念，没给出明确的定义；片面化，没有思考清楚概念在完整业务流程中的作用和价值\n导致的问题：代码理解成本高，增加系统复杂度，且容易自相矛盾；容易产生认知冲突")])])}),[],!1,null,null,null);_.default=r.exports}}]);