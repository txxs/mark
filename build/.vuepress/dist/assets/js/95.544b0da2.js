(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{473:function(t,v,a){"use strict";a.r(v);var _=a(13),e=Object(_.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("原文地址：")]),t._v(" "),a("p",[t._v("https://www.jianshu.com/p/ef1cd9a07cc1")]),t._v(" "),a("p",[t._v("https://www.jdon.com/37625")]),t._v(" "),a("h3",{attrs:{id:"acid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acid"}},[t._v("#")]),t._v(" ACID")]),t._v(" "),a("p",[t._v("关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区：")]),t._v(" "),a("p",[t._v("Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。")]),t._v(" "),a("p",[t._v("Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。")]),t._v(" "),a("p",[t._v("Isolation隔离层. 事务将假定只有它自己在操作数据库，彼此不知晓。")]),t._v(" "),a("p",[t._v("Durability. 一旦事务完成，就不能返回。")]),t._v(" "),a("p",[t._v("跨数据库两段提交事务：2PC (two-phase commit)， 2PC is the anti-scalability pattern (Pat Helland) 是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用2PC，使用BASE来回避。")]),t._v(" "),a("p",[t._v("BASE模型反ACID模型，完全不同ACID模型，牺牲高一致性，获得可用性或可靠性：")]),t._v(" "),a("p",[t._v("Basically Available基本可用。支持分区失败(e.g. sharding碎片划分数据库)")]),t._v(" "),a("p",[t._v("Soft state软状态 状态可以有一段时间不同步，异步。")]),t._v(" "),a("p",[t._v("Eventually consistent最终一致，最终数据是一致的就可以了，而不是时时高一致。")]),t._v(" "),a("h3",{attrs:{id:"cap理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cap理论"}},[t._v("#")]),t._v(" cap理论")]),t._v(" "),a("p",[t._v("CAP由[Eric Brewer]在2000年PODC会议上提出，是Eric Brewer在Inktomi期间研发搜索引擎、分布式web缓存时得出的关于数据一致性(consistency)、服务可用性(availability)、分区容错性(partition-tolerance)的猜想：It is impossible for a web service to provide the three following guarantees : Consistency, Availability and Partition-tolerance.")]),t._v(" "),a("p",[t._v("该猜想在提出两年后被证明成立，成为我们熟知的CAP定理：")]),t._v(" "),a("p",[t._v("数据一致性(consistency)：所有节点在同一时刻能够看到同样的数据，也即“强一致性”；")]),t._v(" "),a("p",[t._v("服务可用性(availability)：所有读写请求在一定时间内得到响应，可终止、不会一直等待；可用性是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。这里的重点是”有限时间内”和”返回结果”。")]),t._v(" "),a("p",[t._v("分区容错性(partition-tolerance)：因为网络故障导致的系统分区不影响系统正常运行。分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。")]),t._v(" "),a("h3",{attrs:{id:"具体协议代表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具体协议代表"}},[t._v("#")]),t._v(" 具体协议代表")]),t._v(" "),a("p",[t._v("C+A ：以2阶段提交(2 phase commit)为代表的严格选举协议。当通信中断时算法不具有终止性（即不具备分区容忍性）;")]),t._v(" "),a("p",[t._v("应用场景：分布式数据库")]),t._v(" "),a("p",[t._v("C+P ：以Paxos、Raft、zab（自己加的有待验证）为代表的多数派选举算法。当不可用的执行过程超过半数时，算法无法得到正确结果（即会出现不可用的情况）;")]),t._v(" "),a("p",[t._v("应用场景：zk")]),t._v(" "),a("p",[t._v("A+P ：以Gossip协议为代表的冲突解决协议。当网络分区存在和执行过程正确时，只能等待分区消失才保持一致性（即不具备强一致性）")]),t._v(" "),a("p",[t._v("应用场景：")]),t._v(" "),a("h3",{attrs:{id:"base理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base理论"}},[t._v("#")]),t._v(" BASE理论")]),t._v(" "),a("p",[t._v("BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写。BASE理论是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于CAP定理逐步演化而来的。BASE理论的核心思想是：*"),a("em",[t._v("即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性")]),t._v("。接下来看一下BASE中的三要素：")]),t._v(" "),a("p",[t._v("1、基本可用")]),t._v(" "),a("p",[t._v("基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性—-注意，这绝不等价于系统不可用。比如：")]),t._v(" "),a("p",[t._v("（1）响应时间上的损失。正常情况下，一个在线搜索引擎需要在0.5秒之内返回给用户相应的查询结果，但由于出现故障，查询结果的响应时间增加了1~2秒")]),t._v(" "),a("p",[t._v("（2）系统功能上的损失：正常情况下，在一个电子商务网站上进行购物的时候，消费者几乎能够顺利完成每一笔订单，但是在一些节日大促购物高峰的时候，由于消费者的购物行为激增，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面")]),t._v(" "),a("p",[t._v("2、软状态")]),t._v(" "),a("p",[t._v("软状态指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时")]),t._v(" "),a("p",[t._v("3、最终一致性")]),t._v(" "),a("p",[t._v("最终一致性强调的是所有的数据副本，在经过一段时间的同步之后，最终都能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。")]),t._v(" "),a("p",[t._v("总的来说，BASE理论面向的是大型高可用可扩展的分布式系统，和传统的事务ACID特性是相反的，它完全不同于ACID的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。但同时，在实际的分布式场景中，不同业务单元和组件对数据一致性的要求是不同的，因此在具体的分布式系统架构设计过程中，ACID特性和BASE理论往往又会结合在一起。")]),t._v(" "),a("p",[t._v("最终一致性方面最出名的系统可以说是DNS系统")])])}),[],!1,null,null,null);v.default=e.exports}}]);