(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{572:function(i,t,v){"use strict";v.r(t);var _=v(13),s=Object(_.a)({},(function(){var i=this,t=i.$createElement,v=i._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[v("h3",{attrs:{id:"线程间通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程间通信"}},[i._v("#")]),i._v(" 线程间通信")]),i._v(" "),v("ul",[v("li",[v("p",[v("strong",[i._v("synchronized 同步")])]),i._v(" "),v("ul",[v("li",[i._v("这种方式，本质上就是 “共享内存” 式的通信。多个线程需要访问同一个共享变量，谁拿到了锁（获得了访问权限），谁就可以执行。")])])]),i._v(" "),v("li",[v("p",[v("strong",[i._v("while 轮询的方式")])]),i._v(" "),v("ul",[v("li",[i._v("在这种方式下，线程A不断地改变条件，线程 ThreadB 不停地通过 while 语句检测这个条件"),v("code",[i._v("(list.size()==5)")]),i._v(" 是否成立 ，从而实现了线程间的通信。但是这种方式会浪费 CPU 资源。之所以说它浪费资源，是因为 JVM 调度器将 CPU 交给线程B执行时，它没做啥“有用”的工作，只是在不断地测试某个条件是否成立。就类似于现实生活中，某个人一直看着手机屏幕是否有电话来了，而不是： 在干别的事情，当有电话来时，响铃通知TA电话来了。")])])]),i._v(" "),v("li",[v("p",[v("strong",[i._v("wait/notify 机制")])]),i._v(" "),v("ul",[v("li",[v("p",[i._v("当条件未满足时，线程A调用 wait() 放弃CPU，并进入阻塞状态。（不像 while 轮询那样占用 CPU）")]),i._v(" "),v("p",[i._v("当条件满足时，线程B调用 notify() 通知线程A，所谓通知线程A，就是唤醒线程A，并让它进入可运行状态。")])])])]),i._v(" "),v("li",[v("p",[v("strong",[i._v("管道通信")])]),i._v(" "),v("ul",[v("li",[i._v("java.io.PipedInputStream 和 java.io.PipedOutputStream 进行通信")])])])]),i._v(" "),v("h3",{attrs:{id:"进程间通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信"}},[i._v("#")]),i._v(" 进程间通信")]),i._v(" "),v("ul",[v("li",[v("strong",[i._v("管道（Pipe）")]),i._v(" ：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。")]),i._v(" "),v("li",[v("strong",[i._v("命名管道（named pipe）")]),i._v(" ：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关 系 进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。")]),i._v(" "),v("li",[v("strong",[i._v("信号（Signal）")]),i._v(" ：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送 信号给进程本身；Linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。")]),i._v(" "),v("li",[v("strong",[i._v("消息（Message）队列")]),i._v(" ：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺")]),i._v(" "),v("li",[v("strong",[i._v("共享内存")]),i._v(" ：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。")]),i._v(" "),v("li",[v("strong",[i._v("内存映射（mapped memory）")]),i._v(" ：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。")]),i._v(" "),v("li",[v("strong",[i._v("信号量（semaphore）")]),i._v(" ：主要作为进程间以及同一进程不同线程之间的同步手段。")]),i._v(" "),v("li",[v("strong",[i._v("套接口（Socket）")]),i._v(" ：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：linux和System V的变种都支持套接字。")])])])}),[],!1,null,null,null);t.default=s.exports}}]);