(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{563:function(n,e,a){"use strict";a.r(e);var s=a(13),t=Object(s.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[n._v("来自自己的CSND地址：")]),n._v(" "),a("p",[n._v("https://blog.csdn.net/maoyeqiu/article/details/97485393")]),n._v(" "),a("p",[n._v("先说明一下环境：")]),n._v(" "),a("p",[n._v("外网20台机器：4核8G  JDK8")]),n._v(" "),a("p",[n._v("内网1台机器：32核128G JDK8")]),n._v(" "),a("h3",{attrs:{id:"上线gc次数超大"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上线gc次数超大"}},[n._v("#")]),n._v(" 上线GC次数超大")]),n._v(" "),a("p",[n._v("线上的机器每次在上线的时候都会爆出来大量的GC，这按说是一个正常的现象，但是GC的次数明显超过了报警的阈值，所以找了一下原因，在这里记录一下这次解决问题的步骤\n1、首先根据以下两个方式找到相应的进程号")]),n._v(" "),a("p",[n._v("top | grep java\nps -ef |grep java\n2、然后根据进程号去heap一下")]),n._v(" "),a("p",[n._v("jmap -heap 20563")]),n._v(" "),a("p",[n._v("打印出以下的数据结果")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("using parallel threads in the new generation.\nusing thread-local object allocation.\nConcurrent Mark-Sweep GC\n \nHeap Configuration:\n   MinHeapFreeRatio         = 40\n   MaxHeapFreeRatio         = 70\n   MaxHeapSize              = 4294967296 (4096.0MB)\n   NewSize                  = 1431633920 (332.75MB)\n   MaxNewSize               = 1431633920 (332.75MB)\n   OldSize                  = 2863333376 (3230.6875MB)\n   NewRatio                 = 2\n   SurvivorRatio            = 3\n   MetaspaceSize            = 21807104 (20.796875MB)\n   CompressedClassSpaceSize = 1073741824 (1024.0MB)\n   MaxMetaspaceSize         = 17592186044415 MB\n   G1HeapRegionSize         = 0 (0.0MB)\njmap -histo 20563 输出信息包括类名，对象数量，对象占用大小\n num     #instances         #bytes  class name\n----------------------------------------------\n 727:            47           1880  com.immomo.moa.service.ServiceMetadata\n 728:            78           1872  com.immomo.moaservice.live.luck.LiveNoOfficialRoomLuckServiceImpl$12\n 729:            78           1872  redis.clients.jedis.Tuple\n 730:            33           1848  com.yammer.metrics.core.Meter\n 731:           115           1840  java.util.concurrent.atomic.AtomicLongArray\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br")])]),a("p",[n._v("jstat -gcutil 20563 1000 5 查看GC的情况 后边三个参数分别是次数，间隔的毫秒")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("[momobot@live-dev-pay-001.rw.momo.com live-luck]$ jstat -gcutil 20563 2000 10\n\n  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT   \n  0.00   0.00  46.48   1.43  97.26  95.40    100    2.951     8    0.807    3.758\n  0.00   0.00  46.73   1.43  97.26  95.40    100    2.951     8    0.807    3.758\n  0.00   0.00  46.81   1.43  97.26  95.40    100    2.951     8    0.807    3.758\n  0.00   0.00  46.88   1.43  97.26  95.40    100    2.951     8    0.807    3.758\n  0.00   0.00  47.16   1.43  97.26  95.40    100    2.951     8    0.807    3.758\n  0.00   0.00  47.23   1.43  97.26  95.40    100    2.951     8    0.807    3.758\n  0.00   0.00  47.31   1.43  97.26  95.40    100    2.951     8    0.807    3.758\n  0.00   0.00  47.36   1.43  97.26  95.40    100    2.951     8    0.807    3.758\n  0.00   0.00  47.41   1.43  97.26  95.40    100    2.951     8    0.807    3.758\n  0.00   0.00  47.47   1.43  97.26  95.40    100    2.951     8    0.807    3.758\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("p",[n._v("// 参数解释：\nOptions — 选项，我们一般使用 -gcutil 查看gc情况\nvmid    — VM的进程号，即当前运行的java进程号\ninterval– 间隔时间，单位为秒或者毫秒\ncount   — 打印次数，如果缺省则打印无数次\n \nS0  — Heap上的 Survivor space 0 区已使用空间的百分比\nS1  — Heap上的 Survivor space 1 区已使用空间的百分比\nE   — Heap上的 Eden space 区已使用空间的百分比\nO   — Heap上的 Old space 区已使用空间的百分比\nP   — Perm space 区已使用空间的百分比\nYGC — 从应用程序启动到采样时发生 Young GC 的次数\nYGCT– 从应用程序启动到采样时 Young GC 所用的时间(单位秒)\nFGC — 从应用程序启动到采样时发生 Full GC 的次数\nFGCT– 从应用程序启动到采样时 Full GC 所用的时间(单位秒)\nGCT — 从应用程序启动到采样时用于垃圾回收的总时间(单位秒)")]),n._v(" "),a("p",[n._v("jps -v\nJVM的配置情况")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('jvm_args="-Xmx4096m -Xms4096m -verbose:gc -Xloggc:${logPath}/gc-${MOAPort}.log -XX:CMSInitiatingOccupancyFraction=80 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:MaxTenuringThreshold=15 -XX:-UseAdaptiveSizePolicy -XX:PermSize=256M -XX:MaxPermSize=512M -XX:SurvivorRatio=3  -XX:+PrintGCDateStamps  -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -XX:+AlwaysPreTouch "\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("通过对比参数我们发现一个问题就是新生代分别的值不和常规，常理情况下，newRatio默认值应该是2，也就是说老年代占整个内存的三分之二，年轻代是三分之一，差不多1G多了，上边heap出来的值远不是这样的；然后就开始查原因是为什么？最后在Oracle官网找到了这个：")]),n._v(" "),a("p",[n._v("newRatio参数在1.4.2,5.0,6u14这几个版本号在CMS中默认是完全失效的，解决的版本是6u18和7，按说我们用的8也是OK的呀，但是依旧是有问题的，接着查，然后找到了这个：")]),n._v(" "),a("p",[n._v("在JDK8和9这两个大版本CMS使用GC算法的时候又是默认忽略的，那我们就找到原因了，怎么解决这个问题的，官方给了三个方案：")]),n._v(" "),a("p",[n._v("1、Option #1 : Default GC (-XX:+UseParallelGC) : PSYoungGen，不用CMS")]),n._v(" "),a("p",[n._v("2、Option #2 : UseConcMarkSweepGC only (-XX:+ UseConcMarkSweepGC) : par new generation total 153344K = 149.75 MB 继续使用，但是年轻代比较小")]),n._v(" "),a("p",[n._v("3、UseConcMarkSweepGC along with NewRatio=2 显示的的指定newRatio这个参数")]),n._v(" "),a("p",[n._v("OK，按照第三种方案修改了一下配置上线，heap以下发现确实OK了，上线时候大量GC的问题也解决了，下边列一下heap出来的参数：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("using parallel threads in the new generation.\nusing thread-local object allocation.\nConcurrent Mark-Sweep GC\n \nHeap Configuration:\n   MinHeapFreeRatio         = 40\n   MaxHeapFreeRatio         = 70\n   MaxHeapSize              = 4294967296 (4096.0MB)\n   NewSize                  = 1431633920 (1365.3125MB)\n   MaxNewSize               = 1431633920 (1365.3125MB)\n   OldSize                  = 2863333376 (2730.6875MB)\n   NewRatio                 = 2\n   SurvivorRatio            = 3\n   MetaspaceSize            = 21807104 (20.796875MB)\n   CompressedClassSpaceSize = 1073741824 (1024.0MB)\n   MaxMetaspaceSize         = 17592186044415 MB\n   G1HeapRegionSize         = 0 (0.0MB)\n \nHeap Usage:\nNew Generation (Eden + 1 Survivor Space):\n   capacity = 1145307136 (1092.25MB)\n   used     = 684326048 (652.6241760253906MB)\n   free     = 460981088 (439.6258239746094MB)\n   59.75043955370937% used\nEden Space:\n   capacity = 858980352 (819.1875MB)\n   used     = 670442392 (639.3836898803711MB)\n   free     = 188537960 (179.8038101196289MB)\n   78.0509577942011% used\nFrom Space:\n   capacity = 286326784 (273.0625MB)\n   used     = 13883656 (13.240486145019531MB)\n   free     = 272443128 (259.82201385498047MB)\n   4.848884832234207% used\nTo Space:\n   capacity = 286326784 (273.0625MB)\n   used     = 0 (0.0MB)\n   free     = 286326784 (273.0625MB)\n   0.0% used\nconcurrent mark-sweep generation:\n   capacity = 2863333376 (2730.6875MB)\n   used     = 36032104 (34.362892150878906MB)\n   free     = 2827301272 (2696.324607849121MB)\n   1.258397094170567% used\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br")])]),a("p",[n._v("20852 interned Strings occupying 2125696 bytes.\n后台陆陆续续的发现我的其他项目也有这些问题，然后尝试了其他的解决方案，用了G1，这个更牛逼，上线GC的总次数由原来的5000左右，直接下降到60左右，平时GC的次数由原来的20左右降到4左右，提升效果非常的明显，至于G1为什么这么厉害，自行度娘就可以了。上边的问题没有完，我在内网看了一下这个机器的内存分配情况，发现新生的内存大小不是300多M，而是正常的这是为什么呢？继续看上边JDK8中bug指出的 when UseConcMarkSweepGC is used as GC algorithm，也就是说CMS在8和9中使用的年轻代的内存分配算法，而没有使用默认的newRatio参数，那我们就来看一下这个算法是什么？计算内存有两种方式：")]),n._v(" "),a("p",[n._v("第一种是max_heap/(NewRatio+1)，也就是我们常用的熟悉的，然后默认失效的那种 4096/（2+1）= 1365.34")]),n._v(" "),a("p",[n._v("第二种是ScaleForWordSize(young_gen_per_worker * parallel_gc_threads) ，具体算法是64M * 32 * 13 / 10 ＝ 2662.4M，具体怎么个过程我们看这篇文章，或者这里")]),n._v(" "),a("p",[n._v("总体算法是：")]),n._v(" "),a("p",[n._v("MIN2(max_heap/(NewRatio+1), ScaleForWordSize(young_gen_per_worker * parallel_gc_threads))\n也就是取第一种和第二种最小的那个，也就是我们看到的正常分配的情况了。至此我们的所有疑问都解决了。")]),n._v(" "),a("h3",{attrs:{id:"promotion-failed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promotion-failed"}},[n._v("#")]),n._v(" promotion failed")]),n._v(" "),a("p",[n._v("CMS GC时出现promotion failed和concurrent mode failure\n对于采用CMS进行旧生代GC的程序而言，尤其要注意GC日志中是否有promotion failed和concurrent mode failure两种状况，当这两种状况出现时可能会触发Full GC。")]),n._v(" "),a("p",[n._v("promotion failed是在进行Minor GC时，survivor space放不下、对象只能放入旧生代，而此时旧生代也放不下造成的；concurrent mode failure是在执行CMS GC的过程中同时有对象要放入旧生代，而此时旧生代空间不足造成的。")]),n._v(" "),a("p",[n._v("以上是原因，明显是代码有问题，然后通过果然发现有大对象，优化就是了，每次用完null")]),n._v(" "),a("p",[n._v("jmap -histo 20563 输出信息包括类名，对象数量，对象占用大小")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(" num     #instances         #bytes  class name\n----------------------------------------------\n 727:            47           1880  com.immomo.moa.service.ServiceMetadata\n 728:            78           1872  com.immomo.moaservice.live.luck.LiveNoOfficialRoomLuckServiceImpl$12\n 729:            78           1872  redis.clients.jedis.Tuple\n 730:            33           1848  com.yammer.metrics.core.Meter\n 731:           115           1840  java.util.concurrent.atomic.AtomicLongArray\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("p",[n._v("参考：")]),n._v(" "),a("p",[n._v("一次耗时的排查\nhttps://www.jianshu.com/p/1a7b2d141611\n长耗时\nhttp://www.importnew.com/22886.html\n降低新生代GC的时间\nhttps://hllvm-group.iteye.com/group/topic/42357\n显著降低的一次分析\nhttps://www.cnblogs.com/sunzhenchao/p/6711275.html\nfull gc频繁\nhttps://blog.csdn.net/varyall/article/details/80517977")]),n._v(" "),a("p",[n._v("比较系统的介绍GC调优\nhttps://juejin.im/post/59f02f406fb9a0451869f01c\n关于GC日志的解读\nhttps://blog.csdn.net/renfufei/article/details/49230943\n一次内存分配的堆的大小，模拟分配的实战性比较\nhttps://www.ibm.com/developerworks/cn/java/j-lo-jvm-optimize-experience/index.html\n几种fullGC的原因\nhttps://blog.csdn.net/endlu/article/details/51144918")])])}),[],!1,null,null,null);e.default=t.exports}}]);