(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{431:function(a,r,t){"use strict";t.r(r);var s=t(13),v=Object(s.a)({},(function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("原文地址：")]),a._v(" "),t("p",[a._v("https://blog.csdn.net/qq_22075041/article/details/79490230（Sharding-JDBC）")]),a._v(" "),t("p",[a._v("https://blog.csdn.net/fly910905/article/details/87101059")]),a._v(" "),t("p",[a._v("https://blog.csdn.net/xuheng8600/article/details/80336094")]),a._v(" "),t("h2",{attrs:{id:"应用层依赖类中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用层依赖类中间件"}},[a._v("#")]),a._v(" 应用层依赖类中间件")]),a._v(" "),t("h3",{attrs:{id:"shardingsphere"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere"}},[a._v("#")]),a._v(" ShardingSphere")]),a._v(" "),t("p",[a._v("ShardingSphere是一套开源的分布式数据库中间件解决方案组成的生态圈，它由Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar（计划中）这3款相互独立的产品组成。 他们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、容器、云原生等各种多样化的应用场景。")]),a._v(" "),t("p",[a._v("ShardingSphere定位为关系型数据库中间件，旨在充分合理地在分布式的场景下利用关系型数据库的计算和存储能力，而并非实现一个全新的关系型数据库。 它与NoSQL和NewSQL是并存而非互斥的关系。NoSQL和NewSQL作为新技术探索的前沿，放眼未来，拥抱变化，是非常值得推荐的。反之，也可以用另一种思路看待问题，放眼未来，关注不变的东西，进而抓住事物本质。 关系型数据库当今依然占有巨大市场，是各个公司核心业务的基石，未来也难于撼动，我们目前阶段更加关注在原有基础上的增量，而非颠覆。")]),a._v(" "),t("h3",{attrs:{id:"sharding-jdbc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sharding-jdbc"}},[a._v("#")]),a._v(" Sharding-JDBC")]),a._v(" "),t("p",[a._v("定位为轻量级Java框架，在Java的JDBC层提供的额外服务。它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。")]),a._v(" "),t("ul",[t("li",[a._v("适用于任何基于Java的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。")]),a._v(" "),t("li",[a._v("基于任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。")]),a._v(" "),t("li",[a._v("支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer和PostgreSQL。")])]),a._v(" "),t("h3",{attrs:{id:"sharding-proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sharding-proxy"}},[a._v("#")]),a._v(" Sharding-Proxy")]),a._v(" "),t("p",[a._v("定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前先提供MySQL版本，它可以使用任何兼容MySQL协议的访问客户端(如：MySQL Command Client, MySQL Workbench等)操作数据，对DBA更加友好。")]),a._v(" "),t("p",[a._v("向应用程序完全透明，可直接当做MySQL使用。")]),a._v(" "),t("p",[a._v("适用于任何兼容MySQL协议的客户端。")]),a._v(" "),t("h3",{attrs:{id:"sharding-sidecar-tbd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sharding-sidecar-tbd"}},[a._v("#")]),a._v(" Sharding-Sidecar（TBD）")]),a._v(" "),t("p",[a._v("定位为Kubernetes或Mesos的云原生数据库代理，以DaemonSet的形式代理所有对数据库的访问。 通过无中心、零侵入的方案提供与数据库交互的的啮合层，即Database Mesh，又可称数据网格。")]),a._v(" "),t("p",[a._v("Database Mesh的关注重点在于如何将分布式的数据访问应用与数据库有机串联起来，它更加关注的是交互，是将杂乱无章的应用与数据库之间的交互有效的梳理。使用Database Mesh，访问数据库的应用和数据库终将形成一个巨大的网格体系，应用和数据库只需在网格体系中对号入座即可，它们都是被啮合层所治理的对象。")]),a._v(" "),t("h2",{attrs:{id:"中间层代理类中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间层代理类中间件"}},[a._v("#")]),a._v(" 中间层代理类中间件")]),a._v(" "),t("p",[a._v("这类分库分表中间件的核心原理是在应用和数据库的连接之间搭起一个代理层，上层应用以标准的MySQL协议来连接代理层，然后代理层负责转发请求到底层的MySQL物理实例，这种方式对应用只有一个要求，就是只要用MySQL协议来通信即可，所以用MySQL Workbench这种纯的客户端都可以直接连接你的分布式数据库，自然也天然支持所有的编程语言。比较有代表性的产品有开创性质的Amoeba、阿里开源的Cobar、社区发展比较好的Mycat 等。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://txxs.github.io/pic/tofuturedbmysql/1-1.png",alt:"1"}})]),a._v(" "),t("h3",{attrs:{id:"mycat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mycat"}},[a._v("#")]),a._v(" MyCat")]),a._v(" "),t("p",[a._v("MyCat是一个开源的分布式数据库系统，是一个实现了MySQL协议的服务器，前端用户可以把它看作是一个数据库代理，用MySQL客户端工具和命令行访问，而其后端可以用MySQL原生协议与多个MySQL服务器通信，也可以用JDBC协议与大多数主流数据库服务器通信，其核心功能是分表分库，即将一个大表水平分割为N个小表，存储在后端MySQL服务器里或者其他数据库里。")]),a._v(" "),t("h3",{attrs:{id:"cobar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cobar"}},[a._v("#")]),a._v(" Cobar")]),a._v(" "),t("p",[a._v("Cobar是提供关系型数据库（MySQL）分布式服务的中间件，它可以让传统的数据库得到良好的线性扩展，并看上去还是一个数据库，对应用保持透明。")]),a._v(" "),t("p",[a._v("Cobar以Proxy的形式位于前台应用和实际数据库之间，对前台的开放的接口是MySQL通信协议，将前台SQL语句变更并按照数据分布规则发到合适的后台数据分库，再合并返回结果，模拟单库下的数据库行为。")]),a._v(" "),t("p",[a._v("Cobar属于中间层方案，在应用程序和MySQL之间搭建一层Proxy。中间层介于应用程序与数据库间，需要做一次转发，而基于JDBC协议并无额外转发，直接由应用程序连接数据库，")]),a._v(" "),t("p",[a._v("性能上有些许优势。这里并非说明中间层一定不如客户端直连，除了性能，需要考虑的因素还有很多，中间层更便于实现监控、数据迁移、连接管理等功能。")]),a._v(" "),t("p",[a._v("Cobar属于阿里B2B事业群，始于2008年，在阿里服役3年多，接管3000+个MySQL数据库的schema,集群日处理在线SQL请求50亿次以上。")]),a._v(" "),t("h3",{attrs:{id:"tddl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tddl"}},[a._v("#")]),a._v(" TDDL")]),a._v(" "),t("p",[a._v("TDDL是Tabao根据自己的业务特点开发了(Tabao Distributed Data Layer, 外号：头都大了)。主要解决了分库分表对应用的透明化以及异构数据库之间的数据复制，")]),a._v(" "),t("p",[a._v("它是一个基于集中式配置的jdbc datasourcce实现，具有主备，读写分离，动态数据库配置等功能。")]),a._v(" "),t("p",[a._v("TDDL并非独立的中间件，只能算作中间层，处于业务层和JDBC层中间，是以Jar包方式提供给应用调用，属于JDBC Shard的思想。")]),a._v(" "),t("p",[a._v("由于Cobar发起人的离职，Cobar停止维护。后续的类似中间件，比如MyCAT建立于Cobar之上，包括现在阿里服役的RDRS其中也复用了Cobar-Proxy的相关代码。")]),a._v(" "),t("h3",{attrs:{id:"atlas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atlas"}},[a._v("#")]),a._v(" Atlas")]),a._v(" "),t("p",[a._v("Atlas是一个位于应用程序与MySQL之间的基于MySQL协议的数据中间层项目，它是在mysql-proxy 0.8.2版本上对其进行优化，360团队基于mysql proxy 把lua用C改写，")]),a._v(" "),t("p",[a._v("它实现了MySQL的客户端和服务端协议，作为服务端与应用程序通讯，同时作为客户端与MySQL通讯。它对应用程序屏蔽了DB的细节。")]),a._v(" "),t("p",[a._v("Altas不能实现分布式分表，所有的字表必须在同一台DB的同一个DataBase里且所有的字表必须实现建好，Altas没有自动建表的功能。")]),a._v(" "),t("p",[a._v("原有版本是不支持分库分表， 目前已经放出了分库分表版本。在网上看到一些朋友经常说在高并 发下会经常挂掉，如果大家要使用需要提前做好测试。")]),a._v(" "),t("h3",{attrs:{id:"sharding-jdbc-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sharding-jdbc-2"}},[a._v("#")]),a._v(" sharding-JDBC")]),a._v(" "),t("p",[a._v("sharding-JDBC是当当应用框架ddframe中，从关系型数据库模块dd-rdb中分离出来的数据库水平分片框架，实现透明化数据库分库分表访问。")]),a._v(" "),t("p",[a._v("Sharding-JDBC是继dubbox和elastic-job之后，ddframe系列开源的第3个项目。")]),a._v(" "),t("p",[a._v("Sharding-JDBC直接封装JDBC API，可以理解为增强版的JDBC驱动，旧代码迁移成本几乎为零：")]),a._v(" "),t("p",[a._v("可适用于任何基于Java的ORM框架，如JPA、Hibernate、Mybatis、Spring JDBC Template或直接使用JDBC。\n可基于任何第三方的数据库连接池，如DBCP、C3P0、 BoneCP、Druid等。\n理论上可支持任意实现JDBC规范的数据库。虽然目前仅支持MySQL，但已有支持Oracle、SQLServer等数据库的计划。\nSharding-JDBC定位为轻量Java框架，使用客户端直连数据库，以jar包形式提供服务，无proxy代理层，无需额外部署，无其他依赖，DBA也无需改变原有的运维方式。")]),a._v(" "),t("p",[a._v("Sharding-JDBC分片策略灵活，可支持等号、between、in等多维度分片，也可支持多分片键。")]),a._v(" "),t("p",[a._v("SQL解析功能完善，支持聚合、分组、排序、limit、or等查询，并支持Binding Table以及笛卡尔积表查询。")]),a._v(" "),t("p",[a._v("所以综上所述，现在其实建议考量的，就是sharding-jdbc和mycat，这两个都可以去考虑使用。")]),a._v(" "),t("p",[a._v("sharding-jdbc这种client层方案的优点在于不用部署，运维成本低，不需要代理层的二次转发请求，性能很高，但是如果遇到升级啥的需要各个系统都重新升级版本再发布，各个系统都需要耦合sharding-jdbc的依赖；")]),a._v(" "),t("p",[a._v("mycat这种proxy层方案的缺点在于需要部署，自己及运维一套中间件，运维成本高，但是好处在于对于各个项目是透明的，如果遇到升级之类的都是自己中间件那里搞就行了。")]),a._v(" "),t("p",[a._v("通常来说，这两个方案其实都可以选用，但是我个人建议中小型公司选用sharding-jdbc，client层方案轻便，而且维护成本低，不需要额外增派人手，而且中小型公司系统复杂度会低一些，项目也没那么多；")]),a._v(" "),t("p",[a._v("但是中大型公司最好还是选用mycat这类proxy层方案，因为可能大公司系统和项目非常多，团队很大，人员充足，那么最好是专门弄个人来研究和维护mycat，然后大量项目直接透明使用即可。")])])}),[],!1,null,null,null);r.default=v.exports}}]);