{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{400:function(s,n,e){\"use strict\";e.r(n);var a=e(13),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[e(\"h3\",{attrs:{id:\"_1、单例模式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、单例模式\"}},[s._v(\"#\")]),s._v(\" 1、单例模式\")]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"public class SingletonDemo7 {\\n    private volatile static SingletonDemo7 singletonDemo7;\\n    private SingletonDemo7(){}\\n    public static SingletonDemo7 getSingletonDemo7(){\\n    if (singletonDemo7 == null) {\\n        synchronized (SingletonDemo7.class) {\\n            if (singletonDemo7 == null) {\\n                singletonDemo7 = new SingletonDemo7();\\n            }\\n        }\\n    }\\n    return singletonDemo7;\\n }\\n}\\n\\n这些实现的共同之处是全部私有化成员变量和构造函数，并且有一个公开的getInstance函数。注意，在第七种双重检查中，成员变量必须加volatile关键字修饰。否则很可能出现一个线程创建了一半的对象被另一个线程访问，>出现空指针异常。\\n\\nhttps://www.cnblogs.com/dudu19939/p/9668778.html\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),e(\"br\")])]),e(\"h3\",{attrs:{id:\"观察者模式和发布订阅者模式-eventbus-kafka-service\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#观察者模式和发布订阅者模式-eventbus-kafka-service\"}},[s._v(\"#\")]),s._v(\" 观察者模式和发布订阅者模式(eventbus kafka service)\")]),s._v(\" \"),e(\"p\",[s._v(\"https://www.cnblogs.com/java-my-life/archive/2012/05/16/2502279.html\\nhttps://juejin.im/post/5a14e9edf265da4312808d86\\n　　观察者模式所涉及的角色有：\")]),s._v(\" \"),e(\"p\",[s._v(\"●　　抽象主题(Subject)角色：抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色。\")]),s._v(\" \"),e(\"p\",[s._v(\"●　　具体主题(ConcreteSubject)角色：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。\")]),s._v(\" \"),e(\"p\",[s._v(\"●　　抽象观察者(Observer)角色：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。\")]),s._v(\" \"),e(\"p\",[s._v(\"●　　具体观察者(ConcreteObserver)角色：存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。\")]),s._v(\" \"),e(\"p\",[s._v(\"抽象主题\")]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v('public abstract class Subject {\\n    /**\\n     * 用来保存注册的观察者对象\\n     */\\n    private    List<Observer> list = new ArrayList<Observer>();\\n    /**\\n     * 注册观察者对象\\n     * @param observer    观察者对象\\n     */\\n    public void attach(Observer observer){\\n        \\n        list.add(observer);\\n        System.out.println(\"Attached an observer\");\\n    }\\n    /**\\n     * 删除观察者对象\\n     * @param observer    观察者对象\\n     */\\n    public void detach(Observer observer){\\n        \\n        list.remove(observer);\\n    }\\n    /**\\n     * 通知所有注册的观察者对象\\n     */\\n    public void nodifyObservers(String newState){\\n        \\n        for(Observer observer : list){\\n            observer.update(newState);\\n        }\\n    }\\n}\\n')])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"31\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"32\")]),e(\"br\")])]),e(\"p\",[s._v(\"具体主题\")]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v('public class ConcreteSubject extends Subject{\\n    \\n    private String state;\\n    \\n    public String getState() {\\n        return state;\\n    }\\n\\n    public void change(String newState){\\n        state = newState;\\n        System.out.println(\"主题状态为：\" + state);\\n        //状态发生改变，通知各个观察者\\n        this.nodifyObservers(state);\\n    }\\n}\\n')])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),e(\"br\")])]),e(\"p\",[s._v(\"抽奖观察者\")]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"public interface Observer {\\n    /**\\n     * 更新接口\\n     * @param state    更新的状态\\n     */\\n    public void update(String state);\\n}\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\")])]),e(\"p\",[s._v(\"具体观察者\")]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v('public class ConcreteObserver implements Observer {\\n    //观察者的状态\\n    private String observerState;\\n    \\n    @Override\\n    public void update(String state) {\\n        /**\\n         * 更新观察者的状态，使其与目标的状态保持一致\\n         */\\n        observerState = state;\\n        System.out.println(\"状态为：\"+observerState);\\n    }\\n\\n}\\n')])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),e(\"br\")])]),e(\"p\",[s._v(\"客户端\")]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v('public class Client {\\n\\n    public static void main(String[] args) {\\n        //创建主题对象\\n        ConcreteSubject subject = new ConcreteSubject();\\n        //创建观察者对象\\n        Observer observer = new ConcreteObserver();\\n        //将观察者对象登记到主题对象上\\n        subject.attach(observer);\\n        //改变主题对象的状态\\n        subject.change(\"new state\");\\n    }\\n\\n}\\n')])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),e(\"br\")])]),e(\"p\",[s._v(\"两者的区别：\\n在观察者模式中，观察者是知道Subject的，Subject一直保持对观察者进行记录。然而，在发布订阅模式中，发布者和订阅者不知道对方的存在。它们只有通过消息代理进行通信。\")]),s._v(\" \"),e(\"p\",[s._v(\"在发布订阅模式中，组件是松散耦合的，正好和观察者模式相反。\")]),s._v(\" \"),e(\"p\",[s._v(\"观察者模式大多数时候是同步的，比如当事件触发，Subject就会去调用观察者的方法。而发布-订阅模式大多数时候是异步的（使用消息队列）。\")]),s._v(\" \"),e(\"p\",[s._v(\"观察者 模式需要在单个应用程序地址空间中实现，而发布-订阅更像交叉应用模式。\")])])}),[],!1,null,null,null);n.default=t.exports}}]);","extractedComments":[]}