{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{460:function(a,t,v){\"use strict\";v.r(t);var o=v(13),s=Object(o.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[v(\"p\",[a._v(\"原文地址：\")]),a._v(\" \"),v(\"p\",[a._v(\"https://www.jianshu.com/p/937883b6b2e5\")]),a._v(\" \"),v(\"p\",[a._v(\"https://www.bbsmax.com/A/q4zVAn09dK/\")]),a._v(\" \"),v(\"p\",[a._v(\"https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html\")]),a._v(\" \"),v(\"h3\",{attrs:{id:\"为什么要序列化\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要序列化\"}},[a._v(\"#\")]),a._v(\" 为什么要序列化\")]),a._v(\" \"),v(\"p\",[a._v(\"举个栗子：下雨天我们要打伞，但是之后我们要把伞折叠起来，方便我们存放。那么运用到我们java中道理是一样的，我们要将数据分解成字节流，以便存储在文件中或在网络上传输，这叫序列化。我们要用的时候，就需要将字节流重构成对象，这叫反序列化。不知道我这么说大家能不能理解。\")]),a._v(\" \"),v(\"h3\",{attrs:{id:\"如何判断一个好的序列化\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何判断一个好的序列化\"}},[a._v(\"#\")]),a._v(\" 如何判断一个好的序列化\")]),a._v(\" \"),v(\"p\",[a._v(\"1.是否支持跨语言，支持语种是否丰富\")]),a._v(\" \"),v(\"p\",[a._v(\"2.编码后的码流\")]),a._v(\" \"),v(\"p\",[a._v(\"3.编解码的性能\")]),a._v(\" \"),v(\"p\",[a._v(\"4.类库是否小巧，API使用是否方便\")]),a._v(\" \"),v(\"p\",[a._v(\"5.使用者开发的工作量和难度。\")]),a._v(\" \"),v(\"h3\",{attrs:{id:\"java原生-inputstream等\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java原生-inputstream等\"}},[a._v(\"#\")]),a._v(\" Java原生 InputStream等\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"无法跨语言。这应该是java序列化最致命的问题了。由于java序列化是java内部私有的协议，其他语言不支持，导致别的语言无法反序列化，这严重阻碍了它的应用。\")]),a._v(\" \"),v(\"li\",[a._v(\"序列后的码流太大。java序列化的大小是二进制编码的5倍多！\")]),a._v(\" \"),v(\"li\",[a._v(\"序列化性能太低。java序列化的性能只有二进制编码的6.17倍，可见java序列化性能实在太差了。\")])]),a._v(\" \"),v(\"h3\",{attrs:{id:\"google的protobuf\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#google的protobuf\"}},[a._v(\"#\")]),a._v(\" google的Protobuf\")]),a._v(\" \"),v(\"p\",[a._v(\"Protobuf是google开源的项目，全称 Google Protocol Buffers.特点：\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"结构化数据存储格式（xml,json等）\")]),a._v(\" \"),v(\"li\",[a._v(\"高性能编解码技术\")]),a._v(\" \"),v(\"li\",[a._v(\"语言和平台无关，扩展性好\")]),a._v(\" \"),v(\"li\",[a._v(\"支持java,C++,Python三种语言。\")])]),a._v(\" \"),v(\"p\",[a._v(\"1、标准的IDL和IDL编译器，这使得其对工程师非常友好。\")]),a._v(\" \"),v(\"p\",[a._v(\"2、序列化数据非常简洁，紧凑，与XML相比，其序列化之后的数据量约为1/3到1/10。\")]),a._v(\" \"),v(\"p\",[a._v(\"3、解析速度非常快，比对应的XML快约20-100倍。\")]),a._v(\" \"),v(\"p\",[a._v(\"4、提供了非常友好的动态库，使用非常简介，反序列化只需要一行代码。\")]),a._v(\" \"),v(\"p\",[a._v(\"Protobuf是一个纯粹的展示层协议，可以和各种传输层协议一起使用；Protobuf的文档也非常完善。 但是由于Protobuf产生于Google，所以目前其仅仅支持Java、C++、Python三种语言。另外Protobuf支持的数据类型相对较少，不支持常量类型。由于其设计的理念是纯粹的展现层协议（Presentation Layer），目前并没有一个专门支持Protobuf的RPC框架。\")]),a._v(\" \"),v(\"h3\",{attrs:{id:\"facebook的thrift\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#facebook的thrift\"}},[a._v(\"#\")]),a._v(\" faceBook的Thrift\")]),a._v(\" \"),v(\"p\",[a._v(\"Thrift源于faceBook，2007年facebook将Thrift做为一个开源项目交给了apache基金会。特点：\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"Thrift支持多种语言（C++,C#,Cocoa,Erlag,Haskell,java,Ocami,Perl,PHP,Python,Ruby,和SmallTalk）\")]),a._v(\" \"),v(\"li\",[a._v(\"Thrift适用了组建大型数据交换及存储工具，对于大型系统中的内部数据传输，相对于Json和xml在性能上和传输大小上都有明显的优势。\")]),a._v(\" \"),v(\"li\",[a._v(\"Thrift支持三种比较典型的编码方式。（通用二进制编码，压缩二进制编码，优化的可选字段压缩编解码）\")])]),a._v(\" \"),v(\"p\",[a._v(\"Thrift是Facebook开源提供的一个高性能，轻量级RPC服务框架，其产生正是为了满足当前大数据量、分布式、跨语言、跨平台数据通讯的需求。 但是，Thrift并不仅仅是序列化协议，而是一个RPC框架。相对于JSON和XML而言，Thrift在空间开销和解析性能上有了比较大的提升，对于对性能要求比较高的分布式系统，它是一个优秀的RPC解决方案；但是由于Thrift的序列化被嵌入到Thrift框架里面，Thrift框架本身并没有透出序列化和反序列化接口，这导致其很难和其他传输层协议共同使用（例如HTTP）。\")]),a._v(\" \"),v(\"h3\",{attrs:{id:\"kryo\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#kryo\"}},[a._v(\"#\")]),a._v(\" kryo\")]),a._v(\" \"),v(\"p\",[a._v(\"官方文档中文翻译：http://blog.csdn.net/fanjunjaden/article/details/72823866\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"速度快，序列化后体积小\")]),a._v(\" \"),v(\"li\",[a._v(\"跨语言支持较复杂\")])]),a._v(\" \"),v(\"h3\",{attrs:{id:\"fst\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fst\"}},[a._v(\"#\")]),a._v(\" fst\")]),a._v(\" \"),v(\"p\",[a._v(\"高性能序列化框架FST:-10倍，大小是JDK大小的1/3左右。\")]),a._v(\" \"),v(\"h3\",{attrs:{id:\"序列化成json\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#序列化成json\"}},[a._v(\"#\")]),a._v(\" 序列化成json\")]),a._v(\" \"),v(\"p\",[a._v(\"各个JSON技术的比较详解：http://developer.51cto.com/art/201506/480273.htm\")]),a._v(\" \"),v(\"h3\",{attrs:{id:\"开源的jackson\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#开源的jackson\"}},[a._v(\"#\")]),a._v(\" 开源的Jackson\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"相比json-lib框架，Jackson所依赖的jar包较少，简单易用并且性能也要相对高些。\")]),a._v(\" \"),v(\"li\",[a._v(\"而且Jackson社区相对比较活跃，更新速度也比较快。\")]),a._v(\" \"),v(\"li\",[a._v(\"Jackson对于复杂类型的json转换bean会出现问题，一些集合Map，List的转换出现问题。\")]),a._v(\" \"),v(\"li\",[a._v(\"Jackson对于复杂类型的bean转换Json，转换的json格式不是标准的Json格式\")])]),a._v(\" \"),v(\"h3\",{attrs:{id:\"google的gson\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#google的gson\"}},[a._v(\"#\")]),a._v(\" Google的Gson\")]),a._v(\" \"),v(\"p\",[a._v(\"Gson是目前功能最全的Json解析神器，Gson当初是为因应Google公司内部需求而由Google自行研发而来，但自从在2008年五月公开发布第一版后已被许多公司或用户应用。\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"Gson的应用主要为toJson与fromJson两个转换函数，无依赖，不需要例外额外的jar，能够直接跑在JDK上。\")]),a._v(\" \"),v(\"li\",[a._v(\"而在使用这种对象转换之前需先创建好对象的类型以及其成员才能成功的将JSON字符串成功转换成相对应的对象。\")]),a._v(\" \"),v(\"li\",[a._v(\"类里面只要有get和set方法，Gson完全可以将复杂类型的json到bean或bean到json的转换，是JSON解析的神器。\")]),a._v(\" \"),v(\"li\",[a._v(\"Gson在功能上面无可挑剔，但是性能上面比FastJson有所差距。\")])]),a._v(\" \"),v(\"h3\",{attrs:{id:\"阿里巴巴的fastjson\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#阿里巴巴的fastjson\"}},[a._v(\"#\")]),a._v(\" 阿里巴巴的FastJson\")]),a._v(\" \"),v(\"p\",[a._v(\"Fastjson是一个Java语言编写的高性能的JSON处理器,由阿里巴巴公司开发。\")]),a._v(\" \"),v(\"ul\",[v(\"li\",[a._v(\"无依赖，不需要例外额外的jar，能够直接跑在JDK上。\")]),a._v(\" \"),v(\"li\",[a._v(\"FastJson在复杂类型的Bean转换Json上会出现一些问题，可能会出现引用的类型，导致Json转换出错，需要制定引用。\")]),a._v(\" \"),v(\"li\",[a._v(\"FastJson采用独创的算法，将parse的速度提升到极致，超过所有json库。\")])])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}