{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{542:function(a,t,r){\"use strict\";r.r(t);var e=r(13),c=Object(e.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[r(\"p\",[a._v(\"https://www.programcreek.com/2009/02/diagram-for-hierarchy-of-exception-classes/\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"异常分类\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异常分类\"}},[a._v(\"#\")]),a._v(\" 异常分类\")]),a._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:\"https://txxs.github.io/pic/tofuturejavacollection/1-1.png\",alt:\"1\"}})]),a._v(\" \"),r(\"p\",[a._v(\"java对异常进行了分类，不同类型的异常使用了不同的java类，所有异常的根类为java.lang.Throwable.Throwable派生了2个子类：Error和Exception.\")]),a._v(\" \"),r(\"p\",[a._v(\"Error表示程序本身无法克服和恢复的一种严重错误，程序只有死的份，如内存溢出和死锁问题等系统问题。\")]),a._v(\" \"),r(\"p\",[a._v(\"Exception表示还能克服和恢复，其中又分为系统异常和普通异常。系统异常是软件本身缺陷导致的问题，也就是软件开发问题考虑不周所导致的问题，软件使用者无法克服和恢复这种问题，但这种情况下可以选择让软件继续运行或死掉。如数组越界问题（ArrayIndexOutOfBoundsException）,空指针异常（NullPointerException),类转换异常（ClassCastException);普通异常是运行环境的变化或异常导致的问题，是用户能够克服的问题，如网路掉线、硬盘空间不足、IO异常发生这种异常后程序不应该死掉。\")]),a._v(\" \"),r(\"p\",[a._v(\"java为系统异常和普通异常提供了不同的解决方案，编译器强制普通异常必须try..catch处理或throws声明继续抛给上层调用方法处理。所以普通异常为checked异常，而系统异常可以处理也可以不处理。编译器不强制用try..catch或throws声明，所以系统异常成为uncheckde异常。\")]),a._v(\" \"),r(\"h3\",{attrs:{id:\"异常原理\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异常原理\"}},[a._v(\"#\")]),a._v(\" 异常原理\")]),a._v(\" \"),r(\"p\",[a._v(\"Java语言按照面向对象的思想来处理异常，使得程序具有更好的可维护性。Java异常处理机制具有一下优点：\")]),a._v(\" \"),r(\"p\",[a._v(\"当一个方法正常执行完毕，Java虚拟机会从调用栈中弹出该方法的栈结构，然后继续处理前一个方法。如果在执行方法的过程中抛出异常，则Java虚拟机必须找到能捕获该异常的catch代码块。它首先查看当前方法是否存在这样的catch代码块，如果存在，那么就执行该catch代码块；否则，Java虚拟机会从调用栈中弹出该方法的栈结构，继续到前一个方法中查找合适的catch代码块。在回溯过程中，如果Java虚拟机在某个方法中找到了处理该异常的代码块，则该方法的栈结构将成为栈顶元素，程序流程将转到该方法的异常处理代码部分继续执行。当Java虚拟机追溯到调用栈的底部的方法时，如果仍然没有找到处理该异常的代码块，按以下步骤处理。\")]),a._v(\" \"),r(\"p\",[a._v(\"（1）调用异常对象的printStackTrace()方法，打印来自方法调用栈的异常信息。\")]),a._v(\" \"),r(\"p\",[a._v(\"（2）如果该线程不是主线程，那么终止这个线程，其他线程继续正常运行。如果该线程是主线程（即方法调用栈的底部为main()方法），那么整个应用程序被终止。\")]),a._v(\" \"),r(\"p\",[a._v(\"public Throwable() {\\nfillInStackTrace(); //在Throwable对象中填充执行的堆栈信息。此方法在Throwable对象中记录当前线程的栈帧的状态信息\\n}\")]),a._v(\" \"),r(\"p\",[a._v(\"err是运行期异常和错误反馈的输出流方向。此方法将此对象的堆栈跟踪输出至错误输出流。\\n输出的第一行包含此对象的 toString() 方法的结果。剩余行表示以前由方法 fillInStackTrace() 记录的数据。\")])])}),[],!1,null,null,null);t.default=c.exports}}]);","extractedComments":[]}