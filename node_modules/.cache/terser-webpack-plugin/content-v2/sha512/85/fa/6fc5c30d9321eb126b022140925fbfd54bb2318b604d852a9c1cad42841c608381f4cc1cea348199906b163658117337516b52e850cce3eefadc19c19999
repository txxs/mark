{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{524:function(t,n,e){\"use strict\";e.r(n);var a=e(13),i=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"p\",[t._v(\"Comparable and Comparator are two interfaces provided by Java Core API.\")]),t._v(\" \"),e(\"ol\",[e(\"li\",[t._v(\"Comparable\")])]),t._v(\" \"),e(\"p\",[t._v(\"Comparable is implemented by a class in order to be able to comparing object of itself with some other objects. The class itself must implement the interface in order to be able to compare its instance(s). The method required for implementation is compareTo().\")]),t._v(\" \"),e(\"p\",[t._v(\"class HDTV implements Comparable\"),e(\"HDTV\",[t._v(\" {\\nprivate int size;\\nprivate String brand;\")])],1),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[t._v(\"public HDTV(int size, String brand) {\\n\\tthis.size = size;\\n\\tthis.brand = brand;\\n}\\n\\npublic int getSize() {\\n\\treturn size;\\n}\\n\\npublic void setSize(int size) {\\n\\tthis.size = size;\\n}\\n\\npublic String getBrand() {\\n\\treturn brand;\\n}\\n\\npublic void setBrand(String brand) {\\n\\tthis.brand = brand;\\n}\\n\\n@Override\\npublic int compareTo(HDTV tv) {\\n\\n\\tif (this.getSize() > tv.getSize())\\n\\t\\treturn 1;\\n\\telse if (this.getSize() < tv.getSize())\\n\\t\\treturn -1;\\n\\telse\\n\\t\\treturn 0;\\n}\\n\")])])]),e(\"p\",[t._v(\"}\")]),t._v(\" \"),e(\"p\",[t._v('public class Main {\\npublic static void main(String[] args) {\\nHDTV tv1 = new HDTV(55, \"Samsung\");\\nHDTV tv2 = new HDTV(60, \"Sony\");')]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[t._v('\\tif (tv1.compareTo(tv2) > 0) {\\n\\t\\tSystem.out.println(tv1.getBrand() + \" is better.\");\\n\\t} else {\\n\\t\\tSystem.out.println(tv2.getBrand() + \" is better.\");\\n\\t}\\n}\\n')])])]),e(\"p\",[t._v(\"}\")]),t._v(\" \"),e(\"ol\",{attrs:{start:\"2\"}},[e(\"li\",[t._v(\"Comparator\\nIn some situations, you may not want to change a class and make it comparable. In such cases, Comparator can be used if you want to compare objects based on certain attributes/fields. For example, 2 persons can be compared based on \"),e(\"code\",[t._v(\"height\")]),t._v(\" or \"),e(\"code\",[t._v(\"age\")]),t._v(\" etc\")])]),t._v(\" \"),e(\"p\",[t._v(\"import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Comparator;\")]),t._v(\" \"),e(\"p\",[t._v(\"class HDTV {\\nprivate int size;\\nprivate String brand;\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[t._v(\"public HDTV(int size, String brand) {\\n\\tthis.size = size;\\n\\tthis.brand = brand;\\n}\\n\\npublic int getSize() {\\n\\treturn size;\\n}\\n\\npublic void setSize(int size) {\\n\\tthis.size = size;\\n}\\n\\npublic String getBrand() {\\n\\treturn brand;\\n}\\n\\npublic void setBrand(String brand) {\\n\\tthis.brand = brand;\\n}\\n\")])])]),e(\"p\",[t._v(\"}\")]),t._v(\" \"),e(\"p\",[t._v(\"class SizeComparator implements Comparator\"),e(\"HDTV\",[t._v(\" {\\n@Override\\npublic int compare(HDTV tv1, HDTV tv2) {\\nint tv1Size = tv1.getSize();\\nint tv2Size = tv2.getSize();\")])],1),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[t._v(\"\\tif (tv1Size > tv2Size) {\\n\\t\\treturn 1;\\n\\t} else if (tv1Size < tv2Size) {\\n\\t\\treturn -1;\\n\\t} else {\\n\\t\\treturn 0;\\n\\t}\\n}\\n\")])])]),e(\"p\",[t._v(\"}\")]),t._v(\" \"),e(\"p\",[t._v('public class Main {\\npublic static void main(String[] args) {\\nHDTV tv1 = new HDTV(55, \"Samsung\");\\nHDTV tv2 = new HDTV(60, \"Sony\");\\nHDTV tv3 = new HDTV(42, \"Panasonic\");')]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",[e(\"code\",[t._v(\"\\tArrayList<HDTV> al = new ArrayList<HDTV>();\\n\\tal.add(tv1);\\n\\tal.add(tv2);\\n\\tal.add(tv3);\\n\\n\\tCollections.sort(al, new SizeComparator());\\n\\tfor (HDTV a : al) {\\n\\t\\tSystem.out.println(a.getBrand());\\n\\t}\\n}\\n\")])])]),e(\"p\",[t._v(\"}\")]),t._v(\" \"),e(\"ol\",{attrs:{start:\"3\"}},[e(\"li\",[t._v(\"When to use Which?\\nA class that implements Comparator will be used in mainly two situations:\")])]),t._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[t._v(\"It can be passed to a sort method, such as Collections.sort() or Arrays.sort(), to allow precise control over the sort order and\")])]),t._v(\" \"),e(\"li\",[e(\"p\",[t._v(\"It can also be used to control the order of certain data structures, such as sorted sets (e.g. TreeSet) or sorted maps (e.g., TreeMap).\")])])]),t._v(\" \"),e(\"p\",[t._v(\"Comparable和Comparator都是用来实现集合中元素的比较、排序的。\")]),t._v(\" \"),e(\"p\",[t._v(\"Comparable是在集合内部定义的方法实现的排序，位于java.util下。\")]),t._v(\" \"),e(\"p\",[t._v(\"Comparator是在集合外部实现的排序，位于java.lang下。\")])])}),[],!1,null,null,null);n.default=i.exports}}]);","extractedComments":[]}