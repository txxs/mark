{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{624:function(a,t,s){\"use strict\";s.r(t);var n=s(13),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[s(\"h2\",{attrs:{id:\"_1-简述线程-程序、进程的基本概念。以及他们之间关系是什么\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-简述线程-程序、进程的基本概念。以及他们之间关系是什么\"}},[a._v(\"#\")]),a._v(\" 1. 简述线程，程序、进程的基本概念。以及他们之间关系是什么？\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"线程\")]),a._v(\"与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"程序\")]),a._v(\"是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"进程\")]),a._v(\"是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如CPU时间，内存空间，文件，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"线程\")]),a._v(\" 是 \"),s(\"strong\",[a._v(\"进程\")]),a._v(\" 划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"线程上下文的切换比进程上下文切换要快很多\")])]),a._v(\" \"),s(\"ul\",[s(\"li\",[a._v(\"进程切换时，涉及到当前进程的CPU环境的保存和新被调度运行进程的CPU环境的设置。\")]),a._v(\" \"),s(\"li\",[a._v(\"线程切换仅需要保存和设置少量的寄存器内容，不涉及存储管理方面的操作。\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_2-线程有哪些基本状态-这些状态是如何定义的\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-线程有哪些基本状态-这些状态是如何定义的\"}},[a._v(\"#\")]),a._v(\" 2. 线程有哪些基本状态？这些状态是如何定义的?\")]),a._v(\" \"),s(\"p\",[a._v(\"Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态（图源《Java 并发编程艺术》4.1.4 节）。\")]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/19-1-29/Java%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81.png\",alt:\"Java 线程的状态 \"}})]),a._v(\" \"),s(\"p\",[a._v(\"线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。Java 线程状态变迁如下图所示（图源《Java 并发编程艺术》4.1.4 节）：\")]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/19-1-29/Java%20%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%8F%98%E8%BF%81.png\",alt:\"Java 线程状态变迁 \"}})]),a._v(\" \"),s(\"p\",[a._v(\"由上图可以看出：线程创建之后它将处于 \"),s(\"strong\",[a._v(\"NEW（新建）\")]),a._v(\" 状态，调用 \"),s(\"code\",[a._v(\"start()\")]),a._v(\" 方法后开始运行，线程这时候处于 \"),s(\"strong\",[a._v(\"READY（可运行）\")]),a._v(\" 状态。可运行状态的线程获得了 CPU 时间片（timeslice）后就处于 \"),s(\"strong\",[a._v(\"RUNNING（运行）\")]),a._v(\" 状态。\")]),a._v(\" \"),s(\"blockquote\",[s(\"p\",[a._v(\"操作系统隐藏 Java 虚拟机（JVM）中的 RUNNABLE 和 RUNNING 状态，它只能看到 RUNNABLE 状态（图源：\"),s(\"a\",{attrs:{href:\"https://howtodoinjava.com/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"HowToDoInJava\"),s(\"OutboundLink\")],1),a._v(\"：\"),s(\"a\",{attrs:{href:\"https://howtodoinjava.com/java/multi-threading/java-thread-life-cycle-and-thread-states/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"Java Thread Life Cycle and Thread States\"),s(\"OutboundLink\")],1),a._v(\"），所以 Java 系统一般将这两个状态统称为 \"),s(\"strong\",[a._v(\"RUNNABLE（运行中）\")]),a._v(\" 状态 。\")])]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-3/RUNNABLE-VS-RUNNING.png\",alt:\"RUNNABLE-VS-RUNNING\"}})]),a._v(\" \"),s(\"p\",[a._v(\"当线程执行 \"),s(\"code\",[a._v(\"wait()\")]),a._v(\"方法之后，线程进入 **WAITING（等待）**状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而 \"),s(\"strong\",[a._v(\"TIME_WAITING(超时等待)\")]),a._v(\" 状态相当于在等待状态的基础上增加了超时限制，比如通过 \"),s(\"code\",[a._v(\"sleep（long millis）\")]),a._v(\"方法或 \"),s(\"code\",[a._v(\"wait（long millis）\")]),a._v(\"方法可以将 Java 线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到 \"),s(\"strong\",[a._v(\"BLOCKED（阻塞）\")]),a._v(\" 状态。线程在执行 Runnable 的\"),s(\"code\",[a._v(\"run()\")]),a._v(\"方法之后将会进入到 \"),s(\"strong\",[a._v(\"TERMINATED（终止）\")]),a._v(\" 状态。\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_3-何为多线程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-何为多线程\"}},[a._v(\"#\")]),a._v(\" 3. 何为多线程？\")]),a._v(\" \"),s(\"p\",[a._v(\"多线程就是多个线程同时运行或交替运行。单核CPU的话是顺序执行，也就是交替运行。多核CPU的话，因为每个CPU有自己的运算器，所以在多个CPU中可以同时运行。\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_4-为什么要使用多线程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-为什么要使用多线程\"}},[a._v(\"#\")]),a._v(\" 4. 为什么要使用多线程?\")]),a._v(\" \"),s(\"p\",[a._v(\"先从总体上来说：\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[a._v(\"**从计算机底层来说：**线程可以比作是轻量级的进程，是程序执行的最小单位,线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。\")]),a._v(\" \"),s(\"li\",[a._v(\"**从当代互联网发展趋势来说：**现在的系统动不动就要求百万级甚至千万级的并发量，而多线程并发编程正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力以及性能。\")])]),a._v(\" \"),s(\"p\",[a._v(\"再深入到计算机底层来探讨：\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[a._v(\"单核时代：\")]),a._v(\" 在单核时代多线程主要是为了提高 CPU 和 IO 设备的综合利用率。举个例子：当只有一个线程的时候会导致 CPU 计算时，IO 设备空闲；进行 IO 操作时，CPU 空闲。我们可以简单地说这两者的利用率目前都是 50%左右。但是当有两个线程的时候就不一样了，当一个线程执行 CPU 计算时，另外一个线程可以进行 IO 操作，这样两个的利用率就可以在理想情况下达到 100%了。\")]),a._v(\" \"),s(\"li\",[s(\"strong\",[a._v(\"多核时代:\")]),a._v(\" 多核时代多线程主要是为了提高 CPU 利用率。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，CPU 只会一个 CPU 核心被利用到，而创建多个线程就可以让多个 CPU 核心被利用到，这样就提高了 CPU 的利用率。\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_5-使用多线程常见的三种方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-使用多线程常见的三种方式\"}},[a._v(\"#\")]),a._v(\" 5 使用多线程常见的三种方式\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_1继承thread类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1继承thread类\"}},[a._v(\"#\")]),a._v(\" ①继承Thread类\")]),a._v(\" \"),s(\"p\",[a._v(\"MyThread.java\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"MyThread\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"extends\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Thread\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[a._v(\"@Override\")]),a._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"run\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"super\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"run\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"MyThread\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\")])]),s(\"p\",[a._v(\"Run.java\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Run\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"static\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"main\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"]\")]),a._v(\" args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"MyThread\")]),a._v(\" mythread \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"MyThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\t\\tmythread\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"运行结束\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"10\")]),s(\"br\")])]),s(\"p\",[a._v(\"运行结果：\\n\"),s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/3/20/16243e80f22a2d54?w=161&h=54&f=jpeg&s=7380\",alt:\"结果\"}}),a._v(\"\\n从上面的运行结果可以看出：线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run方法。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_2实现runnable接口\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2实现runnable接口\"}},[a._v(\"#\")]),a._v(\" ②实现Runnable接口\")]),a._v(\" \"),s(\"p\",[a._v(\"推荐实现Runnable接口方式开发多线程，因为Java单继承但是可以实现多个接口。\")]),a._v(\" \"),s(\"p\",[a._v(\"MyRunnable.java\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"MyRunnable\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"implements\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Runnable\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[a._v(\"@Override\")]),a._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"run\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"MyRunnable\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\")])]),s(\"p\",[a._v(\"Run.java\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Run\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"static\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"main\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"]\")]),a._v(\" args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Runnable\")]),a._v(\" runnable\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"MyRunnable\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Thread\")]),a._v(\" thread\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"runnable\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\t\\tthread\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"start\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"运行结束！\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"10\")]),s(\"br\")])]),s(\"p\",[a._v(\"运行结果：\\n\"),s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/3/20/16243f4373c6141a?w=137&h=46&f=jpeg&s=7316\",alt:\"运行结果\"}})]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_3使用线程池\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3使用线程池\"}},[a._v(\"#\")]),a._v(\" ③使用线程池\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"在《阿里巴巴Java开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显示创建线程。\")])]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"为什么呢？\")])]),a._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"strong\",[a._v(\"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\")])])]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"另外《阿里巴巴Java开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险\")])]),a._v(\" \"),s(\"blockquote\",[s(\"p\",[a._v(\"Executors 返回线程池对象的弊端如下：\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[a._v(\"FixedThreadPool 和 SingleThreadExecutor\")]),a._v(\" ： 允许请求的队列长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致OOM。\")]),a._v(\" \"),s(\"li\",[s(\"strong\",[a._v(\"CachedThreadPool 和 ScheduledThreadPool\")]),a._v(\" ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致OOM。\")])])]),a._v(\" \"),s(\"p\",[a._v(\"对于线程池感兴趣的可以查看我的这篇文章：\"),s(\"a\",{attrs:{href:\"http://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484042&idx=1&sn=541dbf2cb969a151d79f4a4f837ee1bd&chksm=fd9854ebcaefddfd1876bb96ab218be3ae7b12546695a403075d4ed22e5e17ff30ebdabc8bbf#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"《Java多线程学习（八）线程池与Executor 框架》\"),s(\"OutboundLink\")],1),a._v(\" 点击阅读原文即可查看到该文章的最新版。\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_6-线程的优先级\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-线程的优先级\"}},[a._v(\"#\")]),a._v(\" 6 线程的优先级\")]),a._v(\" \"),s(\"p\",[a._v(\"每个线程都具有各自的优先级，\"),s(\"strong\",[a._v(\"线程的优先级可以在程序中表明该线程的重要性，如果有很多线程处于就绪状态，系统会根据优先级来决定首先使哪个线程进入运行状态\")]),a._v(\"。但这个并不意味着低\\n优先级的线程得不到运行，而只是它运行的几率比较小，如垃圾回收机制线程的优先级就比较低。所以很多垃圾得不到及时的回收处理。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"线程优先级具有继承特性。\")]),a._v(\" 比如A线程启动B线程，则B线程的优先级和A是一样的。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"线程优先级具有随机性。\")]),a._v(\" 也就是说线程优先级高的不一定每一次都先执行完。\")]),a._v(\" \"),s(\"p\",[a._v(\"Thread类中包含的成员变量代表了线程的某些优先级。如\"),s(\"strong\",[a._v(\"Thread.MIN_PRIORITY（常数1）\")]),a._v(\"，\"),s(\"strong\",[a._v(\"Thread.NORM_PRIORITY（常数5）\")]),a._v(\",\\n\"),s(\"strong\",[a._v(\"Thread.MAX_PRIORITY（常数10）\")]),a._v(\"。其中每个线程的优先级都在\"),s(\"strong\",[a._v(\"Thread.MIN_PRIORITY（常数1）\")]),a._v(\" 到\"),s(\"strong\",[a._v(\"Thread.MAX_PRIORITY（常数10）\")]),a._v(\" 之间，在默认情况下优先级都是\"),s(\"strong\",[a._v(\"Thread.NORM_PRIORITY（常数5）\")]),a._v(\"。\")]),a._v(\" \"),s(\"p\",[a._v(\"学过操作系统这门课程的话，我们可以发现多线程优先级或多或少借鉴了操作系统对进程的管理。\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_7-java多线程分类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-java多线程分类\"}},[a._v(\"#\")]),a._v(\" 7 Java多线程分类\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"用户线程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用户线程\"}},[a._v(\"#\")]),a._v(\" 用户线程\")]),a._v(\" \"),s(\"p\",[a._v(\"运行在前台，执行具体的任务，如程序的主线程、连接网络的子线程等都是用户线程\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"守护线程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#守护线程\"}},[a._v(\"#\")]),a._v(\" 守护线程\")]),a._v(\" \"),s(\"p\",[a._v(\"运行在后台，为其他前台线程服务.也可以说守护线程是JVM中非守护线程的 \"),s(\"strong\",[a._v(\"“佣人”\")]),a._v(\"。\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[a._v(\"特点：\")]),a._v(\" 一旦所有用户线程都结束运行，守护线程会随JVM一起结束工作\")]),a._v(\" \"),s(\"li\",[s(\"strong\",[a._v(\"应用：\")]),a._v(\" 数据库连接池中的检测线程，JVM虚拟机启动后的检测线程\")]),a._v(\" \"),s(\"li\",[s(\"strong\",[a._v(\"最常见的守护线程：\")]),a._v(\" 垃圾回收线程\")])]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"如何设置守护线程？\")])]),a._v(\" \"),s(\"p\",[a._v(\"可以通过调用 Thead 类的 \"),s(\"code\",[a._v(\"setDaemon(true)\")]),a._v(\" 方法设置当前的线程为守护线程。\")]),a._v(\" \"),s(\"p\",[a._v(\"注意事项：\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",[s(\"code\",[a._v(\"1.  setDaemon(true)必须在start（）方法前执行，否则会抛出IllegalThreadStateException异常\\n2. 在守护线程中产生的新线程也是守护线程\\n3. 不是所有的任务都可以分配给守护线程来执行，比如读写操作或者计算逻辑\\n\")])])]),s(\"h2\",{attrs:{id:\"_8-sleep-方法和wait-方法简单对比\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-sleep-方法和wait-方法简单对比\"}},[a._v(\"#\")]),a._v(\" 8 sleep()方法和wait()方法简单对比\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[a._v(\"两者最主要的区别在于：\"),s(\"strong\",[a._v(\"sleep方法没有释放锁，而wait方法释放了锁\")]),a._v(\" 。\")]),a._v(\" \"),s(\"li\",[a._v(\"两者都可以暂停线程的执行。\")]),a._v(\" \"),s(\"li\",[a._v(\"Wait通常被用于线程间交互/通信，sleep通常被用于暂停执行。\")]),a._v(\" \"),s(\"li\",[a._v(\"wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的notify()或者notifyAll()方法。sleep()方法执行完成后，线程会自动苏醒。\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_9-为什么我们调用start-方法时会执行run-方法-为什么我们不能直接调用run-方法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-为什么我们调用start-方法时会执行run-方法-为什么我们不能直接调用run-方法\"}},[a._v(\"#\")]),a._v(\" 9 为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？\")]),a._v(\" \"),s(\"p\",[a._v(\"这是另一个非常经典的java多线程面试问题，而且在面试中会经常被问到。很简单，但是很多人都会答不上来！\")]),a._v(\" \"),s(\"p\",[a._v(\"new一个Thread，线程进入了新建状态;调用start()方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。\\nstart()会执行线程的相应准备工作，然后自动执行run()方法的内容，这是真正的多线程工作。 而直接执行run()方法，会把run方法当成一个main线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"总结： 调用start方法方可启动线程并使线程进入就绪状态，而run方法只是thread的一个普通方法调用，还是在主线程里执行。\")])]),a._v(\" \"),s(\"p\",[a._v(\"参考原文地址：\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_1、说说线程的生命周期和状态\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、说说线程的生命周期和状态\"}},[a._v(\"#\")]),a._v(\" 1、说说线程的生命周期和状态?\")]),a._v(\" \"),s(\"p\",[a._v(\"Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态（图源《Java 并发编程艺术》4.1.4 节）。\")]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/19-1-29/Java%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81.png\",alt:\"Java 线程的状态 \"}})]),a._v(\" \"),s(\"p\",[a._v(\"线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。Java 线程状态变迁如下图所示（图源《Java 并发编程艺术》4.1.4 节）：\")]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/19-1-29/Java+%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%8F%98%E8%BF%81.png\",alt:\"Java 线程状态变迁 \"}})]),a._v(\" \"),s(\"p\",[a._v(\"由上图可以看出：线程创建之后它将处于 \"),s(\"strong\",[a._v(\"NEW（新建）\")]),a._v(\" 状态，调用 \"),s(\"code\",[a._v(\"start()\")]),a._v(\" 方法后开始运行，线程这时候处于 \"),s(\"strong\",[a._v(\"READY（可运行）\")]),a._v(\" 状态。可运行状态的线程获得了 CPU 时间片（timeslice）后就处于 \"),s(\"strong\",[a._v(\"RUNNING（运行）\")]),a._v(\" 状态。\")]),a._v(\" \"),s(\"blockquote\",[s(\"p\",[a._v(\"操作系统隐藏 Java 虚拟机（JVM）中的 RUNNABLE 和 RUNNING 状态，它只能看到 RUNNABLE 状态（图源：\"),s(\"a\",{attrs:{href:\"https://howtodoinjava.com/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"HowToDoInJava\"),s(\"OutboundLink\")],1),a._v(\"：\"),s(\"a\",{attrs:{href:\"https://howtodoinjava.com/java/multi-threading/java-thread-life-cycle-and-thread-states/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"Java Thread Life Cycle and Thread States\"),s(\"OutboundLink\")],1),a._v(\"），所以 Java 系统一般将这两个状态统称为 \"),s(\"strong\",[a._v(\"RUNNABLE（运行中）\")]),a._v(\" 状态 。\")])]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-3/RUNNABLE-VS-RUNNING.png\",alt:\"RUNNABLE-VS-RUNNING\"}})]),a._v(\" \"),s(\"p\",[a._v(\"当线程执行 \"),s(\"code\",[a._v(\"wait()\")]),a._v(\"方法之后，线程进入 \"),s(\"strong\",[a._v(\"WAITING（等待）\")]),a._v(\" 状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而 \"),s(\"strong\",[a._v(\"TIME_WAITING(超时等待)\")]),a._v(\" 状态相当于在等待状态的基础上增加了超时限制，比如通过 \"),s(\"code\",[a._v(\"sleep（long millis）\")]),a._v(\"方法或 \"),s(\"code\",[a._v(\"wait（long millis）\")]),a._v(\"方法可以将 Java 线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到 \"),s(\"strong\",[a._v(\"BLOCKED（阻塞）\")]),a._v(\" 状态。线程在执行 Runnable 的\"),s(\"code\",[a._v(\"run()\")]),a._v(\"方法之后将会进入到 \"),s(\"strong\",[a._v(\"TERMINATED（终止）\")]),a._v(\" 状态。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_2、什么是上下文切换\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、什么是上下文切换\"}},[a._v(\"#\")]),a._v(\" 2、什么是上下文切换?\")]),a._v(\" \"),s(\"p\",[a._v(\"多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。\")]),a._v(\" \"),s(\"p\",[a._v(\"概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换会这个任务时，可以再加载这个任务的状态。\"),s(\"strong\",[a._v(\"任务从保存到再加载的过程就是一次上下文切换\")]),a._v(\"。\")]),a._v(\" \"),s(\"p\",[a._v(\"上下文切换通常是计算密集型的。也就是说，它需要相当可观的处理器时间，在每秒几十上百次的切换中，每次切换都需要纳秒量级的时间。所以，上下文切换对系统来说意味着消耗大量的 CPU 时间，事实上，可能是操作系统中时间消耗最大的操作。\")]),a._v(\" \"),s(\"p\",[a._v(\"Linux 相比与其他操作系统（包括其他类 Unix 系统）有很多的优点，其中有一项就是，其上下文切换和模式切换的时间消耗非常少。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_3、死锁以及如何避免死锁\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、死锁以及如何避免死锁\"}},[a._v(\"#\")]),a._v(\" 3、死锁以及如何避免死锁\")]),a._v(\" \"),s(\"p\",[a._v(\"学过操作系统的朋友都知道产生死锁必须具备以下四个条件：\")]),a._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[a._v(\"互斥条件：该资源任意一个时刻只由一个线程占用。\")])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。\")])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"不剥夺条件:线程已获得的资源在末使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。\")])]),a._v(\" \"),s(\"li\",[s(\"p\",[a._v(\"循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。\")])])]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"破坏互斥条件\")])]),a._v(\" \"),s(\"p\",[a._v(\"这个条件我们没有办法破坏，因为我们用锁本来就是想让他们互斥的（临界资源需要互斥访问）。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"破坏请求与保持条件\")])]),a._v(\" \"),s(\"p\",[a._v(\"一次性申请所有的资源。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"破坏不剥夺条件\")])]),a._v(\" \"),s(\"p\",[a._v(\"占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"破坏循环等待条件\")])]),a._v(\" \"),s(\"p\",[a._v(\"靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_4、-为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用-run-方法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4、-为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用-run-方法\"}},[a._v(\"#\")]),a._v(\" 4、 为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？\")]),a._v(\" \"),s(\"p\",[a._v(\"这是另一个非常经典的 java 多线程面试问题，而且在面试中会经常被问到。很简单，但是很多人都会答不上来！\")]),a._v(\" \"),s(\"p\",[a._v(\"new 一个 Thread，线程进入了新建状态;调用 start() 方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。 start() 会执行线程的相应准备工作，然后自动执行 run() 方法的内容，这是真正的多线程工作。 而直接执行 run() 方法，会把 run 方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"总结： 调用 start 方法方可启动线程并使线程进入就绪状态，而 run 方法只是 thread 的一个普通方法调用，还是在主线程里执行。\")])]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_5、wait、sleep和yield、join方法的区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5、wait、sleep和yield、join方法的区别\"}},[a._v(\"#\")]),a._v(\" 5、Wait、Sleep和Yield、Join方法的区别\")]),a._v(\" \"),s(\"p\",[a._v(\"wait()和sleep()的关键的区别在于：\")]),a._v(\" \"),s(\"p\",[a._v(\"1、wait()是用于线程间通信的，而sleep()是用于短时间暂停当前线程。\")]),a._v(\" \"),s(\"p\",[a._v(\"2、当一个线程调用wait()方法的时候，会释放它锁持有的对象的管程和锁，但是调用sleep()方法的时候，不会释放他所持有的管程，。sleep()方法正在执行的线程主动让出CPU（然后CPU就可以去执行其他任务）\")]),a._v(\" \"),s(\"p\",[a._v(\"3、sleep()方法可以在任何地方使用；wait()方法则只能在同步方法或同步块中使用；\")]),a._v(\" \"),s(\"p\",[a._v(\"4、wait通常有条件地执行，线程会一直处于wait状态，直到某个条件变为真。但是sleep仅仅让你的线程进入睡眠状态。\")]),a._v(\" \"),s(\"p\",[a._v(\"5、sleep 是 Thread 类的静态本地方法，wait 则是 Object 类的本地方法。\")]),a._v(\" \"),s(\"p\",[a._v(\"6、使用 sleep 方法可以让让当前线程休眠，时间一到当前线程继续往下执行，在任何地方都能使用，但需要捕获 InterruptedException 异常。\")]),a._v(\" \"),s(\"p\",[a._v(\"yield()方法和sleep()\")]),a._v(\" \"),s(\"p\",[a._v(\"1、即yield()方法只是使当前线程重新回到可执行状态，runable，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行，\")]),a._v(\" \"),s(\"p\",[a._v(\"2、另外yield()方法只能使同优先级或者高优先级的线程得到执行机会，这也和sleep()方法不同。\")]),a._v(\" \"),s(\"p\",[a._v(\"3、yield()方法和sleep()方法类似，也不会释放“锁标志”，区别在于，它没有参数，\")]),a._v(\" \"),s(\"p\",[a._v(\"Join：\")]),a._v(\" \"),s(\"p\",[a._v(\"1、一种特殊的wait，当前运行线程调用另一个线程的join方法，当前线程进入阻塞状态直到另一个线程运行结束等待该线程终止。\")]),a._v(\" \"),s(\"p\",[a._v(\"2、注意该方法也需要捕捉异常。\")]),a._v(\" \"),s(\"p\",[a._v(\"3、等待调用join方法的线程结束，再继续执行。如：t.join();//主要用于等待t线程运行结束，若无此句，main则会执行完毕，导致结果不可预测。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_6、java多线程实现的三种方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6、java多线程实现的三种方式\"}},[a._v(\"#\")]),a._v(\" 6、JAVA多线程实现的三种方式\")]),a._v(\" \"),s(\"p\",[a._v(\"1、继承Thread\")]),a._v(\" \"),s(\"p\",[a._v(\"2、实现Runnable接口\")]),a._v(\" \"),s(\"p\",[a._v(\"3、实现Callable接口\")]),a._v(\" \"),s(\"p\",[a._v(\"区别：\")]),a._v(\" \"),s(\"p\",[a._v(\"1、第一种方式继承Thread就不能继承其他类了，后面两种可以；\")]),a._v(\" \"),s(\"p\",[a._v(\"2、使用后两种方式可以多个线程共享一个target；\")]),a._v(\" \"),s(\"p\",[a._v(\"3、Callable比Runnable多一个返回值，并且call()方法可以抛出异常；\")]),a._v(\" \"),s(\"p\",[a._v(\"4、访问线程名，第一种直接使用this.getName()，后两种使用Thread.currentThread().getName()。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_7、执行execute-方法和submit-方法的区别是什么呢\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7、执行execute-方法和submit-方法的区别是什么呢\"}},[a._v(\"#\")]),a._v(\" 7、执行execute()方法和submit()方法的区别是什么呢\")]),a._v(\" \"),s(\"p\",[a._v(\"1、execute() 方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否；\")]),a._v(\" \"),s(\"p\",[a._v(\"2、submit() 方法用于提交需要返回值的任务。线程池会返回一个Future类型的对象，通过这个Future对象可以判断任务是否执行成功，并且可以通过future的get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用 get（long timeout，TimeUnit unit）方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_8、-如何创建线程池\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8、-如何创建线程池\"}},[a._v(\"#\")]),a._v(\" 8、 如何创建线程池\")]),a._v(\" \"),s(\"p\",[a._v(\"Executors\")]),a._v(\" \"),s(\"p\",[a._v(\"1、newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。\")]),a._v(\" \"),s(\"p\",[a._v(\"2、newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。\")]),a._v(\" \"),s(\"p\",[a._v(\"3、newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\")]),a._v(\" \"),s(\"p\",[a._v(\"4、newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"前三者底层是ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue\"),s(\"Runnable\",[a._v(\" workQueue, RejectedExecutionHandler handler);后一个底层是ScheduledThreadPoolExecutor\")])],1)]),a._v(\" \"),s(\"h4\",{attrs:{id:\"几个重要的参数\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#几个重要的参数\"}},[a._v(\"#\")]),a._v(\" 几个重要的参数\")]),a._v(\" \"),s(\"p\",[a._v(\"1、corePoolSize 为线程池的基本大小。\")]),a._v(\" \"),s(\"p\",[a._v(\"2、maximumPoolSize 为线程池最大线程大小。\")]),a._v(\" \"),s(\"p\",[a._v(\"3、keepAliveTime 和 unit 则是线程空闲后的存活时间。\")]),a._v(\" \"),s(\"p\",[a._v(\"4、workQueue 用于存放任务的阻塞队列。\")]),a._v(\" \"),s(\"p\",[a._v(\"5、handler 当队列和最大线程池都满了之后的饱和策略。\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"执行顺序\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#执行顺序\"}},[a._v(\"#\")]),a._v(\" 执行顺序\")]),a._v(\" \"),s(\"p\",[a._v(\"1、当线程数小于 corePoolSize时，创建线程执行任务。\")]),a._v(\" \"),s(\"p\",[a._v(\"2、当线程数大于等于 corePoolSize并且 workQueue 没有满时，放入workQueue中\")]),a._v(\" \"),s(\"p\",[a._v(\"3、线程数大于等于 corePoolSize并且当 workQueue 满时，新任务新建线程运行，线程总数要小于 maximumPoolSize\")]),a._v(\" \"),s(\"p\",[a._v(\"4、当线程总数等于 maximumPoolSize 并且 workQueue 满了的时候执行 handler 的 rejectedExecution。也就是拒绝策略。\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"拒绝策略\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#拒绝策略\"}},[a._v(\"#\")]),a._v(\" 拒绝策略\")]),a._v(\" \"),s(\"p\",[a._v(\"1、ThreadPoolExecutor.AbortPolicy() 直接抛出异常RejectedExecutionException\")]),a._v(\" \"),s(\"p\",[a._v(\"2、ThreadPoolExecutor.CallerRunsPolicy() 直接调用run方法并且阻塞执行\")]),a._v(\" \"),s(\"p\",[a._v(\"3、ThreadPoolExecutor.DiscardPolicy() 直接丢弃后来的任务\")]),a._v(\" \"),s(\"p\",[a._v(\"4、ThreadPoolExecutor.DiscardOldestPolicy() 丢弃在队列中队首的任务\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"阻塞队列\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#阻塞队列\"}},[a._v(\"#\")]),a._v(\" 阻塞队列\")]),a._v(\" \"),s(\"p\",[a._v(\"1、ArrayBlockingQueue 数组结构组成的有界阻塞队列。\")]),a._v(\" \"),s(\"p\",[a._v(\"此队列按照先进先出（FIFO）的原则对元素进行排序，但是默认情况下不保证线程公平的访问队列，即如果队列满了，那么被阻塞在外面的线程对队列访问的顺序是不能保证线程公平（即先阻塞，先插入）的。\")]),a._v(\" \"),s(\"p\",[a._v(\"2、LinkedBlockingQueue一个由链表结构组成的有界阻塞队列\")]),a._v(\" \"),s(\"p\",[a._v(\"此队列按照先出先进的原则对元素进行排序\")]),a._v(\" \"),s(\"p\",[a._v(\"3、PriorityBlockingQueue支持优先级的无界阻塞队列\")]),a._v(\" \"),s(\"p\",[a._v(\"4、DelayQueue支持延时获取元素的无界阻塞队列，即可以指定多久才能从队列中获取当前元素\")]),a._v(\" \"),s(\"p\",[a._v(\"5、SynchronousQueue不存储元素的阻塞队列，每一个put必须等待一个take操作，否则不能继续添加元素。并且他支持公平访问队列。\")]),a._v(\" \"),s(\"p\",[a._v(\"6、LinkedTransferQueue由链表结构组成的无界阻塞TransferQueue队列。相对于其他阻塞队列，多了tryTransfer和transfer方法\")]),a._v(\" \"),s(\"p\",[a._v(\"7、LinkedBlockingDeque链表结构的双向阻塞队列，优势在于多线程入队时，减少一半的竞争。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_9、优化线程池线程数量\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9、优化线程池线程数量\"}},[a._v(\"#\")]),a._v(\" 9、优化线程池线程数量\")]),a._v(\" \"),s(\"p\",[a._v(\"1、如果是CPU密集型应用，则线程池大小设置为N+1\")]),a._v(\" \"),s(\"p\",[a._v(\"2、如果是IO密集型应用，则线程池大小设置为2N+1\")]),a._v(\" \"),s(\"p\",[a._v(\"真正被影响的是CPU的执行时间：怎么看CPU的瓶颈呢，就是你的QPS达到极限的时候，CPU的使用率是不是超过了95%，如果没有就是有提升空间的，怎么提升呢\")]),a._v(\" \"),s(\"p\",[a._v(\"1、减少编码\")]),a._v(\" \"),s(\"p\",[a._v(\"2、减少序列化\")]),a._v(\" \"),s(\"p\",[a._v(\"3、并发读优化\")]),a._v(\" \"),s(\"p\",[a._v(\"实践出来的公式应该把CPU时间考虑进去：\")]),a._v(\" \"),s(\"p\",[a._v(\"【（线程等待时间+CPU时间）/CPU时间】* CPU数量\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_10、线程同步以及线程调度相关的方法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10、线程同步以及线程调度相关的方法\"}},[a._v(\"#\")]),a._v(\" 10、线程同步以及线程调度相关的方法\")]),a._v(\" \"),s(\"p\",[a._v(\"1、wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；\")]),a._v(\" \"),s(\"p\",[a._v(\"2、sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理InterruptedException异常；\")]),a._v(\" \"),s(\"p\",[a._v(\"3、notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关；\")]),a._v(\" \"),s(\"p\",[a._v(\"4、notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_11、synchronized-关键字理解\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_11、synchronized-关键字理解\"}},[a._v(\"#\")]),a._v(\" 11、synchronized 关键字理解\")]),a._v(\" \"),s(\"p\",[a._v(\"synchronized关键字解决的是多个线程之间访问资源的同步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。\")]),a._v(\" \"),s(\"p\",[a._v(\"另外，在 Java 早期版本中，synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的 Mutex Lock 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的 synchronized 效率低的原因。庆幸的是在 Java 6 之后 Java 官方对从 JVM 层面对synchronized 较大优化，所以现在的 synchronized 锁效率也优化得很不错了。JDK1.6对锁的实现引入了大量的优化，如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_12、synchronized关键字最主要的三种使用方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12、synchronized关键字最主要的三种使用方式\"}},[a._v(\"#\")]),a._v(\" 12、synchronized关键字最主要的三种使用方式\")]),a._v(\" \"),s(\"p\",[a._v(\"1、 \"),s(\"strong\",[a._v(\"修饰实例方法:\")]),a._v(\" 作用于当前对象实例加锁，进入同步代码前要获得当前对象实例的锁\")]),a._v(\" \"),s(\"p\",[a._v(\"2、 \"),s(\"strong\",[a._v(\"修饰静态方法:\")]),a._v(\" :也就是给当前类加锁，会作用于类的所有对象实例，因为静态成员不属于任何一个实例对象，是类成员（ static 表明这是该类的一个静态资源，不管new了多少个对象，只有一份）。所以如果一个线程A调用一个实例对象的非静态 synchronized 方法，而线程B需要调用这个实例对象所属类的静态 synchronized 方法，是允许的，不会发生互斥现象，\"),s(\"strong\",[a._v(\"因为访问静态 synchronized 方法占用的锁是当前类的锁，而访问非静态 synchronized 方法占用的锁是当前实例对象锁\")]),a._v(\"。\")]),a._v(\" \"),s(\"p\",[a._v(\"3、 \"),s(\"strong\",[a._v(\"修饰代码块:\")]),a._v(\" 指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_13、讲一下-synchronized-关键字的底层原理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13、讲一下-synchronized-关键字的底层原理\"}},[a._v(\"#\")]),a._v(\" 13、讲一下 synchronized 关键字的底层原理\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"synchronized 关键字底层原理属于 JVM 层面。\")])]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"① synchronized 同步语句块的情况\")])]),a._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"SynchronizedDemo\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"method\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"synchronized\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\t\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"synchronized 代码块\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),s(\"br\")])]),s(\"p\",[a._v(\"通过 JDK 自带的 javap 命令查看 SynchronizedDemo 类的相关字节码信息：首先切换到类的对应目录执行 \"),s(\"code\",[a._v(\"javac SynchronizedDemo.java\")]),a._v(\" 命令生成编译后的 .class 文件，然后执行\"),s(\"code\",[a._v(\"javap -c -s -v -l SynchronizedDemo.class\")]),a._v(\"。\")]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%8E%9F%E7%90%86.png\",alt:\"synchronized关键字原理\"}})]),a._v(\" \"),s(\"p\",[a._v(\"从上面我们可以看出：\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\")]),a._v(\" 当执行 monitorenter 指令时，线程试图获取锁也就是获取 monitor(monitor对象存在于每个Java对象的对象头中，synchronized 锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因) 的持有权。当计数器为0则可以成功获取，获取后将锁计数器设为1也就是加1。相应的在执行 monitorexit 指令后，将锁计数器设为0，表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"② synchronized 修饰方法的的情况\")])]),a._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"SynchronizedDemo2\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"synchronized\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"method\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n\\t\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"synchronized 方法\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\")])]),s(\"p\",[s(\"img\",{attrs:{src:\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%8E%9F%E7%90%862.png\",alt:\"synchronized关键字原理\"}})]),a._v(\" \"),s(\"p\",[a._v(\"synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法，JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_14、说说-jdk1-6-之后的synchronized-关键字底层做了哪些优化-可以详细介绍一下这些优化吗\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_14、说说-jdk1-6-之后的synchronized-关键字底层做了哪些优化-可以详细介绍一下这些优化吗\"}},[a._v(\"#\")]),a._v(\" 14、说说 JDK1.6 之后的synchronized 关键字底层做了哪些优化，可以详细介绍一下这些优化吗\")]),a._v(\" \"),s(\"p\",[a._v(\"JDK1.6 对锁的实现引入了大量的优化，如偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术来减少锁操作的开销。\")]),a._v(\" \"),s(\"p\",[a._v(\"锁主要存在四种状态，依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。注意锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率。\")]),a._v(\" \"),s(\"p\",[a._v(\"①偏向锁\")]),a._v(\" \"),s(\"p\",[a._v(\"引入偏向锁的目的和引入轻量级锁的目的很像，他们都是为了没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。\"),s(\"strong\",[a._v(\"但是不同是：轻量级锁在无竞争的情况下使用 CAS 操作去代替使用互斥量。而偏向锁在无竞争的情况下会把整个同步都消除掉。\")])]),a._v(\" \"),s(\"p\",[a._v(\"偏向锁的“偏”就是偏心的偏，它的意思是会偏向于第一个获得它的线程，如果在接下来的执行中，该锁没有被其他线程获取，那么持有偏向锁的线程就不需要进行同步！关于偏向锁的原理可以查看《深入理解Java虚拟机：JVM高级特性与最佳实践》第二版的13章第三节锁优化。\")]),a._v(\" \"),s(\"p\",[a._v(\"但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失，需要注意的是，偏向锁失败后，并不会立即膨胀为重量级锁，而是先升级为轻量级锁。\")]),a._v(\" \"),s(\"p\",[a._v(\"② 轻量级锁\")]),a._v(\" \"),s(\"p\",[a._v(\"倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)。轻量级锁不是为了代替重量级锁，它的本意是在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗，因为使用轻量级锁时，不需要申请互斥量。另外，轻量级锁的加锁和解锁都用到了CAS操作。 关于轻量级锁的加锁和解锁的原理可以查看《深入理解Java虚拟机：JVM高级特性与最佳实践》第二版的13章第三节锁优化。\")]),a._v(\" \"),s(\"p\",[a._v(\"轻量级锁能够提升程序同步性能的依据是“对于绝大部分锁，在整个同步周期内都是不存在竞争的”，这是一个经验数据。如果没有竞争，轻量级锁使用 CAS 操作避免了使用互斥操作的开销。但如果存在锁竞争，除了互斥量开销外，还会额外发生CAS操作，因此在有锁竞争的情况下，轻量级锁比传统的重量级锁更慢！如果锁竞争激烈，那么轻量级将很快膨胀为重量级锁！\")]),a._v(\" \"),s(\"p\",[a._v(\"③ 自旋锁和自适应自旋\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。\")])]),a._v(\" \"),s(\"p\",[a._v(\"互斥同步对性能最大的影响就是阻塞的实现，因为挂起线程/恢复线程的操作都需要转入内核态中完成（用户态转换到内核态会耗费时间）。\")]),a._v(\" \"),s(\"p\",[a._v(\"一般线程持有锁的时间都不是太长，所以仅仅为了这一点时间去挂起线程/恢复线程是得不偿失的。 所以，虚拟机的开发团队就这样去考虑：“我们能不能让后面来的请求获取锁的线程等待一会而不被挂起呢？看看持有锁的线程是否很快就会释放锁”。为了让一个线程等待，我们只需要让线程执行一个忙循环（自旋），这项技术就叫做自旋。\")]),a._v(\" \"),s(\"p\",[a._v(\"百度百科对自旋锁的解释：\")]),a._v(\" \"),s(\"p\",[a._v('何谓自旋锁？它是为实现保护共享资源而提出一种锁机制。其实，自旋锁与互斥锁比较类似，它们都是为了解决对某项资源的互斥使用。无论是互斥锁，还是自旋锁，在任何时刻，最多只能有一个保持者，也就说，在任何时刻最多只能有一个执行单元获得锁。但是两者在调度机制上略有不同。对于互斥锁，如果资源已经被占用，资源申请者只能进入睡眠状态。但是自旋锁不会引起调用者睡眠，如果自旋锁已经被别的执行单元保持，调用者就一直循环在那里看是否该自旋锁的保持者已经释放了锁，\"自旋\"一词就是因此而得名。')]),a._v(\" \"),s(\"p\",[a._v(\"自旋锁在 JDK1.6 之前其实就已经引入了，不过是默认关闭的，需要通过--XX:+UseSpinning参数来开启。JDK1.6及1.6之后，就改为默认开启的了。需要注意的是：自旋等待不能完全替代阻塞，因为它还是要占用处理器时间。如果锁被占用的时间短，那么效果当然就很好了！反之，相反！自旋等待的时间必须要有限度。如果自旋超过了限定次数任然没有获得锁，就应该挂起线程。自旋次数的默认值是10次，用户可以修改--XX:PreBlockSpin来更改。\")]),a._v(\" \"),s(\"p\",[a._v(\"另外,在 JDK1.6 中引入了自适应的自旋锁。自适应的自旋锁带来的改进就是：自旋的时间不在固定了，而是和前一次同一个锁上的自旋时间以及锁的拥有者的状态来决定，虚拟机变得越来越“聪明”了。\")]),a._v(\" \"),s(\"p\",[a._v(\"④ 锁消除\")]),a._v(\" \"),s(\"p\",[a._v(\"锁消除理解起来很简单，它指的就是虚拟机即使编译器在运行时，\"),s(\"strong\",[a._v(\"如果检测到那些共享数据不可能存在竞争，那么就执行锁消除\")]),a._v(\"。锁消除可以节省毫无意义的请求锁的时间。\")]),a._v(\" \"),s(\"p\",[a._v(\"⑤ 锁粗化\")]),a._v(\" \"),s(\"p\",[a._v(\"原则上，我们在编写代码的时候，总是推荐将同步块的作用范围限制得尽量小，——直在共享数据的实际作用域才进行同步，这样是为了使得需要同步的操作数量尽可能变小，如果存在锁竞争，那等待线程也能尽快拿到锁。\")]),a._v(\" \"),s(\"p\",[a._v(\"大部分情况下，上面的原则都是没有问题的，\"),s(\"strong\",[a._v(\"但是如果一系列的连续操作都对同一个对象反复加锁和解锁，那么会带来很多不必要的性能消耗。\")])]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_15、谈谈-synchronized和reentrantlock-的区别-结合原理去说明\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_15、谈谈-synchronized和reentrantlock-的区别-结合原理去说明\"}},[a._v(\"#\")]),a._v(\" 15、谈谈 synchronized和ReentrantLock 的区别，结合原理去说明\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"① 两者都是可重入锁\")])]),a._v(\" \"),s(\"p\",[a._v(\"两者都是可重入锁。“可重入锁”概念是：自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果不可锁重入的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增1，所以要等到锁的计数器下降为0时才能释放锁。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"② synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API\")])]),a._v(\" \"),s(\"p\",[a._v(\"synchronized 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 synchronized 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。ReentrantLock 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"③ ReentrantLock 比 synchronized 增加了一些高级功能\")])]),a._v(\" \"),s(\"p\",[a._v(\"相比synchronized，ReentrantLock增加了一些高级功能。主要来说主要有三点：\"),s(\"strong\",[a._v(\"①等待可中断；②可实现公平锁；③可实现选择性通知（锁可以绑定多个条件）\")])]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[a._v(\"ReentrantLock提供了一种能够中断等待锁的线程的机制\")]),a._v(\"，通过lock.lockInterruptibly()来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。\")]),a._v(\" \"),s(\"li\",[s(\"strong\",[a._v(\"ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。\")]),a._v(\" ReentrantLock默认情况是非公平的，可以通过 ReentrantLock类的\"),s(\"code\",[a._v(\"ReentrantLock(boolean fair)\")]),a._v(\"构造方法来制定是否是公平的。\")]),a._v(\" \"),s(\"li\",[a._v(\"synchronized关键字与wait()和notify()/notifyAll()方法相结合可以实现等待/通知机制，ReentrantLock类当然也可以实现，但是需要借助于Condition接口与newCondition() 方法。Condition是JDK1.5之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个Lock对象中可以创建多个Condition实例（即对象监视器），\"),s(\"strong\",[a._v(\"线程对象可以注册在指定的Condition中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用notify()/notifyAll()方法进行通知时，被通知的线程是由 JVM 选择的，用ReentrantLock类结合Condition实例可以实现“选择性通知”\")]),a._v(\" ，这个功能非常重要，而且是Condition接口默认提供的。而synchronized关键字就相当于整个Lock对象中只有一个Condition实例，所有的线程都注册在它一个身上。如果执行notifyAll()方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而Condition实例的signalAll()方法 只会唤醒注册在该Condition实例中的所有等待线程。\")])]),a._v(\" \"),s(\"p\",[a._v(\"如果你想使用上述功能，那么选择ReentrantLock是一个不错的选择。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"④ 性能已不是选择标准\")])]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_16、volatile关键字\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_16、volatile关键字\"}},[a._v(\"#\")]),a._v(\" 16、volatile关键字\")]),a._v(\" \"),s(\"p\",[a._v(\"在 JDK1.2 之前，Java的内存模型实现总是从\"),s(\"strong\",[a._v(\"主存\")]),a._v(\"（即共享内存）读取变量，是不需要进行特别的注意的。而在当前的 Java 内存模型下，线程可以把变量保存\"),s(\"strong\",[a._v(\"本地内存\")]),a._v(\"比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成\"),s(\"strong\",[a._v(\"数据的不一致\")]),a._v(\"。\")]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4.png\",alt:\"数据不一致\"}})]),a._v(\" \"),s(\"p\",[a._v(\"要解决这个问题，就需要把变量声明为\"),s(\"strong\",[a._v(\"volatile\")]),a._v(\"，这就指示 JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。\")]),a._v(\" \"),s(\"p\",[a._v(\"说白了， \"),s(\"strong\",[a._v(\"volatile\")]),a._v(\" 关键字的主要作用就是保证变量的可见性然后还有一个作用是防止指令重排序。\")]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/volatile%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7.png\",alt:\"volatile关键字的可见性\"}})]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_17、-synchronized关键字和volatile关键字比较\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_17、-synchronized关键字和volatile关键字比较\"}},[a._v(\"#\")]),a._v(\" 17、 synchronized关键字和volatile关键字比较\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[a._v(\"volatile关键字\")]),a._v(\"是线程同步的\"),s(\"strong\",[a._v(\"轻量级实现\")]),a._v(\"，所以\"),s(\"strong\",[a._v(\"volatile性能肯定比synchronized关键字要好\")]),a._v(\"。但是\"),s(\"strong\",[a._v(\"volatile关键字只能用于变量而synchronized关键字可以修饰方法以及代码块\")]),a._v(\"。synchronized关键字在JavaSE1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其它各种优化之后执行效率有了显著提升，\"),s(\"strong\",[a._v(\"实际开发中使用 synchronized 关键字的场景还是更多一些\")]),a._v(\"。\")]),a._v(\" \"),s(\"li\",[s(\"strong\",[a._v(\"多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞\")])]),a._v(\" \"),s(\"li\",[s(\"strong\",[a._v(\"volatile关键字能保证数据的可见性，但不能保证数据的原子性。synchronized关键字两者都能保证。\")])]),a._v(\" \"),s(\"li\",[s(\"strong\",[a._v(\"volatile关键字主要用于解决变量在多个线程之间的可见性，而 synchronized关键字解决的是多个线程之间访问资源的同步性。\")])])]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_18、threadlocal简介\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_18、threadlocal简介\"}},[a._v(\"#\")]),a._v(\" 18、ThreadLocal简介\")]),a._v(\" \"),s(\"p\",[a._v(\"通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。\"),s(\"strong\",[a._v(\"如果想实现每一个线程都有自己的专属本地变量该如何解决呢？\")]),a._v(\" JDK中提供的\"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\"类正是为了解决这样的问题。 \"),s(\"strong\",[s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\"类主要解决的就是让每个线程绑定自己的值，可以将\"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\"类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。\")])]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"如果你创建了一个\"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\"变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是\"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\"变量名的由来。他们可以使用 \"),s(\"code\",[a._v(\"get（）\")]),a._v(\" 和 \"),s(\"code\",[a._v(\"set（）\")]),a._v(\" 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。\")])]),a._v(\" \"),s(\"p\",[a._v(\"再举个简单的例子：\")]),a._v(\" \"),s(\"p\",[a._v(\"比如有两个人去宝屋收集宝物，这两个共用一个袋子的话肯定会产生争执，但是给他们两个人每个人分配一个袋子的话就不会出现这样的问题。如果把这两个人比作线程的话，那么ThreadLocal就是用来避免这两个线程竞争的。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_19、threadlocal原理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_19、threadlocal原理\"}},[a._v(\"#\")]),a._v(\" 19、ThreadLocal原理\")]),a._v(\" \"),s(\"p\",[a._v(\"从 \"),s(\"code\",[a._v(\"Thread\")]),a._v(\"类源代码入手。\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Thread\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"implements\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Runnable\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//与此线程有关的ThreadLocal值。由ThreadLocal类维护\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ThreadLocal\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"ThreadLocalMap\")]),a._v(\" threadLocals \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"null\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ThreadLocal\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"ThreadLocalMap\")]),a._v(\" inheritableThreadLocals \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"null\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"9\")]),s(\"br\")])]),s(\"p\",[a._v(\"从上面\"),s(\"code\",[a._v(\"Thread\")]),a._v(\"类 源代码可以看出\"),s(\"code\",[a._v(\"Thread\")]),a._v(\" 类中有一个 \"),s(\"code\",[a._v(\"threadLocals\")]),a._v(\" 和 一个  \"),s(\"code\",[a._v(\"inheritableThreadLocals\")]),a._v(\" 变量，它们都是 \"),s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\"  类型的变量,我们可以把 \"),s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\"  理解为\"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\" 类实现的定制化的 \"),s(\"code\",[a._v(\"HashMap\")]),a._v(\"。默认情况下这两个变量都是null，只有当前线程调用 \"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\" 类的 \"),s(\"code\",[a._v(\"set\")]),a._v(\"或\"),s(\"code\",[a._v(\"get\")]),a._v(\"方法时才创建它们，实际上调用这两个方法的时候，我们调用的是\"),s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\"类对应的 \"),s(\"code\",[a._v(\"get()\")]),a._v(\"、\"),s(\"code\",[a._v(\"set()\")]),a._v(\"方法。\")]),a._v(\" \"),s(\"p\",[s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\"类的\"),s(\"code\",[a._v(\"set()\")]),a._v(\"方法\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[a._v(\"    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"public\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"set\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"T\")]),a._v(\" value\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Thread\")]),a._v(\" t \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Thread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"currentThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ThreadLocalMap\")]),a._v(\" map \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"getMap\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"if\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"map \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"!=\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"null\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\"\\n            map\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"set\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" value\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"else\")]),a._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"createMap\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" value\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ThreadLocalMap\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"getMap\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Thread\")]),a._v(\" t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"return\")]),a._v(\" t\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"threadLocals\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"11\")]),s(\"br\")])]),s(\"p\",[a._v(\"通过上面这些内容，我们足以通过猜测得出结论：\"),s(\"strong\",[a._v(\"最终的变量是放在了当前线程的 \"),s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\" 中，并不是存在 \"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\" 上，\"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\" 可以理解为只是\"),s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\"的封装，传递了变量值。\")]),a._v(\" \"),s(\"code\",[a._v(\"ThrealLocal\")]),a._v(\" 类中可以通过\"),s(\"code\",[a._v(\"Thread.currentThread()\")]),a._v(\"获取到当前线程对象后，直接通过\"),s(\"code\",[a._v(\"getMap(Thread t)\")]),a._v(\"可以访问到该线程的\"),s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\"对象。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"每个\"),s(\"code\",[a._v(\"Thread\")]),a._v(\"中都具备一个\"),s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\"，而\"),s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\"可以存储以\"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\"为key的键值对。\")]),a._v(\" 比如我们在同一个线程中声明了两个 \"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\" 对象的话，会使用 \"),s(\"code\",[a._v(\"Thread\")]),a._v(\"内部都是使用仅有那个\"),s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\" 存放数据的，\"),s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\"的 key 就是 \"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\"对象，value 就是 \"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\" 对象调用\"),s(\"code\",[a._v(\"set\")]),a._v(\"方法设置的值。\"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\" 是 map结构是为了让每个线程可以关联多个 \"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\"变量。这也就解释了 ThreadLocal 声明的变量为什么在每一个线程都有自己的专属本地变量。\")]),a._v(\" \"),s(\"p\",[s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\"是\"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\"的静态内部类。\")]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/ThreadLocal%E5%86%85%E9%83%A8%E7%B1%BB.png\",alt:\"ThreadLocal内部类\"}})]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_20、threadlocal-内存泄露问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_20、threadlocal-内存泄露问题\"}},[a._v(\"#\")]),a._v(\" 20、ThreadLocal 内存泄露问题\")]),a._v(\" \"),s(\"p\",[s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\" 中使用的 key 为 \"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\" 的弱引用,而 value 是强引用。所以，如果 \"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\" 没有被外部强引用的情况下，在垃圾回收的时候会 key 会被清理掉，而 value 不会被清理掉。这样一来，\"),s(\"code\",[a._v(\"ThreadLocalMap\")]),a._v(\" 中就会出现key为null的Entry。假如我们不做任何措施的话，value 永远无法被GC 回收，这个时候就可能会产生内存泄露。ThreadLocalMap实现中已经考虑了这种情况，在调用 \"),s(\"code\",[a._v(\"set()\")]),a._v(\"、\"),s(\"code\",[a._v(\"get()\")]),a._v(\"、\"),s(\"code\",[a._v(\"remove()\")]),a._v(\" 方法的时候，会清理掉 key 为 null 的记录。使用完 \"),s(\"code\",[a._v(\"ThreadLocal\")]),a._v(\"方法后 最好手动调用\"),s(\"code\",[a._v(\"remove()\")]),a._v(\"方法\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[a._v(\"      \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"static\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"class\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Entry\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"extends\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"WeakReference\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ThreadLocal\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"?\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"/** The value associated with this ThreadLocal. */\")]),a._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Object\")]),a._v(\" value\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Entry\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"ThreadLocal\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"?\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\">\")])]),a._v(\" k\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Object\")]),a._v(\" v\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"super\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"k\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n                value \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" v\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"9\")]),s(\"br\")])]),s(\"p\",[s(\"strong\",[a._v(\"弱引用介绍：\")])]),a._v(\" \"),s(\"blockquote\",[s(\"p\",[a._v(\"如果一个对象只具有弱引用，那就类似于\"),s(\"strong\",[a._v(\"可有可无的生活用品\")]),a._v(\"。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。\")]),a._v(\" \"),s(\"p\",[a._v(\"弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。\")])]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_21、能不能给我简单介绍一下-atomicinteger-类的原理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_21、能不能给我简单介绍一下-atomicinteger-类的原理\"}},[a._v(\"#\")]),a._v(\" 21、能不能给我简单介绍一下 AtomicInteger 类的原理\")]),a._v(\" \"),s(\"p\",[a._v(\"AtomicInteger 类主要利用 CAS (compare and swap) + volatile 和 native 方法来保证原子操作，从而避免 synchronized 的高开销，执行效率大为提升。\")]),a._v(\" \"),s(\"p\",[a._v(\"CAS的原理是拿期望的值和原本的一个值作比较，如果相同则更新成新的值。UnSafe 类的 objectFieldOffset() 方法是一个本地方法，这个方法是用来拿到“原来的值”的内存地址，返回值是 valueOffset。另外 value 是一个volatile变量，在内存中可见，因此 JVM 可以保证任何时刻任何线程总能拿到该变量的最新值。\")]),a._v(\" \"),s(\"p\",[a._v(\"关于 Atomic 原子类这部分更多内容可以查看我的这篇文章：并发编程面试必备：\"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s/joa-yOiTrYF67bElj8xqvg\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"JUC 中的 Atomic 原子类总结\"),s(\"OutboundLink\")],1)]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_22、aqs-原理分析\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_22、aqs-原理分析\"}},[a._v(\"#\")]),a._v(\" 22、AQS 原理分析\")]),a._v(\" \"),s(\"p\",[a._v(\"AQS是一个用来构建锁和同步器的框架，使用AQS能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的ReentrantLock，Semaphore，其他的诸如ReentrantReadWriteLock，SynchronousQueue，FutureTask等等皆是基于AQS的。当然，我们自己也能利用AQS非常轻松容易地构造出符合我们自己需求的同步器。\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"AQS核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH队列锁实现的，即将暂时获取不到锁的线程加入到队列中。\")])]),a._v(\" \"),s(\"blockquote\",[s(\"p\",[a._v(\"CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS是将每条请求共享资源的线程封装成一个CLH锁队列的一个结点（Node）来实现锁的分配。\")])]),a._v(\" \"),s(\"p\",[a._v(\"看个AQS(AbstractQueuedSynchronizer)原理图：\")]),a._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/AQS%E5%8E%9F%E7%90%86%E5%9B%BE.png\",alt:\"AQS原理图\"}})]),a._v(\" \"),s(\"p\",[a._v(\"AQS使用一个int成员变量来表示同步状态，通过内置的FIFO队列来完成获取资源线程的排队工作。AQS使用CAS对该同步状态进行原子操作实现对其值的修改。\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"private\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"volatile\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" state\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//共享变量，使用volatile修饰保证线程可见性\")]),a._v(\"\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\")])]),s(\"p\",[a._v(\"状态信息通过protected类型的getState，setState，compareAndSetState进行操作\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//返回同步状态的当前值\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"protected\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"final\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"getState\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"  \\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"return\")]),a._v(\" state\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 设置同步状态的值\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"protected\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"final\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"void\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"setState\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" newState\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\" \\n        state \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" newState\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"//原子地（CAS操作）将同步状态值设置为给定值update如果当前同步状态的值等于expect（期望值）\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"protected\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"final\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"boolean\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"compareAndSetState\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" expect\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"int\")]),a._v(\" update\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"return\")]),a._v(\" unsafe\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"compareAndSwapInt\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"this\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" stateOffset\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" expect\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" update\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"13\")]),s(\"br\")])]),s(\"p\",[a._v(\"底层实现采用的是乐观锁的方式，CAS的方式，CAS其实在JNI里是借助于一个CPU指令完成的。CAS底层使用JNI调用C代码实现的，如果你有Hotspot源码，那么在Unsafe.cpp里可以找到它的实现，指令：Atomic::cmpxchg(x, addr, e)；原文地址：https://juejin.im/post/5a73cbbff265da4e807783f5\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_23、aqs对资源的共享方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_23、aqs对资源的共享方式\"}},[a._v(\"#\")]),a._v(\" 23、AQS对资源的共享方式\")]),a._v(\" \"),s(\"p\",[s(\"strong\",[a._v(\"AQS定义两种资源共享方式\")])]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[a._v(\"Exclusive\")]),a._v(\"（独占）：只有一个线程能执行，如ReentrantLock。又可分为公平锁和非公平锁：\\n\"),s(\"ul\",[s(\"li\",[a._v(\"公平锁：按照线程在队列中的排队顺序，先到者先拿到锁\")]),a._v(\" \"),s(\"li\",[a._v(\"非公平锁：当线程要获取锁时，无视队列顺序直接去抢锁，谁抢到就是谁的\")])])]),a._v(\" \"),s(\"li\",[s(\"strong\",[a._v(\"Share\")]),a._v(\"（共享）：多个线程可同时执行，如Semaphore/CountDownLatch。Semaphore、CountDownLatch、 CyclicBarrier、ReadWriteLock 我们都会在后面讲到。\")])]),a._v(\" \"),s(\"p\",[a._v(\"ReentrantReadWriteLock 可以看成是组合式，因为ReentrantReadWriteLock也就是读写锁允许多个线程同时对某一资源进行读。\")]),a._v(\" \"),s(\"p\",[a._v(\"不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源 state 的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS已经在顶层实现好了。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_24、-aqs-组件总结\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_24、-aqs-组件总结\"}},[a._v(\"#\")]),a._v(\" 24、 AQS 组件总结\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[a._v(\"Semaphore(信号量)-允许多个线程同时访问：\")]),a._v(\" synchronized 和 ReentrantLock 都是一次只允许一个线程访问某个资源，Semaphore(信号量)可以指定多个线程同时访问某个资源。\")]),a._v(\" \"),s(\"li\",[s(\"strong\",[a._v(\"CountDownLatch （倒计时器）：\")]),a._v(\" CountDownLatch是一个同步工具类，用来协调多个线程之间的同步。这个工具通常用来控制线程等待，它可以让某一个线程等待直到倒计时结束，再开始执行。\")]),a._v(\" \"),s(\"li\",[s(\"strong\",[a._v(\"CyclicBarrier(循环栅栏)：\")]),a._v(\" CyclicBarrier 和 CountDownLatch 非常类似，它也可以实现线程间的技术等待，但是它的功能比 CountDownLatch 更加复杂和强大。主要应用场景和 CountDownLatch 类似。CyclicBarrier 的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。CyclicBarrier默认的构造方法是 CyclicBarrier(int parties)，其参数表示屏障拦截的线程数量，每个线程调用await()方法告诉 CyclicBarrier 我已经到达了屏障，然后当前线程被阻塞。\")])]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_25、volatile如何做到内存可见性的。\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_25、volatile如何做到内存可见性的。\"}},[a._v(\"#\")]),a._v(\" 25、volatile如何做到内存可见性的。\")]),a._v(\" \"),s(\"p\",[a._v(\"A、对于普通变量：读操作会优先读取工作内存的数据，如果工作内存中不存在，则从主内存中拷贝一份数据到工作内存中;写操作只会修改工作内存的副本数据，这种情况下，其它线程就无法读取变量的最新值。\")]),a._v(\" \"),s(\"p\",[a._v(\"B、对于volatile变量，读操作时JMM会把工作内存中对应的值设为无效，要求线程从主内存中读取数据;写操作时JMM会把工作内存中对应的数据刷新到主内存中，这种情况下，其它线程就可以读取变量的最新值。\")]),a._v(\" \"),s(\"p\",[a._v(\"volatile变量的内存可见性是基于内存屏障(Memory Barrier)实现的，什么是内存屏障?内存屏障，又称内存栅栏，是一个CPU指令。在程序运行时，为了提高执行性能，编译器和处理器会对指令进行重排序，JMM为了保证在不同的编译器和CPU上有相同的结果，通过插入特定类型的内存屏障来禁止特定类型的编译器重排序和处理器重排序，插入一条内存屏障会告诉编译器和CPU：不管什么指令都不能和这条Memory Barrier指令重排序。\")]),a._v(\" \"),s(\"p\",[a._v(\"这个lock前缀指令相当于上述的内存屏障，提供了以下保证：\")]),a._v(\" \"),s(\"p\",[a._v(\"1、将当前CPU缓存行的数据写回到主内存;\")]),a._v(\" \"),s(\"p\",[a._v(\"2、这个写回内存的操作会导致在其它CPU里缓存了该内存地址的数据无效。\")]),a._v(\" \"),s(\"p\",[a._v(\"CPU为了提高处理性能，并不直接和内存进行通信，而是将内存的数据读取到内部缓存(L1，L2)再进行操作，但操作完并不能确定何时写回到内存，如果对volatile变量进行写操作，1、当CPU执行到Lock前缀指令时，会将这个变量所在缓存行的数据写回到内存，不过还是存在一个问题，就算内存的数据是最新的，其它CPU缓存的还是旧值，所以为了保证各个CPU的缓存一致性，2、每个CPU通过嗅探在总线上传播的数据来检查自己缓存的数据有效性，当发现自己缓存行对应的内存地址的数据被修改，就会将该缓存行设置成无效状态，当CPU读取该变量时，发现所在的缓存行被设置为无效，就会重新从内存中读取数据到缓存中。\")]),a._v(\" \"),s(\"p\",[a._v(\"首先，cpu直接和l1、l2缓存直接通信，不和内存直接通信，在cpu操作完成之后写入缓存，不确定何时写回内存。\")]),a._v(\" \"),s(\"p\",[a._v(\"其次，使用volatile写数据的时候，在混编的代码里边（0x01a3de24: \"),s(\"strong\",[a._v(\"lock\")]),a._v(\" addl $0x0,(%esp);）可以看到一个有lock前缀的指令。保证：1、所有缓存的变量会写会内存；2、将l1和l2的缓存值置为无效。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_26、volatile如何做到指令重排序的。\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_26、volatile如何做到指令重排序的。\"}},[a._v(\"#\")]),a._v(\" 26、volatile如何做到指令重排序的。\")]),a._v(\" \"),s(\"p\",[a._v(\"在程序运行时，为了提高执行性能，编译器和处理器会对指令进行重排序，JMM为了保证在不同的编译器和CPU上有相同的结果，通过插入特定类型的内存屏障来禁止特定类型的编译器重排序和处理器重排序，插入一条内存屏障会告诉编译器和CPU：不管什么指令都不能和这条内存屏障（Memory Barrier）指令重排序。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_27、java-对象头\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_27、java-对象头\"}},[a._v(\"#\")]),a._v(\" 27、Java 对象头\")]),a._v(\" \"),s(\"p\",[a._v(\"1.1.普通对象\")]),a._v(\" \"),s(\"p\",[a._v(\"|--------------------------------------------------------------|\")]),a._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[a._v(\"Object Header (64 bits)\")])])]),a._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[a._v(\"Mark Word (32 bits)\")])]),a._v(\" \"),s(\"tr\",[s(\"td\",[a._v(\"------------------------------------\")])])])]),a._v(\" \"),s(\"p\",[a._v(\"1.2.数组对象\")]),a._v(\" \"),s(\"p\",[a._v(\"|---------------------------------------------------------------------------------|\")]),a._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[a._v(\"Object Header (96 bits)\")])])]),a._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[a._v(\"Mark Word(32bits)\")])]),a._v(\" \"),s(\"tr\",[s(\"td\",[a._v(\"--------------------------------\")])])])]),a._v(\" \"),s(\"p\",[a._v(\"Mark Word\")]),a._v(\" \"),s(\"p\",[a._v(\"这部分主要用来存储对象自身的运行时数据，如hashcode、gc分代年龄等。mark word的位长度为JVM的一个Word大小，也就是说32位JVM的Mark word为32位，64位JVM为64位。\\n为了让一个字大小存储更多的信息，JVM将字的最低两个位设置为标记位，不同标记位下的Mark Word示意如下：\")]),a._v(\" \"),s(\"p\",[a._v(\"|-------------------------------------------------------|--------------------|\")]),a._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[a._v(\"Mark Word (32 bits)\")]),a._v(\" \"),s(\"th\",[a._v(\"State\")])])]),a._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[a._v(\"identity_hashcode:25\")]),a._v(\" \"),s(\"td\",[a._v(\"age:4\")])]),a._v(\" \"),s(\"tr\",[s(\"td\",[a._v(\"-------------------------------------------------------\")]),a._v(\" \"),s(\"td\",[a._v(\"--------------------\")])]),a._v(\" \"),s(\"tr\",[s(\"td\",[a._v(\"thread:23\")]),a._v(\" \"),s(\"td\",[a._v(\"epoch:2\")])]),a._v(\" \"),s(\"tr\",[s(\"td\",[a._v(\"-------------------------------------------------------\")]),a._v(\" \"),s(\"td\",[a._v(\"--------------------\")])]),a._v(\" \"),s(\"tr\",[s(\"td\",[a._v(\"ptr_to_lock_record:30\")]),a._v(\" \"),s(\"td\",[a._v(\"lock:2\")])]),a._v(\" \"),s(\"tr\",[s(\"td\",[a._v(\"-------------------------------------------------------\")]),a._v(\" \"),s(\"td\",[a._v(\"--------------------\")])]),a._v(\" \"),s(\"tr\",[s(\"td\",[a._v(\"ptr_to_heavyweight_monitor:30\")]),a._v(\" \"),s(\"td\",[a._v(\"lock:2\")])]),a._v(\" \"),s(\"tr\",[s(\"td\",[a._v(\"-------------------------------------------------------\")]),a._v(\" \"),s(\"td\",[a._v(\"--------------------\")])]),a._v(\" \"),s(\"tr\",[s(\"td\"),a._v(\" \"),s(\"td\",[a._v(\"lock:2\")])]),a._v(\" \"),s(\"tr\",[s(\"td\",[a._v(\"-------------------------------------------------------\")]),a._v(\" \"),s(\"td\",[a._v(\"--------------------\")])])])]),a._v(\" \"),s(\"p\",[a._v(\"biased_lock\\tlock\\t状态\\n0\\t01\\t无锁\\n1\\t01\\t偏向锁\\n0\\t00\\t轻量级锁\\n0\\t10\\t重量级锁\\n0\\t11\\tGC标记\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_28、线程同步的方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_28、线程同步的方式\"}},[a._v(\"#\")]),a._v(\" 28、线程同步的方式\")]),a._v(\" \"),s(\"p\",[a._v(\"1、临界区：保证在某一时刻只有一个线程能访问数据的简便办法。在任意时刻只允许一个线程对共享资源进行访问。如果有多个线程试图同时访问临界区，那么 在有一个线程进入后其他所有试图访问此临界区的线程将被挂起，并一直持续到进入临界区的线程离开。临界区在被释放后，其他线程可以继续抢占，并以此达到用原子方式操 作共享资源的目的。 仅能在同一进程内使用\")]),a._v(\" \"),s(\"p\",[a._v(\"2、互斥量 Mutex：互斥量跟临界区很相似，只有拥有互斥对象的线程才具有访问资源的权限，由于互斥对象只有一个，因此就决定了任何情况下此共享资源都不会同时被多个线程所访问。当前占据资源的线程在任务处理完后应将拥有的互斥对象交出，以便其他线程在获得后得以访问资源。互斥量比临界区复杂。因为使用互斥不仅仅能够在同一应用程序不同线程中实现资源的安全共享，而且可以在不同应用程序的线程之间实现对资源的安全共享。\")]),a._v(\" \"),s(\"p\",[a._v(\"3、信号量 ：信号量对象对线程的同步方式与前面几种方法不同，信号允许多个线程同时使用共享资源 ，这与操作系统中的PV操作相同。\")]),a._v(\" \"),s(\"p\",[a._v(\"4、事件（Event） ：事件机制，则允许一个线程在处理完一个任务后，主动唤醒另外一个线程执行任务。\")])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}