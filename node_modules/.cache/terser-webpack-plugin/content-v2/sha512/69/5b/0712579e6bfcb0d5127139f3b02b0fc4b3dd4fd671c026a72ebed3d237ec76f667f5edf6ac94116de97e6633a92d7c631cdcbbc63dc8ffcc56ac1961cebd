{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{453:function(a,t,r){\"use strict\";r.r(t);var s=r(13),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[r(\"h2\",{attrs:{id:\"总体解决方案\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总体解决方案\"}},[a._v(\"#\")]),a._v(\" 总体解决方案\")]),a._v(\" \"),r(\"p\",[a._v(\"事前：redis 高可用，主从+哨兵，哈希到不同的节点分流，redis cluster，避免全盘崩溃。\")]),a._v(\" \"),r(\"p\",[a._v(\"事中：本地 guava 缓存 + hystrix 限流&降级，避免 MySQL 被打死。\")]),a._v(\" \"),r(\"p\",[a._v(\"事后：redis 持久化，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"缓存雪崩\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存雪崩\"}},[a._v(\"#\")]),a._v(\" 缓存雪崩\")]),a._v(\" \"),r(\"p\",[a._v(\"对于系统 A，假设每天高峰期每秒 5000 个请求，本来缓存在高峰期可以扛住每秒 4000 个请求，但是缓存机器意外发生了全盘宕机。缓存挂了，此时 1 秒 5000 个请求全部落数据库，数据库必然扛不住，它会报一下警，然后就挂了。此时，如果没有采用什么特别的方案来处理这个故障，DBA 很着急，重启数据库，但是数据库立马又被新的流量给打死了。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"缓存雪崩解决方案\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存雪崩解决方案\"}},[a._v(\"#\")]),a._v(\" 缓存雪崩解决方案\")]),a._v(\" \"),r(\"p\",[a._v(\"缓存雪崩的事前事中事后的解决方案如下。\")]),a._v(\" \"),r(\"p\",[a._v(\"事前：redis 高可用，主从+哨兵，redis cluster，避免全盘崩溃。\\n事中：本地 guava 缓存 + hystrix 限流&降级，避免 MySQL 被打死。\\n事后：redis 持久化，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。\")]),a._v(\" \"),r(\"p\",[a._v(\"用户发送一个请求，系统 A 收到请求后，先查本地 guava 缓存，如果没查到再查 redis。如果 guava 和 redis 都没有，再查数据库，将数据库中的结果，写入 guava 和 redis 中。\")]),a._v(\" \"),r(\"p\",[a._v(\"限流组件，可以设置每秒的请求，有多少能通过组件，剩余的未通过的请求，怎么办？走降级！可以返回一些默认的值，或者友情提示，或者空白的值。\")]),a._v(\" \"),r(\"p\",[a._v(\"好处：\\n数据库绝对不会死，限流组件确保了每秒只有多少个请求能通过。\\n只要数据库不死，就是说，对用户来说，2/5 的请求都是可以被处理的。\\n只要有 2/5 的请求可以被处理，就意味着你的系统没死，对用户来说，可能就是点击几次刷不出来页面，但是多点几次，就可以刷出来一次。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"缓存穿透\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存穿透\"}},[a._v(\"#\")]),a._v(\" 缓存穿透\")]),a._v(\" \"),r(\"p\",[a._v(\"对于系统A，假设一秒 5000 个请求，结果其中 4000 个请求是黑客发出的恶意攻击。黑客发出的那 4000 个攻击，缓存中查不到，每次你去数据库里查，也查不到。举个栗子。数据库 id是从1开始的，结果黑客发过来的请求id全部都是负数。这样的话，缓存中不会有，请求每次都“视缓存于无物”，直接查询数据库。这种恶意攻击场景的缓存穿透就会直接把数据库给打死。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"缓存穿透解决方案\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存穿透解决方案\"}},[a._v(\"#\")]),a._v(\" 缓存穿透解决方案\")]),a._v(\" \"),r(\"p\",[a._v(\"解决方式很简单，每次系统 A 从数据库中只要没查到，就写一个空值到缓存里去，比如 set -999 UNKNOWN。然后设置一个过期时间，这样的话，下次有相同的 key 来访问的时候，在缓存失效之前，都可以直接从缓存中取数据。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"缓存击穿\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存击穿\"}},[a._v(\"#\")]),a._v(\" 缓存击穿\")]),a._v(\" \"),r(\"p\",[a._v(\"缓存击穿，就是说某个key非常热点，访问非常频繁，处于集中式高并发访问的情况，当这个key在失效的瞬间，大量的请求就击穿了缓存，直接请求数据库，就像是在一道屏障上凿开了一个洞。\")]),a._v(\" \"),r(\"h4\",{attrs:{id:\"缓存击穿解决方案\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存击穿解决方案\"}},[a._v(\"#\")]),a._v(\" 缓存击穿解决方案\")]),a._v(\" \"),r(\"p\",[a._v(\"解决方式也很简单，可以将热点数据设置为永远不过期；或者基于 redis or zookeeper 实现互斥锁，等待第一个请求构建完缓存之后，再释放锁，进而其它请求才能通过该 key 访问数据。\")])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}