{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{403:function(n,s,a){\"use strict\";a.r(s);var i=a(13),t=Object(i.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[a(\"h3\",{attrs:{id:\"一、简单入门\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、简单入门\"}},[n._v(\"#\")]),n._v(\" 一、简单入门\")]),n._v(\" \"),a(\"ol\",[a(\"li\",[n._v(\"使用最小花费爬楼梯\")])]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public int minCostClimbingStairs(int[] cost) {\\n        if (cost == null || cost.length == 0) {\\n            return 0;\\n        }\\n        if (cost.length == 1) {\\n            return cost[0];\\n        }\\n        int[] dp = new int[cost.length];\\n        dp[0] = cost[0];\\n        dp[1] = cost[1];\\n        for (int i = 2; i < cost.length; i++) {\\n            dp[i] = Math.min(dp[i - 1], dp[i - 2]) + cost[i];\\n        }\\n        //最后一步，如果是由倒数第二步爬，则最后一步的体力花费可以不用算\\n        return Math.min(dp[cost.length - 1], dp[cost.length - 2]);\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"2\"}},[a(\"li\",[n._v(\"爬楼梯：每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\")])]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"dp[0] = 1;\\ndp[1] = 2;\\ndp[i] = dp[i - 1] + dp[i - 2] \\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\")])]),a(\"h3\",{attrs:{id:\"二、数组的路径\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、数组的路径\"}},[n._v(\"#\")]),n._v(\" 二、数组的路径\")]),n._v(\" \"),a(\"ol\",[a(\"li\",[n._v(\"一个机器人位于一个m x n网格的左上角，机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角，有多少组走法\")])]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"    public static int uniquePaths(int m, int n) {\\n        int[][] dp = new int[m][n];\\n        //初始化\\n        for (int i = 0; i < m; i++) {\\n            dp[i][0] = 1;\\n        }\\n        for (int i = 0; i < n; i++) {\\n            dp[0][i] = 1;\\n        }\\n\\n        for (int i = 1; i < m; i++) {\\n            for (int j = 1; j < n; j++) {\\n                dp[i][j] = dp[i-1][j]+dp[i][j-1];\\n            }\\n        }\\n        return dp[m-1][n-1];\\n    }\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"2\"}},[a(\"li\",[n._v(\"网格中有障碍物\")])]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public int uniquePathsWithObstacles(int[][] obstacleGrid) {\\n        int n = obstacleGrid.length, m = obstacleGrid[0].length;\\n        int[][] dp = new int[n][m];\\n    \\n        for (int i = 0; i < m; i++) {\\n            if (obstacleGrid[0][i] == 1) \\n                break; //一旦遇到障碍，后续都到不了\\n            dp[0][i] = 1;\\n        }\\n        for (int i = 0; i < n; i++) {\\n            if (obstacleGrid[i][0] == 1) \\n                break; ////一旦遇到障碍，后续都到不了\\n         dp[i][0] = 1;\\n        }\\n        for (int i = 1; i < n; i++) {\\n            for (int j = 1; j < m; j++) {\\n                if (obstacleGrid[i][j] == 1) \\n                    continue;\\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\\n            }\\n        }\\n        return dp[n - 1][m - 1];\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"21\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"22\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"23\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"24\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"25\")]),a(\"br\")])]),a(\"h3\",{attrs:{id:\"三、01背包-总和、价值、总重量都可以尝试着用背包\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、01背包-总和、价值、总重量都可以尝试着用背包\"}},[n._v(\"#\")]),n._v(\" 三、01背包（总和、价值、总重量都可以尝试着用背包）\")]),n._v(\" \"),a(\"ol\",[a(\"li\",[n._v(\"背包最大重量为4，物品为：物品0，重量：1，价值：15；物品1，重量：3，价值：20；物品2：重量：4，价值：30。\")])]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v('    public static void testWeightBagProblem(int[] weight, int[] value, int bagWeight){\\n        int wLen = weight.length;\\n        //定义dp数组：dp[j]表示背包容量为j时，能获得的最大价值\\n        int[] dp = new int[bagWeight + 1];\\n        //遍历顺序：先遍历物品，再遍历背包容量\\n        for (int i = 0; i < wLen; i++){\\n            //只有物品的容量少于背包的容量的时候才能放进去\\n            for (int j = bagWeight; j >= weight[i]; j--){\\n                //dp[j]可以通过dp[j - weight[i]]推导出来，dp[j - weight[i]]表示容量为j - weight[i]的背包所背的最大价值。\\n                //dp[j - weight[i]] + value[i] 表示 容量为 j - 物品i重量 的背包 加上 物品i的价值。\\n                dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);\\n            }\\n        }\\n        //打印dp数组\\n        for (int j = 0; j <= bagWeight; j++){\\n            System.out.print(dp[j] + \" \");\\n        }\\n    }\\n')])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"2\"}},[a(\"li\",[n._v(\"分割等和子集：给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。\")])]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public boolean canPartition(int[] nums) {\\n        if(nums == null || nums.length == 0) return false;\\n        int n = nums.length;\\n        int sum = 0;\\n        for(int num : nums){\\n            sum += num;\\n        }\\n        //总和为奇数，不能平分\\n        if(sum % 2 != 0) return false;\\n        int target = sum / 2;\\n        int[] dp = new int[target + 1];\\n        for(int i = 0; i < n; i++){\\n            for(int j = target; j >= nums[i]; j--){\\n                //物品 i 的重量是 nums[i]，其价值也是 nums[i]\\n                dp[j] = Math.max(dp[j], dp[j-nums[i]] + nums[i]);\\n            }\\n        }\\n        return dp[target] == target;\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"21\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"3\"}},[a(\"li\",[n._v(\"最后一块石头的重量 II:有一堆石头，每块石头的重量都是正整数。每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：如果 x == y，那么两块石头都会被完全粉碎； 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。 最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。\")])]),n._v(\" \"),a(\"p\",[n._v(\"dp[j]表示容量（这里说容量更形象，其实就是重量）为j的背包，最多可以背dp[j]这么重的石头。\")]),n._v(\" \"),a(\"p\",[n._v(\"01背包的递推公式为：dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);本题则是：dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);\")]),n._v(\" \"),a(\"p\",[n._v(\"既然 dp[j]中的j表示容量，那么最大容量（重量）是多少呢，就是所有石头的重量和。而我们要求的target其实只是最大重量的一半，所以dp数组开到15000大小就可以了。当然也可以把石头遍历一遍，计算出石头总重量 然后除2，得到dp数组的大小。\")]),n._v(\" \"),a(\"p\",[n._v(\"在计算target的时候，target = sum / 2 因为是向下取整，所以sum - dp[target] 一定是大于等于dp[target]的。\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\npublic:\\n    int lastStoneWeightII(vector<int>& stones) {\\n        vector<int> dp(15001, 0);\\n        int sum = 0;\\n        for (int i = 0; i < stones.size(); i++) sum += stones[i];\\n        int target = sum / 2;\\n        for (int i = 0; i < stones.size(); i++) { // 遍历物品\\n            for (int j = target; j >= stones[i]; j--) { // 遍历背包\\n                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);\\n            }\\n        }\\n        return sum - dp[target] - dp[target];\\n    }\\n};\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\")])]),a(\"h3\",{attrs:{id:\"四、完全背包\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四、完全背包\"}},[n._v(\"#\")]),n._v(\" 四、完全背包\")]),n._v(\" \"),a(\"ol\",[a(\"li\",[n._v(\"目标和：给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。\")])]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public int findTargetSumWays(int[] nums, int target) {\\n        int sum = 0;\\n        for (int i = 0; i < nums.length; i++) sum += nums[i];\\n        if ((target + sum) % 2 != 0) return 0;\\n        int size = (target + sum) / 2;\\n        if(size < 0) size = -size;\\n        int[] dp = new int[size + 1];\\n        dp[0] = 1;\\n        for (int i = 0; i < nums.length; i++) {\\n            for (int j = size; j >= nums[i]; j--) {\\n                dp[j] += dp[j - nums[i]];\\n            }\\n        }\\n        return dp[size];\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"2\"}},[a(\"li\",[n._v(\"零钱兑换 II：给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。\")])]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public int change(int amount, int[] coins) {\\n        //递推表达式\\n        int[] dp = new int[amount + 1];\\n        //初始化dp数组，表示金额为0时只有一种情况，也就是什么都不装\\n        dp[0] = 1;\\n        for (int i = 0; i < coins.length; i++) {\\n            for (int j = coins[i]; j <= amount; j++) {\\n                dp[j] += dp[j - coins[i]];\\n            }\\n        }\\n        return dp[amount];\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"3\"}},[a(\"li\",[n._v(\"组合总和 Ⅳ：给定一个由正整数组成且不存在重复数字的数组，找出和为给定目标正整数的组合的个数。示例:nums = [1, 2, 3] target = 4。\")])]),n._v(\" \"),a(\"p\",[n._v(\"dp[i]: 凑成目标正整数为i的排列个数为dp[i]\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public int combinationSum4(int[] nums, int target) {\\n        int[] dp = new int[target + 1];\\n        dp[0] = 1;\\n        for (int i = 0; i <= target; i++) {\\n            for (int j = 0; j < nums.length; j++) {\\n                //容量小于i才能放进去\\n                if (i >= nums[j]) {\\n                    dp[i] = dp[i] + dp[i - nums[j]];\\n                }\\n            }\\n        }\\n        return dp[target];\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"4\"}},[a(\"li\",[n._v(\"爬楼梯进阶：一步一个台阶，两个台阶，三个台阶，.......，直到 m个台阶。问有多少种不同的方法可以爬到楼顶呢？1阶，2阶，.... m阶就是物品，楼顶就是背包。每一阶可以重复使用，例如跳了1阶，还可以继续跳1阶。\")])]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public int climbStairs(int n) {\\n        int[] dp = new int[n + 1];\\n        int[] weight = {1,2};\\n        dp[0] = 1;\\n\\n        for (int i = 0; i <= n; i++) {\\n            for (int j = 0; j < weight.length; j++) {\\n                if (i >= weight[j]) \\n                    dp[i] = dp[i] + dp[i - weight[j]];\\n            }\\n        }\\n\\n        return dp[n];\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"5\"}},[a(\"li\",[n._v(\"零钱兑换:给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。\")])]),n._v(\" \"),a(\"p\",[n._v(\"题目中说每种硬币的数量是无限的，可以看出是典型的完全背包问题。dp[j]：凑足总额为j所需钱币的最少个数为dp[j];得到dp[j]（考虑coins[i]），只有一个来源，dp[j - coins[i]]（没有考虑coins[i]）。凑足总额为j - coins[i]的最少个数为dp[j - coins[i]]，那么只需要加上一个钱币coins[i]即dp[j - coins[i]] + 1就是dp[j]（考虑coins[i]）。所以dp[j] 要取所有 dp[j - coins[i]] + 1 中最小的。递推公式：dp[j] = min(dp[j - coins[i]] + 1, dp[j]);\")]),n._v(\" \"),a(\"p\",[n._v(\"这个是在所有的dp[j - coins[i]]中选最小的\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public int coinChange(int[] coins, int amount) {\\n        int max = Integer.MAX_VALUE;\\n        int[] dp = new int[amount + 1];\\n        //初始化dp数组为最大值\\n        for (int j = 0; j < dp.length; j++) {\\n            dp[j] = max;\\n        }\\n        //当金额为0时需要的硬币数目为0\\n        dp[0] = 0;\\n        for (int i = 0; i < coins.length; i++) {\\n            //正序遍历：完全背包每个硬币可以选择多次\\n            for (int j = coins[i]; j <= amount; j++) {\\n                //只有dp[j-coins[i]]不是初始最大值时，该位才有选择的必要\\n                if (dp[j - coins[i]] != max) {\\n                    //选择硬币数目最小的情况\\n                    dp[j] = Math.min(dp[j], dp[j - coins[i]] + 1);\\n                }\\n            }\\n        }\\n        return dp[amount] == max ? -1 : dp[amount];\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"21\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"22\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"23\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"6\"}},[a(\"li\",[n._v(\"完全平方数：给定正整数n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于n。你需要让组成和的完全平方数的个数最少。给你一个整数n，返回和为n的完全平方数的最少数量。示例 1： 输入：n = 12 输出：3 解释：12 = 4 + 4 + 4。示例 2： 输入：n = 13 输出：2 解释：13 = 4 + 9。\")])]),n._v(\" \"),a(\"p\",[n._v(\"dp[j]：和为j的完全平方数的最少数量为dp[j]。dp[j] 可以由dp[j - i * i]推出， dp[j - i * i] + 1 便可以凑成dp[j]。此时我们要选择最小的dp[j]，所以递推公式：dp[j] = min(dp[j - i * i] + 1, dp[j]);\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    // 版本一，先遍历物品, 再遍历背包\\n    public int numSquares(int n) {\\n        int max = Integer.MAX_VALUE;\\n        int[] dp = new int[n + 1];\\n        //初始化\\n        for (int j = 0; j <= n; j++) {\\n            dp[j] = max;\\n        }\\n        //当和为0时，组合的个数为0\\n        dp[0] = 0;\\n        // 遍历物品\\n        for (int i = 1; i * i <= n; i++) {\\n            // 遍历背包\\n            for (int j = i * i; j <= n; j++) {\\n                if (dp[j - i * i] != max) {\\n                    dp[j] = Math.min(dp[j], dp[j - i * i] + 1);\\n                }\\n            }\\n        }\\n        return dp[n];\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"21\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"22\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"23\")]),a(\"br\")])]),a(\"h3\",{attrs:{id:\"五、打家劫舍\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五、打家劫舍\"}},[n._v(\"#\")]),n._v(\" 五、打家劫舍\")]),n._v(\" \"),a(\"ol\",[a(\"li\",[n._v(\"打家劫舍：你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\")])]),n._v(\" \"),a(\"p\",[n._v(\"dp[i]：考虑下标i（包括i）以内的房屋，最多可以偷窃的金额为dp[i]。决定dp[i]的因素就是第i房间偷还是不偷。如果偷第i房间，那么dp[i] = dp[i - 2] + nums[i] ，即：第i-1房一定是不考虑的，找出 下标i-2（包括i-2）以内的房屋，最多可以偷窃的金额为dp[i-2] 加上第i房间偷到的钱。然后dp[i]取最大值，即dp[i] = max(dp[i - 2] + nums[i], dp[i - 1]);\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"// 动态规划\\nclass Solution {\\n    public int rob(int[] nums) {\\n        if (nums == null || nums.length == 0) return 0;\\n        if (nums.length == 1) return nums[0];\\n\\n        int[] dp = new int[nums.length];\\n        dp[0] = nums[0];\\n        dp[1] = Math.max(dp[0], nums[1]);\\n        for (int i = 2; i < nums.length; i++) {\\n            dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);\\n        }\\n\\n        return dp[nums.length - 1];\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"2\"}},[a(\"li\",[n._v(\"打家劫舍II，房子围成一圈了，规则不变。\")])]),n._v(\" \"),a(\"p\",[n._v(\"就是把环拆了\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"// 注意注释中的情况二情况三，以及把198.打家劫舍的代码抽离出来了\\nclass Solution {\\npublic:\\n    int rob(vector<int>& nums) {\\n        if (nums.size() == 0) return 0;\\n        if (nums.size() == 1) return nums[0];\\n        int result1 = robRange(nums, 0, nums.size() - 2); // 情况二\\n        int result2 = robRange(nums, 1, nums.size() - 1); // 情况三\\n        return max(result1, result2);\\n    }\\n    // 198.打家劫舍的逻辑\\n    int robRange(vector<int>& nums, int start, int end) {\\n        if (end == start) return nums[start];\\n        vector<int> dp(nums.size());\\n        dp[start] = nums[start];\\n        dp[start + 1] = max(nums[start], nums[start + 1]);\\n        for (int i = start + 2; i <= end; i++) {\\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1]);\\n        }\\n        return dp[end];\\n    }\\n};\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"21\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"22\")]),a(\"br\")])]),a(\"h3\",{attrs:{id:\"六、买卖股票\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#六、买卖股票\"}},[n._v(\"#\")]),n._v(\" 六、买卖股票\")]),n._v(\" \"),a(\"ol\",[a(\"li\",[n._v(\"给定一个数组 prices ，它的第i个元素prices[i]表示一支给定股票第i天的价格。你只能选择某一天买入这只股票，并选择在未来的某一个不同的日子卖出该股票。设计一个算法来计算你所能获取的最大利润。\")])]),n._v(\" \"),a(\"p\",[n._v(\"找最大和最小\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public int maxProfit(int[] prices) {\\n        // 找到一个最小的购入点\\n        int low = Integer.MAX_VALUE;\\n        // res不断更新，直到数组循环完毕\\n        int res = 0;\\n        for(int i = 0; i < prices.length; i++){\\n            low = Math.min(prices[i], low);\\n            res = Math.max(prices[i] - low, res);\\n        }\\n        return res;\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"2\"}},[a(\"li\",[n._v(\"买卖股票的最佳时机II：给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。\")])]),n._v(\" \"),a(\"p\",[n._v(\"在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。\")]),n._v(\" \"),a(\"p\",[n._v(\"dp[i][0] 表示第i天持有股票所得现金：第i-1天就持有股票，那么就保持现状，所得现金就是昨天持有股票的所得现金 即：dp[i - 1][0]；第i天买入股票，所得现金就是昨天不持有股票的所得现金减去 今天的股票价格 即：dp[i - 1][1] - prices[i]。\\ndp[i][1] 表示第i天不持有股票所得最多现金：第i-1天就不持有股票，那么就保持现状，所得现金就是昨天不持有股票的所得现金 即：dp[i - 1][1]；第i天卖出股票，所得现金就是按照今天股票佳价格卖出后所得现金即：prices[i] + dp[i - 1][0]\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"// 动态规划\\nclass Solution \\n    // 实现1：二维数组存储\\n    // 可以将每天持有与否的情况分别用 dp[i][0] 和 dp[i][1] 来进行存储\\n    // 时间复杂度：O(n)，空间复杂度：O(n)\\n    public int maxProfit(int[] prices) {\\n        int n = prices.length;\\n        int[][] dp = new int[n][2];     // 创建二维数组存储状态\\n        dp[0][0] = 0;                   // 初始状态\\n        dp[0][1] = -prices[0];\\n        for (int i = 1; i < n; ++i) {\\n            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);    // 第 i 天，没有股票\\n            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);    // 第 i 天，持有股票\\n        }\\n        return dp[n - 1][0];    // 卖出股票收益高于持有股票收益，因此取[0]\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"3\"}},[a(\"li\",[n._v(\"买卖股票的最佳时机III：给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你最多可以完成两笔交易。\")])]),n._v(\" \"),a(\"p\",[n._v(\"确定dp数组以及下标的含义：一天一共就有五个状态，没有操作；第一次买入；第一次卖出；第二次买入；第二次卖出。dp[i][1]，表示的是第i天，买入股票的状态，并不是说一定要第i天买入股票，这是很多同学容易陷入的误区。\")]),n._v(\" \"),a(\"ul\",[a(\"li\",[n._v(\"达到dp[i][1]状态，有两个具体操作：操作一：第i天买入股票了，那么dp[i][1] = dp[i-1][0] - prices[i]；操作二：第i天没有操作，而是沿用前一天买入的状态，即：dp[i][1] = dp[i - 1][1]，一定是选最大的，所以 dp[i][1] = max(dp[i-1][0] - prices[i], dp[i - 1][1]);\")]),n._v(\" \"),a(\"li\",[n._v(\"同理dp[i][2]也有两个操作：操作一：第i天卖出股票了，那么dp[i][2] = dp[i - 1][1] + prices[i]；操作二：第i天没有操作，沿用前一天卖出股票的状态，即：dp[i][2] = dp[i - 1][2]。所以dp[i][2] = max(dp[i - 1][1] + prices[i], dp[i - 1][2])。\")]),n._v(\" \"),a(\"li\",[n._v(\"dp[i][3] = max(dp[i - 1][3], dp[i - 1][2] - prices[i]);\")]),n._v(\" \"),a(\"li\",[n._v(\"dp[i][4] = max(dp[i - 1][4], dp[i - 1][3] + prices[i]);\")])]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public int maxProfit(int[] prices) {\\n        int len = prices.length;\\n        // 边界判断, 题目中 length >= 1, 所以可省去\\n        if (prices.length == 0) return 0;\\n\\n        /*\\n         * 定义 5 种状态:\\n         * 0: 没有操作, 1: 第一次买入, 2: 第一次卖出, 3: 第二次买入, 4: 第二次卖出\\n         */\\n        int[][] dp = new int[len][5];\\n        dp[0][1] = -prices[0];\\n        // 初始化第二次买入的状态是确保 最后结果是最多两次买卖的最大利润\\n        dp[0][3] = -prices[0];\\n\\n        for (int i = 1; i < len; i++) {\\n            dp[i][1] = Math.max(dp[i - 1][1], -prices[i]);\\n            dp[i][2] = Math.max(dp[i - 1][2], dp[i][1] + prices[i]);\\n            dp[i][3] = Math.max(dp[i - 1][3], dp[i][2] - prices[i]);\\n            dp[i][4] = Math.max(dp[i - 1][4], dp[i][3] + prices[i]);\\n        }\\n\\n        return dp[len - 1][4];\\n    }\\n}\\n\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"21\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"22\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"23\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"24\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"25\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"26\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"4\"}},[a(\"li\",[n._v(\"给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。\")])]),n._v(\" \"),a(\"p\",[n._v(\"使用二维数组 dp[i][j] ：第i天的状态为j，所剩下的最大现金是dp[i][j]；j的状态表示为：0 表示不操作；1 第一次买入；2 第一次卖出；3 第二次买入；4 第二次卖出。题目要求是至多有K笔交易，那么j的范围就定义为 2 * k + 1 就可以了。\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"// 版本二: 二维 dp数组\\nclass Solution {\\n    public int maxProfit(int k, int[] prices) {\\n        if (prices.length == 0) return 0;\\n\\n        // [天数][股票状态]\\n        // 股票状态: 奇数表示第 k 次交易持有/买入, 偶数表示第 k 次交易不持有/卖出, 0 表示没有操作\\n        int len = prices.length;\\n        int[][] dp = new int[len][k*2 + 1];\\n        \\n        // dp数组的初始化, 与版本一同理\\n        for (int i = 1; i < k*2; i += 2) {\\n            dp[0][i] = -prices[0];\\n        }\\n\\n        for (int i = 1; i < len; i++) {\\n            for (int j = 0; j < k*2 - 1; j += 2) {\\n                dp[i][j + 1] = Math.max(dp[i - 1][j + 1], dp[i - 1][j] - prices[i]);\\n                dp[i][j + 2] = Math.max(dp[i - 1][j + 2], dp[i - 1][j + 1] + prices[i]);\\n            }\\n        }\\n        return dp[len - 1][k*2];\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"21\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"22\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"23\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"24\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"5\"}},[a(\"li\",[a(\"p\",[n._v(\"冷静期：https://programmercarl.com/0309.%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F.html#%E6%80%9D%E8%B7%AF\")])]),n._v(\" \"),a(\"li\",[a(\"p\",[n._v(\"买卖股票的最佳时机含手续费，给定一个整数数组 prices，其中第i个元素代表了第i天的股票价格；非负整数fee代表了交易股票的手续费用。你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。\")])])]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"/**\\n * 卖出时支付手续费\\n * @param prices\\n * @param fee\\n * @return\\n */\\npublic int maxProfit(int[] prices, int fee) {\\n    int len = prices.length;\\n    // 0 : 持股（买入）\\n    // 1 : 不持股（售出）\\n    // dp 定义第i天持股/不持股 所得最多现金\\n    int[][] dp = new int[len][2];\\n    dp[0][0] = -prices[0];\\n    for (int i = 1; i < len; i++) {\\n        dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] - prices[i]);\\n        dp[i][1] = Math.max(dp[i - 1][0] + prices[i] - fee, dp[i - 1][1]);\\n    }\\n    return Math.max(dp[len - 1][0], dp[len - 1][1]);\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"19\")]),a(\"br\")])]),a(\"h3\",{attrs:{id:\"七、连续序列\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#七、连续序列\"}},[n._v(\"#\")]),n._v(\" 七、连续序列\")]),n._v(\" \"),a(\"ol\",[a(\"li\",[n._v(\"最长递增子序列：给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。\")])]),n._v(\" \"),a(\"p\",[n._v(\"dp[i]的定义：dp[i]表示i之前包括i的以nums[i]结尾最长上升子序列的长度\")]),n._v(\" \"),a(\"p\",[n._v(\"状态转移方程：位置i的最长升序子序列等于j从0到i-1各个位置的最长升序子序列 + 1 的最大值。所以：if (nums[i] > nums[j]) dp[i] = max(dp[i], dp[j] + 1);注意这里不是要dp[i] 与 dp[j] + 1进行比较，而是我们要取dp[j] + 1的最大值。\")]),n._v(\" \"),a(\"p\",[n._v(\"dp[i]的初始化：每一个i，对应的dp[i]（即最长上升子序列）起始大小至少都是1.\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public int lengthOfLIS(int[] nums) {\\n        int[] dp = new int[nums.length];\\n        Arrays.fill(dp, 1);\\n        for (int i = 0; i < dp.length; i++) {\\n            for (int j = 0; j < i; j++) {\\n                if (nums[i] > nums[j]) {\\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\\n                }\\n            }\\n        }\\n        int res = 0;\\n        for (int i = 0; i < dp.length; i++) {\\n            res = Math.max(res, dp[i]);\\n        }\\n        return res;\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"2\"}},[a(\"li\",[n._v(\"最长连续递增序列:给定一个未经排序的整数数组，找到最长且 连续递增的子序列，并返回该序列的长度。 输入：nums = [1,3,5,4,7] 输出：3 解释：最长连续递增序列是 [1,3,5], 长度为3。 尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。\")])]),n._v(\" \"),a(\"p\",[n._v(\"确定dp数组（dp table）以及下标的含义:dp[i]：以下标i为结尾的数组的连续递增的子序列长度为dp[i]。注意这里的定义，一定是以下标i为结尾，并不是说一定以下标0为起始位置。\")]),n._v(\" \"),a(\"p\",[n._v(\"确定递推公式:如果 nums[i + 1] > nums[i]，那么以 i+1 为结尾的数组的连续递增的子序列长度 一定等于 以i为结尾的数组的连续递增的子序列长度 + 1 。即：dp[i + 1] = dp[i] + 1;\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\" /**\\n     * 1.dp[i] 代表当前下标最大连续值\\n     * 2.递推公式 if（nums[i+1]>nums[i]） dp[i+1] = dp[i]+1\\n     * 3.初始化 都为1\\n     * 4.遍历方向，从其那往后\\n     * 5.结果推导 。。。。\\n     * @param nums\\n     * @return\\n     */\\n    public static int findLengthOfLCIS(int[] nums) {\\n        int[] dp = new int[nums.length];\\n        for (int i = 0; i < dp.length; i++) {\\n            dp[i] = 1;\\n        }\\n        int res = 1;\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            if (nums[i + 1] > nums[i]) {\\n                dp[i + 1] = dp[i] + 1;\\n            }\\n            res = res > dp[i + 1] ? res : dp[i + 1];\\n        }\\n        return res;\\n    }\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"21\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"22\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"23\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"3\"}},[a(\"li\",[n._v(\"最长重复子数组：给两个整数数组 A 和 B ，返回两个数组中公共的、长度最长的子数组的长度。示例：输入： A: [1,2,3,2,1] B: [3,2,1,4,7] 输出：3 解释： 长度最长的公共子数组是 [3, 2, 1] 。\")])]),n._v(\" \"),a(\"p\",[n._v(\"确定dp数组（dp table）以及下标的含义：dp[i][j] ：以下标i - 1为结尾的A，和以下标j - 1为结尾的B，最长重复子数组长度为dp[i][j]。\")]),n._v(\" \"),a(\"p\",[n._v(\"确定递推公式：根据dp[i][j]的定义，dp[i][j]的状态只能由dp[i - 1][j - 1]推导出来。即当A[i - 1] 和B[j - 1]相等的时候，dp[i][j] = dp[i - 1][j - 1] + 1;\")]),n._v(\" \"),a(\"p\",[n._v(\"初始化：原图很好，https://programmercarl.com/0718.%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84.html#_718-%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"// 版本一\\nclass Solution {\\n    public int findLength(int[] nums1, int[] nums2) {\\n        int result = 0;\\n        int[][] dp = new int[nums1.length + 1][nums2.length + 1];\\n        \\n        for (int i = 1; i < nums1.length + 1; i++) {\\n            for (int j = 1; j < nums2.length + 1; j++) {\\n                if (nums1[i - 1] == nums2[j - 1]) {\\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\\n                    result = Math.max(result, dp[i][j]);\\n                }\\n            }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"4\"}},[a(\"li\",[n._v('最长公共子序列：给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。一个字符串的子序列是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。例如，\"ace\" 是 \"abcde\" 的子序列，但 \"aec\" 不是 \"abcde\" 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。')])]),n._v(\" \"),a(\"p\",[n._v(\"确定dp数组（dp table）以及下标的含义：dp[i][j]：长度为[0, i - 1]的字符串text1与长度为[0, j - 1]的字符串text2的最长公共子序列为dp[i][j]\")]),n._v(\" \"),a(\"p\",[n._v(\"确定递推公式：主要就是两大情况： text1[i - 1] 与 text2[j - 1]相同，text1[i - 1] 与 text2[j - 1]不相同：如果text1[i - 1] 与 text2[j - 1]相同，那么找到了一个公共元素，所以dp[i][j] = dp[i - 1][j - 1] + 1;；如果text1[i - 1] 与 text2[j - 1]不相同，那就看看text1[0, i - 2]与text2[0, j - 1]的最长公共子序列 和 text1[0, i - 1]与text2[0, j - 2]的最长公共子序列，取最大的。即：dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public int longestCommonSubsequence(String text1, String text2) {\\n        int[][] dp = new int[text1.length() + 1][text2.length() + 1]; // 先对dp数组做初始化操作\\n        for (int i = 1 ; i <= text1.length() ; i++) {\\n            char char1 = text1.charAt(i - 1);\\n            for (int j = 1; j <= text2.length(); j++) {\\n                char char2 = text2.charAt(j - 1);\\n                if (char1 == char2) { // 开始列出状态转移方程\\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\\n                } else {\\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\\n                }\\n            }\\n        }\\n        return dp[text1.length()][text2.length()];\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"4\"}},[a(\"li\",[n._v(\"不相交的线(本质上和最长公共子序列一样)我们在两条独立的水平线上按给定的顺序写下 A 和 B 中的整数。现在，我们可以绘制一些连接两个数字 A[i] 和 B[j] 的直线，只要 A[i] == B[j]，且我们绘制的直线不与任何其他连线（非水平线）相交。以这种方法绘制线条，并返回我们可以绘制的最大连线数。\")])]),n._v(\" \"),a(\"p\",[n._v(\"分析：绘制一些连接两个数字 A[i] 和 B[j] 的直线，只要 A[i] == B[j]，且直线不能相交！直线不能相交，这就是说明在字符串A中 找到一个与字符串B相同的子序列，且这个子序列不能改变相对顺序，只要相对顺序不改变，链接相同数字的直线就不会相交。其实也就是说A和B的最长公共子序列是[1,4]，长度为2。 这个公共子序列指的是相对顺序不变（即数字4在字符串A中数字1的后面，那么数字4也应该在字符串B数字1的后面）\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"class Solution {\\n    public int longestCommonSubsequence(String text1, String text2) {\\n        int[][] dp = new int[text1.length() + 1][text2.length() + 1]; // 先对dp数组做初始化操作\\n        for (int i = 1 ; i <= text1.length() ; i++) {\\n            char char1 = text1.charAt(i - 1);\\n            for (int j = 1; j <= text2.length(); j++) {\\n                char char2 = text2.charAt(j - 1);\\n                if (char1 == char2) { // 开始列出状态转移方程\\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\\n                } else {\\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\\n                }\\n            }\\n        }\\n        return dp[text1.length()][text2.length()];\\n    }\\n}\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\")])]),a(\"ol\",{attrs:{start:\"5\"}},[a(\"li\",[n._v(\"最大子序和：给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。示例: 输入: [-2,1,-3,4,-1,2,1,-5,4] 输出: 6 解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\")])]),n._v(\" \"),a(\"p\",[n._v(\"确定dp数组（dp table）以及下标的含义：dp[i]：包括下标i之前的最大连续子序列和为dp[i]。\")]),n._v(\" \"),a(\"p\",[n._v(\"确定递推公式：dp[i]只有两个方向可以推出来：dp[i - 1] + nums[i]，即：nums[i]加入当前连续子序列和，nums[i]，即：从头开始计算当前连续子序列和一定是取最大的，所以dp[i] = max(dp[i - 1] + nums[i], nums[i]);\")]),n._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[n._v(\"   /**\\n     * 1.dp[i]代表当前下标对应的最大值\\n     * 2.递推公式 dp[i] = max (dp[i-1]+nums[i],nums[i]) res = max(res,dp[i])\\n     * 3.初始化 都为 0\\n     * 4.遍历方向，从前往后\\n     * 5.举例推导结果。。。\\n     *\\n     * @param nums\\n     * @return\\n     */\\n    public static int maxSubArray(int[] nums) {\\n        if (nums.length == 0) {\\n            return 0;\\n        }\\n\\n        int res = nums[0];\\n        int[] dp = new int[nums.length];\\n        dp[0] = nums[0];\\n        for (int i = 1; i < nums.length; i++) {\\n            dp[i] = Math.max(dp[i - 1] + nums[i], nums[i]);\\n            res = res > dp[i] ? res : dp[i];\\n        }\\n        return res;\\n    }\\n\")])]),n._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"21\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"22\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"23\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[n._v(\"24\")]),a(\"br\")])]),a(\"p\",[n._v(\"还有其他一些好题目\")]),n._v(\" \"),a(\"p\",[n._v(\"https://programmercarl.com/0392.%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97.html#_392-%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97\")])])}),[],!1,null,null,null);s.default=t.exports}}]);","extractedComments":[]}