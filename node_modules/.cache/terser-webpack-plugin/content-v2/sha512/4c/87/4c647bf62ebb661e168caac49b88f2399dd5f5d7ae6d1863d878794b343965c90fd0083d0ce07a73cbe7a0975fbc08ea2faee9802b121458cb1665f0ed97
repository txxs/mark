{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{406:function(v,e,_){\"use strict\";_.r(e);var a=_(13),t=Object(a.a)({},(function(){var v=this,e=v.$createElement,_=v._self._c||e;return _(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":v.$parent.slotKey}},[_(\"p\",[v._v(\"原文地址\")]),v._v(\" \"),_(\"p\",[v._v(\"https://blog.csdn.net/u011239443/article/details/60604017\")]),v._v(\" \"),_(\"p\",[v._v(\"原来倒排指的是把【文章-关键字】的关系颠倒为【关键字-文章】\")]),v._v(\" \"),_(\"p\",[v._v(\"倒排索引一般表示为一个关键词，然后是它的频度（出现的次数），位置（出现在哪一篇文章或网页中，及有关的日期，作者等信息），它相当于为互联网上几千亿页网页做了一个索引，好比一本书的目录、标签一般。读者想看哪一个主题相关的章节，直接根据目录即可找到相关的页面。不必再从书的第一页到最后一页，一页一页的查找。\")]),v._v(\" \"),_(\"p\",[v._v(\"倒排索引由两个部分组成：单词词典和倒排文件。\")]),v._v(\" \"),_(\"h3\",{attrs:{id:\"倒排文件\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#倒排文件\"}},[v._v(\"#\")]),v._v(\" 倒排文件\")]),v._v(\" \"),_(\"p\",[v._v(\"所有单词的倒排列表顺序的存储在磁盘的某个文件里，这个文件即被称为倒排文件，倒排文件是存储倒排索引的物理文件。\")]),v._v(\" \"),_(\"h3\",{attrs:{id:\"lucene倒排索引原理\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#lucene倒排索引原理\"}},[v._v(\"#\")]),v._v(\" Lucene倒排索引原理\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"取得关键词\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#取得关键词\"}},[v._v(\"#\")]),v._v(\" 取得关键词\")]),v._v(\" \"),_(\"p\",[v._v(\"由于lucene是基于关键词索引和查询的，首先我们要取得这两篇文章的关键词，通常我们需要如下处理措施：\")]),v._v(\" \"),_(\"p\",[v._v(\"a.我们现在有的是文章内容，即一个字符串，我们先要找出字符串中的所有单词，即分词。英文单词由于用空格分隔，比较好处理。中文单词间是连在一起的需要特殊的分词处理。\")]),v._v(\" \"),_(\"p\",[v._v(\"b.文章中的”in”, “once” “too”等词没有什么实际意义，中文中的“的”“是”等字通常也无具体含义，这些不代表概念的词可以过滤掉\")]),v._v(\" \"),_(\"p\",[v._v(\"c.用户通常希望查“He”时能把含“he”，“HE”的文章也找出来，所以所有单词需要统一大小写。\")]),v._v(\" \"),_(\"p\",[v._v(\"d.用户通常希望查“live”时能把含“lives”，“lived”的文章也找出来，所以需要把“lives”，“lived”还原成“live”\")]),v._v(\" \"),_(\"p\",[v._v(\"e.文章中的标点符号通常不表示某种概念，也可以过滤掉\")]),v._v(\" \"),_(\"p\",[v._v(\"在lucene中以上措施由Analyzer类完成。 经过上面处理后，\")]),v._v(\" \"),_(\"p\",[v._v(\"文章1的所有关键词为：[tom] [live] [guangzhou] [i] [live] [guangzhou]\")]),v._v(\" \"),_(\"p\",[v._v(\"文章2的所有关键词为：[he] [live] [shanghai]\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"建立倒排索引\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#建立倒排索引\"}},[v._v(\"#\")]),v._v(\" 建立倒排索引\")]),v._v(\" \"),_(\"p\",[v._v(\"有了关键词后，我们就可以建立倒排索引了。上面的对应关系是：“文章号”对“文章中所有关键词”。倒排索引把这个关系倒过来，变成: “关键词”对“拥有该关键词的所有文章号”。\")]),v._v(\" \"),_(\"p\",[v._v(\"文章1，2经过倒排后变成\")]),v._v(\" \"),_(\"p\",[v._v(\"关键词          文章号 　　\\nguangzhou        1 　　\\nhe               2 　　\\ni                1 　　\\nlive             1,2 　　\\nshanghai         2 　　\\ntom              1\")]),v._v(\" \"),_(\"p\",[v._v(\"通常仅知道关键词在哪些文章中出现还不够，我们还需要知道关键词在文章中出现次数和出现的位置，通常有两种位置：\")]),v._v(\" \"),_(\"p\",[v._v(\"a.字符位置，即记录该词是文章中第几个字符（优点是关键词亮显时定位快）；\")]),v._v(\" \"),_(\"p\",[v._v(\"b.关键词位置，即记录该词是文章中第几个关键词（优点是节约索引空间、词组（phase）查询快），lucene中记录的就是这种位置。\")]),v._v(\" \"),_(\"p\",[v._v(\"加上“出现频率”和“出现位置”信息后，我们的索引结构变为：\")]),v._v(\" \"),_(\"p\",[v._v(\"关键词            文章号[出现频率]              出现位置 　　\\nguangzhou           1[2]                      3，6 　　\\nhe                  2[1]                      1 　　\\ni                   1[1]                      4 　　\\nlive                1[2]                      2，5,\\n2[1]                      2 　　\\nshanghai            2[1]                      3 　　\\ntom                 1[1]                      1\")]),v._v(\" \"),_(\"p\",[v._v(\"以live 这行为例我们说明一下该结构：live在文章1中出现了2次，文章2中出现了一次，它的出现位置为“2,5,2”这表示什么呢？我们需要结合文章号和出现频率来分析，文章1中出现了2次，那么“2,5”就表示live在文章1中出现的两个位置，文章2中出现了一次，剩下的“2”就表示live是文章2中第 2个关键字。\")]),v._v(\" \"),_(\"p\",[v._v(\"以上就是lucene索引结构中最核心的部分。我们注意到关键字是按字符顺序排列的（lucene没有使用B树结构），因此lucene可以用二分搜索算法快速定位关键词。\")]),v._v(\" \"),_(\"h3\",{attrs:{id:\"实现\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现\"}},[v._v(\"#\")]),v._v(\" 实现\")]),v._v(\" \"),_(\"p\",[v._v(\"实现时，lucene将上面三列分别作为词典文件（Term Dictionary）、频率文件(frequencies)、位置文件 (positions)保存。其中词典文件不仅保存有每个关键词，还保留了指向频率文件和位置文件的指针，通过指针可以找到该关键字的频率信息和位置信息。\")]),v._v(\" \"),_(\"p\",[v._v(\"Lucene中使用了field的概念，用于表达信息所在位置（如标题中，文章中，url中），在建索引中，该field信息也记录在词典文件中，每个关键词都有一个field信息(因为每个关键字一定属于一个或多个field)。\")]),v._v(\" \"),_(\"h3\",{attrs:{id:\"压缩算法\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#压缩算法\"}},[v._v(\"#\")]),v._v(\" 压缩算法\")]),v._v(\" \"),_(\"p\",[v._v(\"为了减小索引文件的大小，Lucene对索引还使用了压缩技术。\")]),v._v(\" \"),_(\"p\",[v._v(\"首先，对词典文件中的关键词进行了压缩，关键词压缩为<前缀长度，后缀>，例如：当前词为“阿拉伯语”，上一个词为“阿拉伯”，那么“阿拉伯语”压缩为<3，语>。\")]),v._v(\" \"),_(\"p\",[v._v(\"其次大量用到的是对数字的压缩，数字只保存与上一个值的差值（这样可以减小数字的长度，进而减少保存该数字需要的字节数）。例如当前文章号是16389（不压缩要用3个字节保存），上一文章号是16382，压缩后保存7（只用一个字节）。\")])])}),[],!1,null,null,null);e.default=t.exports}}]);","extractedComments":[]}