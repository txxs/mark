{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{452:function(s,t,a){\"use strict\";a.r(t);var e=a(13),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"redis-database\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-database\"}},[s._v(\"#\")]),s._v(\" Redis-Database\")]),s._v(\" \"),a(\"p\",[s._v(\"Redis 如何表示一个数据库？数据库操作是如何实现的？\")]),s._v(\" \"),a(\"blockquote\",[a(\"p\",[s._v(\"这边文章是基于源码来让我们理解 Redis 的，不管是我们自己下载 redis 还是直接在 Github 上看源码，我们先要了解下 redis 更目录下的重要目录\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[s._v(\"src\")]),s._v(\"：用C编写的Redis实现\")]),s._v(\" \"),a(\"li\",[a(\"code\",[s._v(\"tests\")]),s._v(\"：包含在Tcl中实现的单元测试\")]),s._v(\" \"),a(\"li\",[a(\"code\",[s._v(\"deps\")]),s._v(\"：包含Redis使用的库。编译Redis所需的所有文件都在此目录中\")])]),s._v(\" \"),a(\"p\",[s._v(\"我们深入学习只需要看 src 目录就可以了。\")])]),s._v(\" \"),a(\"h2\",{attrs:{id:\"数据库结构\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据库结构\"}},[s._v(\"#\")]),s._v(\" 数据库结构\")]),s._v(\" \"),a(\"p\",[s._v(\"理解程序如何工作的最简单方法是理解它使用的数据结构。 从 \"),a(\"code\",[s._v(\"redis/src\")]),s._v(\" 目录下可以看到 server 的源码文件（基于 \"),a(\"code\",[s._v(\"redis-6.0.5\")]),s._v(\"，redis3.0 叫 \"),a(\"code\",[s._v(\"redis.c\")]),s._v(\" 和 \"),a(\"code\",[s._v(\"redis.h\")]),s._v(\"）。\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://tva1.sinaimg.cn/large/007S8ZIlly1gfrqvz1u4uj31ci04yq3l.jpg\",alt:\"\"}})]),s._v(\" \"),a(\"p\",[s._v(\"Redis的主头文件 \"),a(\"code\",[s._v(\"server.h\")]),s._v(\"  中定义了各种结构体，比如Redis 对象\"),a(\"code\",[s._v(\"redisObject\")]),s._v(\" 、存储结构\"),a(\"code\",[s._v(\"redisDb\")]),s._v(\"、客户端\"),a(\"code\",[s._v(\"client\")]),s._v(\" 等等。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-c line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Redis database representation. There are multiple databases identified\\n * by integers from 0 (the default database) up to the max configured\\n * database. The database number is the 'id' field in the structure. */\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"typedef\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"struct\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"redisDb\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 数据库键空间，保存着数据库中的所有键值对\")]),s._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"dict\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"                 \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* The keyspace for this DB */\")]),s._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 键的过期时间，字典的键为键，字典的值为过期事件 UNIX 时间戳\")]),s._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"expires\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"              \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Timeout of keys with a timeout set */\")]),s._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 正处于阻塞状态的键\")]),s._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"blocking_keys\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Keys with clients waiting for data (BLPOP)*/\")]),s._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 可以解除阻塞的键\")]),s._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"ready_keys\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"           \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Blocked keys that received a PUSH */\")]),s._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 正在被 WATCH 命令监视的键\")]),s._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"watched_keys\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"         \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* WATCHED keys for MULTI/EXEC CAS */\")]),s._v(\"\\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 数据库号码\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" id\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"                     \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Database ID */\")]),s._v(\"\\n \\t \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 数据库的键的平均 TTL ，统计信息\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" avg_ttl\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"          \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Average TTL, just for stats */\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"unsigned\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" expires_cursor\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Cursor of the active expire cycle. */\")]),s._v(\"\\n    list \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"defrag_later\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"         \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* List of key names to attempt to defrag one by one, gradually. */\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" redisDb\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),a(\"br\")])]),a(\"p\",[s._v(\"所有的服务器配置均定义在 \"),a(\"code\",[s._v(\"server\")]),s._v(\" 结构体中\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-c line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"struct\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"redisServer\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* General */\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"pid_t\")]),s._v(\" pid\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"                  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Main process pid. */\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"configfile\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"           \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Absolute config file path, or NULL */\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"executable\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"           \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Absolute executable file path. */\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"exec_argv\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"           \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Executable argv vector (copy). */\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" dynamic_hz\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"             \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Change hz value depending on # of clients. */\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" config_hz\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"              \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Configured HZ value. May be different than\\n                                   the actual 'hz' field value if dynamic-hz\\n                                   is enabled. */\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" hz\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"                     \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* serverCron() calls frequency in hertz */\")]),s._v(\"\\n    redisDb \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"db\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"             \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//\")]),s._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"commands\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"             \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Command table */\")]),s._v(\"\\n    dict \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"orig_commands\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Command table before command renaming. */\")]),s._v(\"\\n    aeEventLoop \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"el\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"_Atomic\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"unsigned\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" lruclock\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* Clock for LRU eviction */\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" shutdown_asap\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"          \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/* SHUTDOWN needed ASAP */\")]),s._v(\"\\n  \\n  \\t\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//......\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),a(\"br\")])]),a(\"h2\",{attrs:{id:\"数据库键空间\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据库键空间\"}},[s._v(\"#\")]),s._v(\" 数据库键空间\")]),s._v(\" \"),a(\"p\",[s._v(\"因为 Redis 是一个键值对数据库（key-value pairs database）， 所以它的数据库本身也是一个字典（俗称 keyspace）：\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"字典的键是一个字符串对象。\")]),s._v(\" \"),a(\"li\",[s._v(\"字典的值则可以是包括字符串、列表、哈希表、集合或有序集在内的任意一种 Redis 类型对象。\")])]),s._v(\" \"),a(\"p\",[s._v(\"在 \"),a(\"code\",[s._v(\"redisDb\")]),s._v(\" 结构的 \"),a(\"code\",[s._v(\"dict\")]),s._v(\" 属性中，保存着数据库的所有键值对数据。\")]),s._v(\" \"),a(\"p\",[a(\"code\",[s._v(\"redis/src/dict.h\")]),s._v(\" 是一个非阻塞哈希表的实现，包含字典的结构体定义\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-c line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-c\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"typedef\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"struct\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"dict\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    dictType \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"type\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"   \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 类型特定函数\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"*\")]),s._v(\"privdata\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"   \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 私有数据\")]),s._v(\"\\n    dictht ht\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"     \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 哈希表\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" rehashidx\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"  \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// rehash 索引,当 rehash 不在进行时，值为 -1\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"unsigned\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\" iterators\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 当前运行的迭代器的数量\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" dict\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\")])]),a(\"p\",[s._v(\"Redis 的字典使用哈希表作为其底层实现。dict 类型使用的两个指向哈希表的指针，其中 0 号哈希表（ht[0]）主要用于存储数据库的所有键值，而1号哈希表主要用于程序对 0 号哈希表进行 rehash 时使用。所以 Redis 中查找一个 key，其实就是对进行该 dict 结构中的 ht[0] 进行查找操作。\")]),s._v(\" \"),a(\"p\",[s._v(\"既然是哈希，那当多个键哈希之后为同一个值，也就是哈希碰撞的时候，怎么办呢？\")]),s._v(\" \"),a(\"p\",[s._v(\"Redis 解决哈希碰撞的方式 和 Java 中的 HashMap 类似，采取链表的方式来存储多个哈希碰撞的键。也就是说，当根据 key 的哈希值找到该列表后，如果列表的长度大于1，那么我们需要遍历该链表来找到我们所查找的 key。当然，一般情况下链表长度都为是1，所以时间复杂度可看作o(1)\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"redis-的-key-是如何寻址的\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-的-key-是如何寻址的\"}},[s._v(\"#\")]),s._v(\" Redis 的 Key 是如何寻址的？\")]),s._v(\" \"),a(\"ol\",[a(\"li\",[s._v(\"当拿到一个key后， redis 先判断当前库的0号哈希表是否为空，即：if (dict->ht[0].size == 0)。如果为true直接返回NULL。\")]),s._v(\" \"),a(\"li\",[s._v(\"判断该0号哈希表是否需要rehash，因为如果在进行rehash，那么两个表中者有可能存储该key。如果正在进行rehash，将调用一次_dictRehashStep方法，_dictRehashStep 用于对数据库字典、以及哈希键的字典进行被动 rehash，这里不作赘述。\")]),s._v(\" \"),a(\"li\",[s._v(\"计算哈希表，根据当前字典与key进行哈希值的计算。\")]),s._v(\" \"),a(\"li\",[s._v(\"根据哈希值与当前字典计算哈希表的索引值。\")]),s._v(\" \"),a(\"li\",[s._v(\"根据索引值在哈希表中取出链表，遍历该链表找到key的位置。一般情况，该链表长度为1。\")]),s._v(\" \"),a(\"li\",[s._v(\"当 ht[0] 查找完了之后，再进行了次rehash判断，如果未在rehashing，则直接结束，否则对ht[1]重复345步骤。\")])]),s._v(\" \"),a(\"p\",[s._v(\"到此我们就找到了key在内存中的位置了。\")]),s._v(\" \"),a(\"p\",[s._v(\"https://redisbook.readthedocs.io/en/latest/index.html\")])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}