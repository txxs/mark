{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{483:function(s,t,a){\"use strict\";a.r(t);var n=a(13),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[a(\"p\",[s._v(\"我们在做二叉树题目时候，第一想到的应该是用 \"),a(\"strong\",[s._v(\"递归\")]),s._v(\" 来解决。\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"前、中、后序遍历\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#前、中、后序遍历\"}},[s._v(\"#\")]),s._v(\" 前、中、后序遍历\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"翻转二叉树-226\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#翻转二叉树-226\"}},[s._v(\"#\")]),s._v(\" 翻转二叉树（226）\")]),s._v(\" \"),a(\"blockquote\",[a(\"p\",[s._v(\"翻转一棵二叉树。\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"示例：\")])]),s._v(\" \"),a(\"p\",[s._v(\"输入：\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v(\"     4\\n   /   \\\\\\n  2     7\\n / \\\\   / \\\\\\n1   3 6   9\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\")])]),a(\"p\",[s._v(\"输出：\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v(\"     4\\n   /   \\\\\\n  7     2\\n / \\\\   / \\\\\\n9   6 3   1\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\")])]),a(\"p\",[s._v(\"思路：从根节点开始，递归地对树进行遍历，并从叶子节点先开始翻转\")])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://pic.leetcode-cn.com/0f91f7cbf5740de86e881eb7427c6c3993f4eca3624ca275d71e21c5e3e2c550-226_2.gif\",alt:\"226_2.gif\"}})]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"TreeNode\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"invertTree\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"TreeNode\")]),s._v(\" root\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"if\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"root \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"==\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"null\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" root\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"TreeNode\")]),s._v(\" left \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"invertTree\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"root\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"left\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"TreeNode\")]),s._v(\" right \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"invertTree\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"root\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"right\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    root\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"left \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" right\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    root\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"right \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" left\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" root\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\")])]),a(\"h3\",{attrs:{id:\"对称二叉树-101\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对称二叉树-101\"}},[s._v(\"#\")]),s._v(\" 对称二叉树（101）\")]),s._v(\" \"),a(\"blockquote\",[a(\"p\",[s._v(\"给定一个二叉树，检查它是否是镜像对称的。\")]),s._v(\" \"),a(\"p\",[s._v(\"例如，二叉树 [1,2,2,3,4,4,3] 是对称的。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",[a(\"code\",[s._v(\"    1\\n   / \\\\\\n  2   2\\n / \\\\ / \\\\\\n3  4 4  3\\n\")])])]),a(\"p\",[s._v(\"但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",[a(\"code\",[s._v(\"    1\\n   / \\\\\\n  2   2\\n   \\\\   \\\\\\n   3    3\\n\")])])])]),s._v(\" \"),a(\"h3\",{attrs:{id:\"二叉树的最大深度\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉树的最大深度\"}},[s._v(\"#\")]),s._v(\" \"),a(\"a\",{attrs:{href:\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\" 二叉树的最大深度\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"blockquote\",[a(\"p\",[s._v(\"给定一个二叉树，找出其最大深度。\")]),s._v(\" \"),a(\"p\",[s._v(\"二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\")]),s._v(\" \"),a(\"p\",[s._v(\"说明: 叶子节点是指没有子节点的节点。\")]),s._v(\" \"),a(\"p\",[s._v(\"示例：\\n给定二叉树 [3,9,20,null,null,15,7]，\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",[a(\"code\",[s._v(\"    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7\\n\")])])]),a(\"p\",[s._v(\"返回它的最大深度 3 。\")])]),s._v(\" \"),a(\"h3\",{attrs:{id:\"合并二叉树\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#合并二叉树\"}},[s._v(\"#\")]),s._v(\" \"),a(\"a\",{attrs:{href:\"https://leetcode-cn.com/problems/merge-two-binary-trees/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"合并二叉树\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"blockquote\",[a(\"p\",[s._v(\"给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。\")]),s._v(\" \"),a(\"p\",[s._v(\"你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。\")]),s._v(\" \"),a(\"p\",[s._v(\"示例 1:\")]),s._v(\" \"),a(\"p\",[s._v(\"输入:\\nTree 1                     Tree 2\"),a(\"br\"),s._v(\"\\n1                         2\"),a(\"br\"),s._v(\"\\n/ \\\\                       / \\\\\"),a(\"br\"),s._v(\"\\n3   2                     1   3\"),a(\"br\"),s._v(\"\\n/                           \\\\   \\\\\"),a(\"br\"),s._v(\"\\n5                             4   7\"),a(\"br\"),s._v(\"\\n输出:\\n合并后的树:\\n3\\n/ \"),a(\"br\"),s._v(\"\\n4   5\\n/ \\\\   \\\\\\n5   4   7\\n注意: 合并必须从两个树的根节点开始。\")])]),s._v(\" \"),a(\"h3\",{attrs:{id:\"二叉树的直径\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉树的直径\"}},[s._v(\"#\")]),s._v(\" \"),a(\"a\",{attrs:{href:\"https://leetcode-cn.com/problems/diameter-of-binary-tree/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\" 二叉树的直径\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"blockquote\",[a(\"p\",[s._v(\"给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\")]),s._v(\" \"),a(\"p\",[s._v(\"示例 :\\n给定二叉树\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",[a(\"code\",[s._v(\"      1\\n     / \\\\\\n    2   3\\n   / \\\\     \\n  4   5    \\n\")])])]),a(\"p\",[s._v(\"返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\")]),s._v(\" \"),a(\"p\",[s._v(\"注意：两结点之间的路径长度是以它们之间边的数目表示。\")])]),s._v(\" \"),a(\"h3\",{attrs:{id:\"二叉树的层序遍历\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二叉树的层序遍历\"}},[s._v(\"#\")]),s._v(\" \"),a(\"a\",{attrs:{href:\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"二叉树的层序遍历\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"blockquote\",[a(\"p\",[s._v(\"给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。\")]),s._v(\" \"),a(\"p\",[s._v(\"示例：\\n二叉树：[3,9,20,null,null,15,7],\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",[a(\"code\",[s._v(\"    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7\\n\")])])]),a(\"p\",[s._v(\"返回其层序遍历结果：\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v(\"[\\n  [3],\\n  [9,20],\\n  [15,7]\\n]\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\")])])]),s._v(\" \"),a(\"h3\",{attrs:{id:\"不同的二叉搜索树\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#不同的二叉搜索树\"}},[s._v(\"#\")]),s._v(\" \"),a(\"a\",{attrs:{href:\"https://leetcode-cn.com/problems/unique-binary-search-trees/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"不同的二叉搜索树\"),a(\"OutboundLink\")],1)]),s._v(\" \"),a(\"blockquote\",[a(\"p\",[s._v(\"给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。\")]),s._v(\" \"),a(\"p\",[s._v(\"示例 1：\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\",alt:\"img\"}})]),s._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v(\"输入：n = 3\\n输出：5\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])]),a(\"p\",[s._v(\"示例 2：\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[s._v(\"输入：n = 1\\n输出：1\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}