{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[198],{591:function(e,v,_){\"use strict\";_.r(v);var s=_(13),a=Object(s.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[_(\"p\",[e._v(\"Redis 作为内存数据库，拥有非常高的性能，单个实例的QPS能够达到10W左右。但我们在使用Redis时，经常时不时会出现访问延迟很大的情况，如果你不知道Redis的内部实现原理，在排查问题时就会一头雾水。\")]),e._v(\" \"),_(\"p\",[e._v(\"很多时候，Redis出现访问延迟变大，都与我们的使用不当或运维不合理导致的。\")]),e._v(\" \"),_(\"p\",[e._v(\"这篇文章我们就来分析一下Redis在使用过程中，经常会遇到的延迟问题以及如何定位和分析。\")]),e._v(\" \"),_(\"h2\",{attrs:{id:\"使用复杂度高的命令\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用复杂度高的命令\"}},[e._v(\"#\")]),e._v(\" 使用复杂度高的命令\")]),e._v(\" \"),_(\"p\",[e._v(\"如果在使用Redis时，发现访问延迟突然增大，如何进行排查？\")]),e._v(\" \"),_(\"p\",[e._v(\"首先，第一步，建议你去查看一下Redis的慢日志。Redis提供了慢日志命令的统计功能，我们通过以下设置，就可以查看有哪些命令在执行时延迟比较大。\")]),e._v(\" \"),_(\"p\",[e._v(\"首先设置Redis的慢日志阈值，只有超过阈值的命令才会被记录，这里的单位是微妙，例如设置慢日志的阈值为5毫秒，同时设置只保留最近1000条慢日志记录：\")]),e._v(\" \"),_(\"div\",{staticClass:\"language- line-numbers-mode\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[e._v(\"# 命令执行超过5毫秒记录慢日志\\nCONFIG SET slowlog-log-slower-than 5000\\n# 只保留最近1000条慢日志\\nCONFIG SET slowlog-max-len 1000\\n\")])]),e._v(\" \"),_(\"div\",{staticClass:\"line-numbers-wrapper\"},[_(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),_(\"br\")])]),_(\"p\",[e._v(\"设置完成之后，所有执行的命令如果延迟大于5毫秒，都会被Redis记录下来，我们执行\"),_(\"code\",[e._v(\"SLOWLOG get 5\")]),e._v(\"查询最近5条慢日志：\")]),e._v(\" \"),_(\"div\",{staticClass:\"language- line-numbers-mode\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[e._v('127.0.0.1:6379> SLOWLOG get 5\\n1) 1) (integer) 32693       # 慢日志ID\\n   2) (integer) 1593763337  # 执行时间\\n   3) (integer) 5299        # 执行耗时(微妙)\\n   4) 1) \"LRANGE\"           # 具体执行的命令和参数\\n      2) \"user_list_2000\"\\n      3) \"0\"\\n      4) \"-1\"\\n2) 1) (integer) 32692\\n   2) (integer) 1593763337\\n   3) (integer) 5044\\n   4) 1) \"GET\"\\n      2) \"book_price_1000\"\\n...\\n')])]),e._v(\" \"),_(\"div\",{staticClass:\"line-numbers-wrapper\"},[_(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"10\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"11\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"12\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"13\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"14\")]),_(\"br\")])]),_(\"p\",[e._v(\"通过查看慢日志记录，我们就可以知道在什么时间执行哪些命令比较耗时，如果你的业务\"),_(\"strong\",[e._v(\"经常使用\"),_(\"code\",[e._v(\"O(n)\")]),e._v(\"以上复杂度的命令\")]),e._v(\"，例如\"),_(\"code\",[e._v(\"sort\")]),e._v(\"、\"),_(\"code\",[e._v(\"sunion\")]),e._v(\"、\"),_(\"code\",[e._v(\"zunionstore\")]),e._v(\"，或者在执行\"),_(\"code\",[e._v(\"O(n)\")]),e._v(\"命令时操作的数据量比较大，这些情况下Redis处理数据时就会很耗时。\")]),e._v(\" \"),_(\"p\",[e._v(\"如果你的服务请求量并不大，但Redis实例的CPU使用率很高，很有可能是使用了复杂度高的命令导致的。\")]),e._v(\" \"),_(\"p\",[e._v(\"解决方案就是，不使用这些复杂度较高的命令，并且一次不要获取太多的数据，每次尽量操作少量的数据，让Redis可以及时处理返回。\")]),e._v(\" \"),_(\"h2\",{attrs:{id:\"存储大key\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#存储大key\"}},[e._v(\"#\")]),e._v(\" 存储大key\")]),e._v(\" \"),_(\"p\",[e._v(\"如果查询慢日志发现，并不是复杂度较高的命令导致的，例如都是\"),_(\"code\",[e._v(\"SET\")]),e._v(\"、\"),_(\"code\",[e._v(\"DELETE\")]),e._v(\"操作出现在慢日志记录中，那么你就要怀疑是否存在Redis写入了大key的情况。\")]),e._v(\" \"),_(\"p\",[e._v(\"Redis在写入数据时，需要为新的数据分配内存，当从Redis中删除数据时，它会释放对应的内存空间。\")]),e._v(\" \"),_(\"p\",[e._v(\"如果一个key写入的数据非常大，Redis在\"),_(\"strong\",[e._v(\"分配内存时也会比较耗时\")]),e._v(\"。同样的，当删除这个key的数据时，\"),_(\"strong\",[e._v(\"释放内存也会耗时比较久\")]),e._v(\"。\")]),e._v(\" \"),_(\"p\",[e._v(\"你需要检查你的业务代码，是否存在写入大key的情况，需要评估写入数据量的大小，业务层应该避免一个key存入过大的数据量。\")]),e._v(\" \"),_(\"p\",[e._v(\"那么有没有什么办法可以扫描现在Redis中是否存在大key的数据吗？\")]),e._v(\" \"),_(\"p\",[e._v(\"Redis也提供了扫描大key的方法：\")]),e._v(\" \"),_(\"div\",{staticClass:\"language- line-numbers-mode\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[e._v(\"redis-cli -h $host -p $port --bigkeys -i 0.01\\n\")])]),e._v(\" \"),_(\"div\",{staticClass:\"line-numbers-wrapper\"},[_(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),_(\"br\")])]),_(\"p\",[e._v(\"使用上面的命令就可以扫描出整个实例key大小的分布情况，它是以类型维度来展示的。\")]),e._v(\" \"),_(\"p\",[e._v(\"需要注意的是当我们在线上实例进行大key扫描时，Redis的QPS会突增，为了降低扫描过程中对Redis的影响，我们需要控制扫描的频率，使用\"),_(\"code\",[e._v(\"-i\")]),e._v(\"参数控制即可，它表示扫描过程中每次扫描的时间间隔，单位是秒。\")]),e._v(\" \"),_(\"p\",[e._v(\"使用这个命令的原理，其实就是Redis在内部执行\"),_(\"code\",[e._v(\"scan\")]),e._v(\"命令，遍历所有key，然后针对不同类型的key执行\"),_(\"code\",[e._v(\"strlen\")]),e._v(\"、\"),_(\"code\",[e._v(\"llen\")]),e._v(\"、\"),_(\"code\",[e._v(\"hlen\")]),e._v(\"、\"),_(\"code\",[e._v(\"scard\")]),e._v(\"、\"),_(\"code\",[e._v(\"zcard\")]),e._v(\"来获取字符串的长度以及容器类型(list/dict/set/zset)的元素个数。\")]),e._v(\" \"),_(\"p\",[e._v(\"而对于容器类型的key，只能扫描出元素最多的key，但元素最多的key不一定占用内存最多，这一点需要我们注意下。不过使用这个命令一般我们是可以对整个实例中key的分布情况有比较清晰的了解。\")]),e._v(\" \"),_(\"p\",[e._v(\"针对大key的问题，Redis官方在4.0版本推出了\"),_(\"code\",[e._v(\"lazy-free\")]),e._v(\"的机制，用于异步释放大key的内存，降低对Redis性能的影响。即使这样，我们也不建议使用大key，大key在集群的迁移过程中，也会影响到迁移的性能，这个后面在介绍集群相关的文章时，会再详细介绍到。\")]),e._v(\" \"),_(\"h2\",{attrs:{id:\"集中过期\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集中过期\"}},[e._v(\"#\")]),e._v(\" 集中过期\")]),e._v(\" \"),_(\"p\",[e._v(\"有时你会发现，平时在使用Redis时没有延时比较大的情况，但在某个时间点突然出现一波延时，而且\"),_(\"strong\",[e._v(\"报慢的时间点很有规律，例如某个整点，或者间隔多久就会发生一次\")]),e._v(\"。\")]),e._v(\" \"),_(\"p\",[e._v(\"如果出现这种情况，就需要考虑是否存在大量key集中过期的情况。\")]),e._v(\" \"),_(\"p\",[e._v(\"如果有大量的key在某个固定时间点集中过期，在这个时间点访问Redis时，就有可能导致延迟增加。\")]),e._v(\" \"),_(\"p\",[e._v(\"Redis的过期策略采用主动过期+懒惰过期两种策略：\")]),e._v(\" \"),_(\"ul\",[_(\"li\",[e._v(\"主动过期：Redis内部维护一个定时任务，默认每隔100毫秒会从过期字典中随机取出20个key，删除过期的key，如果过期key的比例超过了25%，则继续获取20个key，删除过期的key，循环往复，直到过期key的比例下降到25%或者这次任务的执行耗时超过了25毫秒，才会退出循环\")]),e._v(\" \"),_(\"li\",[e._v(\"懒惰过期：只有当访问某个key时，才判断这个key是否已过期，如果已经过期，则从实例中删除\")])]),e._v(\" \"),_(\"p\",[e._v(\"注意，\"),_(\"strong\",[e._v(\"Redis的主动过期的定时任务，也是在Redis主线程中执行的\")]),e._v(\"，也就是说如果在执行主动过期的过程中，出现了需要大量删除过期key的情况，那么在业务访问时，必须等这个过期任务执行结束，才可以处理业务请求。此时就会出现，业务访问延时增大的问题，最大延迟为25毫秒。\")]),e._v(\" \"),_(\"p\",[e._v(\"而且这个访问延迟的情况，\"),_(\"strong\",[e._v(\"不会记录在慢日志里\")]),e._v(\"。慢日志中\"),_(\"strong\",[e._v(\"只记录真正执行某个命令的耗时\")]),e._v(\"，Redis主动过期策略执行在操作命令之前，如果操作命令耗时达不到慢日志阈值，它是不会计算在慢日志统计中的，但我们的业务却感到了延迟增大。\")]),e._v(\" \"),_(\"p\",[e._v(\"此时你需要检查你的业务，是否真的存在集中过期的代码，一般集中过期使用的命令是\"),_(\"code\",[e._v(\"expireat\")]),e._v(\"或\"),_(\"code\",[e._v(\"pexpireat\")]),e._v(\"命令，在代码中搜索这个关键字就可以了。\")]),e._v(\" \"),_(\"p\",[e._v(\"如果你的业务确实需要集中过期掉某些key，又不想导致Redis发生抖动，有什么优化方案？\")]),e._v(\" \"),_(\"p\",[e._v(\"解决方案是，\"),_(\"strong\",[e._v(\"在集中过期时增加一个随机时间，把这些需要过期的key的时间打散即可。\")])]),e._v(\" \"),_(\"p\",[e._v(\"伪代码可以这么写：\")]),e._v(\" \"),_(\"div\",{staticClass:\"language- line-numbers-mode\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[e._v(\"# 在过期时间点之后的5分钟内随机过期掉\\nredis.expireat(key, expire_time + random(300))\\n\")])]),e._v(\" \"),_(\"div\",{staticClass:\"line-numbers-wrapper\"},[_(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),_(\"br\"),_(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),_(\"br\")])]),_(\"p\",[e._v(\"这样Redis在处理过期时，不会因为集中删除key导致压力过大，阻塞主线程。\")]),e._v(\" \"),_(\"p\",[e._v(\"另外，除了业务使用需要注意此问题之外，还可以通过运维手段来及时发现这种情况。\")]),e._v(\" \"),_(\"p\",[e._v(\"做法是我们需要把Redis的各项运行数据监控起来，执行\"),_(\"code\",[e._v(\"info\")]),e._v(\"可以拿到所有的运行数据，在这里我们需要重点关注\"),_(\"code\",[e._v(\"expired_keys\")]),e._v(\"这一项，它代表整个实例到目前为止，累计删除过期key的数量。\")]),e._v(\" \"),_(\"p\",[e._v(\"我们需要对这个指标监控，当在\"),_(\"strong\",[e._v(\"很短时间内这个指标出现突增\")]),e._v(\"时，需要及时报警出来，然后与业务报慢的时间点对比分析，确认时间是否一致，如果一致，则可以认为确实是因为这个原因导致的延迟增大。\")]),e._v(\" \"),_(\"h2\",{attrs:{id:\"实例内存达到上限\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实例内存达到上限\"}},[e._v(\"#\")]),e._v(\" 实例内存达到上限\")]),e._v(\" \"),_(\"p\",[e._v(\"有时我们把Redis当做纯缓存使用，就会给实例设置一个内存上限\"),_(\"code\",[e._v(\"maxmemory\")]),e._v(\"，然后开启LRU淘汰策略。\")]),e._v(\" \"),_(\"p\",[e._v(\"当实例的内存达到了\"),_(\"code\",[e._v(\"maxmemory\")]),e._v(\"后，你会发现之后的每次写入新的数据，有可能变慢了。\")]),e._v(\" \"),_(\"p\",[e._v(\"导致变慢的原因是，当Redis内存达到\"),_(\"code\",[e._v(\"maxmemory\")]),e._v(\"后，每次写入新的数据之前，必须先踢出一部分数据，让内存维持在\"),_(\"code\",[e._v(\"maxmemory\")]),e._v(\"之下。\")]),e._v(\" \"),_(\"p\",[e._v(\"这个踢出旧数据的逻辑也是需要消耗时间的，而具体耗时的长短，要取决于配置的淘汰策略：\")]),e._v(\" \"),_(\"ul\",[_(\"li\",[e._v(\"allkeys-lru：不管key是否设置了过期，淘汰最近最少访问的key\")]),e._v(\" \"),_(\"li\",[e._v(\"volatile-lru：只淘汰最近最少访问并设置过期的key\")]),e._v(\" \"),_(\"li\",[e._v(\"allkeys-random：不管key是否设置了过期，随机淘汰\")]),e._v(\" \"),_(\"li\",[e._v(\"volatile-random：只随机淘汰有设置过期的key\")]),e._v(\" \"),_(\"li\",[e._v(\"allkeys-ttl：不管key是否设置了过期，淘汰即将过期的key\")]),e._v(\" \"),_(\"li\",[e._v(\"noeviction：不淘汰任何key，满容后再写入直接报错\")]),e._v(\" \"),_(\"li\",[e._v(\"allkeys-lfu：不管key是否设置了过期，淘汰访问频率最低的key（4.0+支持）\")]),e._v(\" \"),_(\"li\",[e._v(\"volatile-lfu：只淘汰访问频率最低的过期key（4.0+支持）\")])]),e._v(\" \"),_(\"p\",[e._v(\"具体使用哪种策略，需要根据业务场景来决定。\")]),e._v(\" \"),_(\"p\",[e._v(\"我们最常使用的一般是\"),_(\"code\",[e._v(\"allkeys-lru\")]),e._v(\"或\"),_(\"code\",[e._v(\"volatile-lru\")]),e._v(\"策略，它们的处理逻辑是，每次从实例中随机取出一批key（可配置），然后淘汰一个最少访问的key，之后把剩下的key暂存到一个池子中，继续随机取出一批key，并与之前池子中的key比较，再淘汰一个最少访问的key。以此循环，直到内存降到\"),_(\"code\",[e._v(\"maxmemory\")]),e._v(\"之下。\")]),e._v(\" \"),_(\"p\",[e._v(\"如果使用的是\"),_(\"code\",[e._v(\"allkeys-random\")]),e._v(\"或\"),_(\"code\",[e._v(\"volatile-random\")]),e._v(\"策略，那么就会快很多，因为是随机淘汰，那么就少了比较key访问频率时间的消耗了，随机拿出一批key后直接淘汰即可，因此这个策略要比上面的LRU策略执行快一些。\")]),e._v(\" \"),_(\"p\",[e._v(\"但以上这些逻辑都是在访问Redis时，\"),_(\"strong\",[e._v(\"真正命令执行之前执行的\")]),e._v(\"，也就是它会影响我们访问Redis时执行的命令。\")]),e._v(\" \"),_(\"p\",[e._v(\"另外，如果此时Redis实例中有存储大key，那么\"),_(\"strong\",[e._v(\"在淘汰大key释放内存时，这个耗时会更加久，延迟更大\")]),e._v(\"，这需要我们格外注意。\")]),e._v(\" \"),_(\"p\",[e._v(\"如果你的业务访问量非常大，并且必须设置\"),_(\"code\",[e._v(\"maxmemory\")]),e._v(\"限制实例的内存上限，同时面临淘汰key导致延迟增大的的情况，要想缓解这种情况，除了上面说的避免存储大key、使用随机淘汰策略之外，也可以考虑\"),_(\"strong\",[e._v(\"拆分实例\")]),e._v(\"的方法来缓解，拆分实例可以把一个实例淘汰key的压力\"),_(\"strong\",[e._v(\"分摊到多个实例\")]),e._v(\"上，可以在一定程度降低延迟。\")]),e._v(\" \"),_(\"h2\",{attrs:{id:\"fork耗时严重\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fork耗时严重\"}},[e._v(\"#\")]),e._v(\" fork耗时严重\")]),e._v(\" \"),_(\"p\",[e._v(\"如果你的Redis开启了自动生成RDB和AOF重写功能，那么有可能在后台生成RDB和AOF重写时导致Redis的访问延迟增大，而等这些任务执行完毕后，延迟情况消失。\")]),e._v(\" \"),_(\"p\",[e._v(\"遇到这种情况，一般就是执行生成RDB和AOF重写任务导致的。\")]),e._v(\" \"),_(\"p\",[e._v(\"生成RDB和AOF都需要父进程\"),_(\"code\",[e._v(\"fork\")]),e._v(\"出一个子进程进行数据的持久化，\"),_(\"strong\",[e._v(\"在\"),_(\"code\",[e._v(\"fork\")]),e._v(\"执行过程中，父进程需要拷贝内存页表给子进程，如果整个实例内存占用很大，那么需要拷贝的内存页表会比较耗时，此过程会消耗大量的CPU资源，在完成\"),_(\"code\",[e._v(\"fork\")]),e._v(\"之前，整个实例会被阻塞住，无法处理任何请求，如果此时CPU资源紧张，那么\"),_(\"code\",[e._v(\"fork\")]),e._v(\"的时间会更长，甚至达到秒级。这会严重影响Redis的性能\")]),e._v(\"。\")]),e._v(\" \"),_(\"p\",[e._v(\"具体原理也可以参考我之前写的文章：\"),_(\"a\",{attrs:{href:\"http://kaito-kidd.com/2020/06/29/redis-persistence-rdb-aof/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Redis持久化是如何做的？RDB和AOF对比分析\"),_(\"OutboundLink\")],1),e._v(\"。\")]),e._v(\" \"),_(\"p\",[e._v(\"我们可以执行\"),_(\"code\",[e._v(\"info\")]),e._v(\"命令，查看最后一次\"),_(\"code\",[e._v(\"fork\")]),e._v(\"执行的耗时\"),_(\"code\",[e._v(\"latest_fork_usec\")]),e._v(\"，单位微妙。这个时间就是整个实例阻塞无法处理请求的时间。\")]),e._v(\" \"),_(\"p\",[e._v(\"除了因为备份的原因生成RDB之外，\"),_(\"strong\",[e._v(\"在主从节点第一次建立数据同步时\")]),e._v(\"，主节点也会生成RDB文件给从节点进行一次全量同步，这时也会对Redis产生性能影响。\")]),e._v(\" \"),_(\"p\",[e._v(\"要想避免这种情况，我们需要规划好数据备份的周期，建议在\"),_(\"strong\",[e._v(\"从节点上执行备份，而且最好放在低峰期执行\")]),e._v(\"。如果对于丢失数据不敏感的业务，那么不建议开启AOF和AOF重写功能。\")]),e._v(\" \"),_(\"p\",[e._v(\"另外，\"),_(\"code\",[e._v(\"fork\")]),e._v(\"的耗时也与系统有关，如果把Redis部署在虚拟机上，那么这个时间也会增大。所以使用Redis时建议部署在物理机上，降低\"),_(\"code\",[e._v(\"fork\")]),e._v(\"的影响。\")]),e._v(\" \"),_(\"h2\",{attrs:{id:\"绑定cpu\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#绑定cpu\"}},[e._v(\"#\")]),e._v(\" 绑定CPU\")]),e._v(\" \"),_(\"p\",[e._v(\"很多时候，我们在部署服务时，为了提高性能，降低程序在使用多个CPU时上下文切换的性能损耗，一般会采用进程绑定CPU的操作。\")]),e._v(\" \"),_(\"p\",[e._v(\"但在使用Redis时，我们不建议这么干，原因如下。\")]),e._v(\" \"),_(\"p\",[_(\"strong\",[e._v(\"绑定CPU的Redis，在进行数据持久化时，\"),_(\"code\",[e._v(\"fork\")]),e._v(\"出的子进程，子进程会继承父进程的CPU使用偏好，而此时子进程会消耗大量的CPU资源进行数据持久化，子进程会与主进程发生CPU争抢，这也会导致主进程的CPU资源不足访问延迟增大。\")])]),e._v(\" \"),_(\"p\",[e._v(\"所以在部署Redis进程时，如果需要开启RDB和AOF重写机制，一定不能进行CPU绑定操作！\")]),e._v(\" \"),_(\"h2\",{attrs:{id:\"开启aof\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#开启aof\"}},[e._v(\"#\")]),e._v(\" 开启AOF\")]),e._v(\" \"),_(\"p\",[e._v(\"上面提到了，当执行AOF文件重写时会因为\"),_(\"code\",[e._v(\"fork\")]),e._v(\"执行耗时导致Redis延迟增大，除了这个之外，如果开启AOF机制，设置的策略不合理，也会导致性能问题。\")]),e._v(\" \"),_(\"p\",[e._v(\"开启AOF后，Redis会把写入的命令实时写入到文件中，但写入文件的过程是先写入内存，等内存中的数据超过一定阈值或达到一定时间后，内存中的内容才会被真正写入到磁盘中。\")]),e._v(\" \"),_(\"p\",[e._v(\"AOF为了保证文件写入磁盘的安全性，提供了3种刷盘机制：\")]),e._v(\" \"),_(\"ul\",[_(\"li\",[_(\"code\",[e._v(\"appendfsync always\")]),e._v(\"：每次写入都刷盘，对性能影响最大，占用磁盘IO比较高，数据安全性最高\")]),e._v(\" \"),_(\"li\",[_(\"code\",[e._v(\"appendfsync everysec\")]),e._v(\"：1秒刷一次盘，对性能影响相对较小，节点宕机时最多丢失1秒的数据\")]),e._v(\" \"),_(\"li\",[_(\"code\",[e._v(\"appendfsync no\")]),e._v(\"：按照操作系统的机制刷盘，对性能影响最小，数据安全性低，节点宕机丢失数据取决于操作系统刷盘机制\")])]),e._v(\" \"),_(\"p\",[e._v(\"当使用第一种机制\"),_(\"code\",[e._v(\"appendfsync always\")]),e._v(\"时，Redis每处理一次写命令，都会把这个命令写入磁盘，而且\"),_(\"strong\",[e._v(\"这个操作是在主线程中执行的\")]),e._v(\"。\")]),e._v(\" \"),_(\"p\",[e._v(\"内存中的的数据写入磁盘，这个会加重磁盘的IO负担，操作磁盘成本要比操作内存的代价大得多。如果写入量很大，那么每次更新都会写入磁盘，此时机器的磁盘IO就会非常高，拖慢Redis的性能，因此我们不建议使用这种机制。\")]),e._v(\" \"),_(\"p\",[e._v(\"与第一种机制对比，\"),_(\"code\",[e._v(\"appendfsync everysec\")]),e._v(\"会每隔1秒刷盘，而\"),_(\"code\",[e._v(\"appendfsync no\")]),e._v(\"取决于操作系统的刷盘时间，安全性不高。因此我们推荐使用\"),_(\"code\",[e._v(\"appendfsync everysec\")]),e._v(\"这种方式，在最坏的情况下，只会丢失1秒的数据，但它能保持较好的访问性能。\")]),e._v(\" \"),_(\"p\",[e._v(\"当然，对于有些业务场景，对丢失数据并不敏感，也可以不开启AOF。\")]),e._v(\" \"),_(\"h2\",{attrs:{id:\"使用swap\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用swap\"}},[e._v(\"#\")]),e._v(\" 使用Swap\")]),e._v(\" \"),_(\"p\",[e._v(\"如果你发现Redis突然变得非常慢，\"),_(\"strong\",[e._v(\"每次访问的耗时都达到了几百毫秒甚至秒级\")]),e._v(\"，那此时就检查Redis是否使用到了Swap，这种情况下Redis基本上已经无法提供高性能的服务。\")]),e._v(\" \"),_(\"p\",[e._v(\"我们知道，操作系统提供了Swap机制，目的是为了当内存不足时，可以把一部分内存中的数据换到磁盘上，以达到对内存使用的缓冲。\")]),e._v(\" \"),_(\"p\",[e._v(\"但当内存中的数据被换到磁盘上后，访问这些数据就需要从磁盘中读取，这个速度要比内存慢太多！\")]),e._v(\" \"),_(\"p\",[_(\"strong\",[e._v(\"尤其是针对Redis这种高性能的内存数据库来说，如果Redis中的内存被换到磁盘上，对于Redis这种性能极其敏感的数据库，这个操作时间是无法接受的。\")])]),e._v(\" \"),_(\"p\",[e._v(\"我们需要检查机器的内存使用情况，确认是否确实是因为内存不足导致使用到了Swap。\")]),e._v(\" \"),_(\"p\",[e._v(\"如果确实使用到了Swap，要及时整理内存空间，释放出足够的内存供Redis使用，然后释放Redis的Swap，让Redis重新使用内存。\")]),e._v(\" \"),_(\"p\",[e._v(\"释放Redis的Swap过程通常要重启实例，为了避免重启实例对业务的影响，一般先进行主从切换，然后释放旧主节点的Swap，重新启动服务，待数据同步完成后，再切换回主节点即可。\")]),e._v(\" \"),_(\"p\",[e._v(\"可见，当Redis使用到Swap后，此时的Redis的高性能基本被废掉，所以我们需要提前预防这种情况。\")]),e._v(\" \"),_(\"p\",[_(\"strong\",[e._v(\"我们需要对Redis机器的内存和Swap使用情况进行监控，在内存不足和使用到Swap时及时报警出来，及时进行相应的处理。\")])]),e._v(\" \"),_(\"h2\",{attrs:{id:\"网卡负载过高\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#网卡负载过高\"}},[e._v(\"#\")]),e._v(\" 网卡负载过高\")]),e._v(\" \"),_(\"p\",[e._v(\"如果以上产生性能问题的场景，你都规避掉了，而且Redis也稳定运行了很长时间，但在某个时间点之后开始，访问Redis开始变慢了，而且一直持续到现在，这种情况是什么原因导致的？\")]),e._v(\" \"),_(\"p\",[e._v(\"之前我们就遇到这种问题，\"),_(\"strong\",[e._v(\"特点就是从某个时间点之后就开始变慢，并且一直持续\")]),e._v(\"。这时你需要检查一下机器的网卡流量，是否存在网卡流量被跑满的情况。\")]),e._v(\" \"),_(\"p\",[_(\"strong\",[e._v(\"网卡负载过高，在网络层和TCP层就会出现数据发送延迟、数据丢包等情况。Redis的高性能除了内存之外，就在于网络IO，请求量突增会导致网卡负载变高。\")])]),e._v(\" \"),_(\"p\",[e._v(\"如果出现这种情况，你需要排查这个机器上的哪个Redis实例的流量过大占满了网络带宽，然后确认流量突增是否属于业务正常情况，如果属于那就需要及时扩容或迁移实例，避免这个机器的其他实例受到影响。\")]),e._v(\" \"),_(\"p\",[e._v(\"运维层面，我们需要对机器的各项指标增加监控，包括网络流量，在达到阈值时提前报警，及时与业务确认并扩容。\")]),e._v(\" \"),_(\"h2\",{attrs:{id:\"总结\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[e._v(\"#\")]),e._v(\" 总结\")]),e._v(\" \"),_(\"p\",[e._v(\"以上我们总结了Redis中常见的可能导致延迟增大甚至阻塞的场景，这其中既涉及到了业务的使用问题，也涉及到Redis的运维问题。\")]),e._v(\" \"),_(\"p\",[e._v(\"可见，要想保证Redis高性能的运行，其中涉及到CPU、内存、网络，甚至磁盘的方方面面，其中还包括操作系统的相关特性的使用。\")]),e._v(\" \"),_(\"p\",[e._v(\"作为开发人员，我们需要了解Redis的运行机制，例如各个命令的执行时间复杂度、数据过期策略、数据淘汰策略等，使用合理的命令，并结合业务场景进行优化。\")]),e._v(\" \"),_(\"p\",[e._v(\"作为DBA运维人员，需要了解数据持久化、操作系统\"),_(\"code\",[e._v(\"fork\")]),e._v(\"原理、Swap机制等，并对Redis的容量进行合理规划，预留足够的机器资源，对机器做好完善的监控，才能保证Redis的稳定运行。\")])])}),[],!1,null,null,null);v.default=a.exports}}]);","extractedComments":[]}