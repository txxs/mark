{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{506:function(_,v,e){\"use strict\";e.r(v);var l=e(13),i=Object(l.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":_.$parent.slotKey}},[e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"查询 DNS\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[_._v(\"浏览器搜索自身的DNS缓存\")]),_._v(\" \"),e(\"li\",[_._v(\"搜索操作系统的DNS缓存，本地host文件查询\")]),_._v(\" \"),e(\"li\",[_._v(\"如果 DNS 服务器和我们的主机在同一个子网内，系统会按照下面的 ARP 过程对 DNS 服务器进行 ARP查询\")]),_._v(\" \"),e(\"li\",[_._v(\"如果 DNS 服务器和我们的主机在不同的子网，系统会按照下面的 ARP 过程对默认网关进行查询\")])])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"浏览器获得域名对应的IP地址后，发起HTTP三次握手\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"TCP/IP连接建立起来后，浏览器就可以向服务器发送HTTP请求了\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"TLS 握手\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[_._v(\"客户端发送一个 \"),e(\"code\",[_._v(\"ClientHello\")]),_._v(\" 消息到服务器端，消息中同时包含了它的 Transport Layer Security (TLS) 版本，可用的加密算法和压缩算法。\")]),_._v(\" \"),e(\"li\",[_._v(\"服务器端向客户端返回一个 \"),e(\"code\",[_._v(\"ServerHello\")]),_._v(\" 消息，消息中包含了服务器端的TLS版本，服务器所选择的加密和压缩算法，以及数字证书认证机构（Certificate Authority，缩写 CA）签发的服务器公开证书，证书中包含了公钥。客户端会使用这个公钥加密接下来的握手过程，直到协商生成一个新的对称密钥\")]),_._v(\" \"),e(\"li\",[_._v(\"客户端根据自己的信任CA列表，验证服务器端的证书是否可信。如果认为可信，客户端会生成一串伪随机数，使用服务器的公钥加密它。这串随机数会被用于生成新的对称密钥\")]),_._v(\" \"),e(\"li\",[_._v(\"服务器端使用自己的私钥解密上面提到的随机数，然后使用这串随机数生成自己的对称主密钥\")]),_._v(\" \"),e(\"li\",[_._v(\"客户端发送一个 \"),e(\"code\",[_._v(\"Finished\")]),_._v(\" 消息给服务器端，使用对称密钥加密这次通讯的一个散列值\")]),_._v(\" \"),e(\"li\",[_._v(\"服务器端生成自己的 hash 值，然后解密客户端发送来的信息，检查这两个值是否对应。如果对应，就向客户端发送一个 \"),e(\"code\",[_._v(\"Finished\")]),_._v(\" 消息，也使用协商好的对称密钥加密\")]),_._v(\" \"),e(\"li\",[_._v(\"从现在开始，接下来整个 TLS 会话都使用对称秘钥进行加密，传输应用层（HTTP）内容\")])])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"HTTP 服务器请求处理\")]),_._v(\" \"),e(\"p\",[_._v(\"HTTPD(HTTP Daemon)在服务器端处理请求/响应。最常见的 HTTPD 有 Linux 上常用的 Apache 和 nginx，以及 Windows 上的 IIS。\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"HTTPD 接收请求\")])]),_._v(\" \"),e(\"li\",[e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"服务器把请求拆分为以下几个参数：\")]),_._v(\" \"),e(\"p\",[_._v(\"HTTP 请求方法(\"),e(\"code\",[_._v(\"GET\")]),_._v(\", \"),e(\"code\",[_._v(\"POST\")]),_._v(\", \"),e(\"code\",[_._v(\"HEAD\")]),_._v(\", \"),e(\"code\",[_._v(\"PUT\")]),_._v(\", \"),e(\"code\",[_._v(\"DELETE\")]),_._v(\", \"),e(\"code\",[_._v(\"CONNECT\")]),_._v(\", \"),e(\"code\",[_._v(\"OPTIONS\")]),_._v(\", 或者 \"),e(\"code\",[_._v(\"TRACE\")]),_._v(\")。直接在地址栏中输入 URL 这种情况下，使用的是 GET 方法域名：google.com请求路径/页面：/ (我们没有请求google.com下的指定的页面，因此 / 是默认的路径)\")])])])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"服务器验证其上已经配置了 google.com 的虚拟主机\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"服务器验证 google.com 接受 GET 方法\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"服务器验证该用户可以使用 GET 方法(根据 IP 地址，身份信息等)\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果服务器安装了 URL 重写模块（例如 Apache 的 mod_rewrite 和 IIS 的 URL Rewrite），服务器会尝试匹配重写规则，如果匹配上的话，服务器会按照规则重写这个请求\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v('服务器根据请求信息获取相应的响应内容，这种情况下由于访问路径是 \"/\" ,会访问首页文件（你可以重写这个规则，但是这个是最常用的）。')])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"服务器会使用指定的处理程序分析处理这个文件，假如 Google 使用 PHP，服务器会使用 PHP 解析 index 文件，并捕获输出，把 PHP 的输出结果返回给请求者\")])])])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"服务器接受到这个请求，根据路径参数，经过后端的一些处理生成HTML页面代码返回给浏览器\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"浏览器拿到完整的HTML页面代码开始解析和渲染，如果遇到引用的外部\"),e(\"a\",{attrs:{href:\"http://lib.csdn.net/base/javascript\",target:\"_blank\",rel:\"noopener noreferrer\"}},[_._v(\"js\"),e(\"OutboundLink\")],1),_._v(\"，CSS,图片等静态资源，它们同样也是一个个的HTTP请求，都需要经过上面的步骤\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"浏览器根据拿到的资源对页面进行渲染，最终把一个完整的页面呈现给用户\")])])]),_._v(\" \"),e(\"p\",[_._v(\"超详细版本请转向阅读：\"),e(\"a\",{attrs:{href:\"https://github.com/skyline75489/what-happens-when-zh_CN\",target:\"_blank\",rel:\"noopener noreferrer\"}},[_._v(\"what-happens-when-zh_CN\"),e(\"OutboundLink\")],1)])])}),[],!1,null,null,null);v.default=i.exports}}]);","extractedComments":[]}