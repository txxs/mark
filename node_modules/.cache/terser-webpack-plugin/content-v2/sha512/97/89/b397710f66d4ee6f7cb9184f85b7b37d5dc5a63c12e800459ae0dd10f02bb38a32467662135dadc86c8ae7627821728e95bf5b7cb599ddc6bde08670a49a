{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{454:function(s,t,a){\"use strict\";a.r(t);var n=a(13),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[a(\"p\",[s._v(\"原文地址：\")]),s._v(\" \"),a(\"p\",[s._v(\"https://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/redis-expiration-policies-and-lru.md\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"这个问题应该这么答\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#这个问题应该这么答\"}},[s._v(\"#\")]),s._v(\" 这个问题应该这么答\")]),s._v(\" \"),a(\"p\",[s._v(\"避免批量删除大量的key造成阻塞或者停顿，包含了两种删除的方式\")]),s._v(\" \"),a(\"p\",[s._v(\"1、定期删除：redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 key，检查其是否过期，如果过期就删除\")]),s._v(\" \"),a(\"p\",[s._v(\"2、惰性删除：获取 key 的时候，如果此时 key 已经过期，就删除，不会返回任何东西\")]),s._v(\" \"),a(\"p\",[s._v(\"具体机制可以包括：\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"noeviction: 当内存不足以容纳新写入数据时，新写入操作会报错，这个一般没人用吧，实在是太恶心了。\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"allkeys-lru\")]),s._v(\"：当内存不足以容纳新写入数据时，在\"),a(\"strong\",[s._v(\"键空间\")]),s._v(\"中，移除最近最少使用的 key（这个是\"),a(\"strong\",[s._v(\"最常用\")]),s._v(\"的）。\")]),s._v(\" \"),a(\"li\",[s._v(\"allkeys-random：当内存不足以容纳新写入数据时，在\"),a(\"strong\",[s._v(\"键空间\")]),s._v(\"中，随机移除某个 key，这个一般没人用吧，为啥要随机，肯定是把最近最少使用的 key 给干掉啊。\")]),s._v(\" \"),a(\"li\",[s._v(\"volatile-lru：当内存不足以容纳新写入数据时，在\"),a(\"strong\",[s._v(\"设置了过期时间的键空间\")]),s._v(\"中，移除最近最少使用的 key（这个一般不太合适）。\")]),s._v(\" \"),a(\"li\",[s._v(\"volatile-random：当内存不足以容纳新写入数据时，在\"),a(\"strong\",[s._v(\"设置了过期时间的键空间\")]),s._v(\"中，\"),a(\"strong\",[s._v(\"随机移除\")]),s._v(\"某个 key。\")]),s._v(\" \"),a(\"li\",[s._v(\"volatile-ttl：当内存不足以容纳新写入数据时，在\"),a(\"strong\",[s._v(\"设置了过期时间的键空间\")]),s._v(\"中，有\"),a(\"strong\",[s._v(\"更早过期时间\")]),s._v(\"的 key 优先移除。\")])]),s._v(\" \"),a(\"h2\",{attrs:{id:\"面试题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面试题\"}},[s._v(\"#\")]),s._v(\" 面试题\")]),s._v(\" \"),a(\"p\",[s._v(\"redis 的过期策略都有哪些？内存淘汰机制都有哪些？手写一下 LRU 代码实现？\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"面试官心理分析\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面试官心理分析\"}},[s._v(\"#\")]),s._v(\" 面试官心理分析\")]),s._v(\" \"),a(\"p\",[s._v(\"如果你连这个问题都不知道，上来就懵了，回答不出来，那线上你写代码的时候，想当然的认为写进 redis 的数据就一定会存在，后面导致系统各种 bug，谁来负责？\")]),s._v(\" \"),a(\"p\",[s._v(\"常见的有两个问题：\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"往 redis 写入的数据怎么没了？\")])]),s._v(\" \"),a(\"p\",[s._v(\"可能有同学会遇到，在生产环境的 redis 经常会丢掉一些数据，写进去了，过一会儿可能就没了。我的天，同学，你问这个问题就说明 redis 你就没用对啊。redis 是缓存，你给当存储了是吧？\")]),s._v(\" \"),a(\"p\",[s._v(\"啥叫缓存？用内存当缓存。内存是无限的吗，内存是很宝贵而且是有限的，磁盘是廉价而且是大量的。可能一台机器就几十个 G 的内存，但是可以有几个 T 的硬盘空间。redis 主要是基于内存来进行高性能、高并发的读写操作的。\")]),s._v(\" \"),a(\"p\",[s._v(\"那既然内存是有限的，比如 redis 就只能用 10G，你要是往里面写了 20G 的数据，会咋办？当然会干掉 10G 的数据，然后就保留 10G 的数据了。那干掉哪些数据？保留哪些数据？当然是干掉不常用的数据，保留常用的数据了。\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"数据明明过期了，怎么还占用着内存？\")])]),s._v(\" \"),a(\"p\",[s._v(\"这是由 redis 的过期策略来决定。\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"面试题剖析\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面试题剖析\"}},[s._v(\"#\")]),s._v(\" 面试题剖析\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"redis-过期策略\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis-过期策略\"}},[s._v(\"#\")]),s._v(\" redis 过期策略\")]),s._v(\" \"),a(\"p\",[s._v(\"redis 过期策略是：\"),a(\"strong\",[s._v(\"定期删除+惰性删除\")]),s._v(\"。\")]),s._v(\" \"),a(\"p\",[s._v(\"所谓\"),a(\"strong\",[s._v(\"定期删除\")]),s._v(\"，指的是 redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 key，检查其是否过期，如果过期就删除。\")]),s._v(\" \"),a(\"p\",[s._v(\"假设 redis 里放了 10w 个 key，都设置了过期时间，你每隔几百毫秒，就检查 10w 个 key，那 redis 基本上就死了，cpu 负载会很高的，消耗在你的检查过期 key 上了。注意，这里可不是每隔 100ms 就遍历所有的设置过期时间的 key，那样就是一场性能上的\"),a(\"strong\",[s._v(\"灾难\")]),s._v(\"。实际上 redis 是每隔 100ms \"),a(\"strong\",[s._v(\"随机抽取\")]),s._v(\"一些 key 来检查和删除的。\")]),s._v(\" \"),a(\"p\",[s._v(\"但是问题是，定期删除可能会导致很多过期 key 到了时间并没有被删除掉，那咋整呢？所以就是惰性删除了。这就是说，在你获取某个 key 的时候，redis 会检查一下 ，这个 key 如果设置了过期时间那么是否过期了？如果过期了此时就会删除，不会给你返回任何东西。\")]),s._v(\" \"),a(\"blockquote\",[a(\"p\",[s._v(\"获取 key 的时候，如果此时 key 已经过期，就删除，不会返回任何东西。\")])]),s._v(\" \"),a(\"p\",[s._v(\"但是实际上这还是有问题的，如果定期删除漏掉了很多过期 key，然后你也没及时去查，也就没走惰性删除，此时会怎么样？如果大量过期 key 堆积在内存里，导致 redis 内存块耗尽了，咋整？\")]),s._v(\" \"),a(\"p\",[s._v(\"答案是：\"),a(\"strong\",[s._v(\"走内存淘汰机制\")]),s._v(\"。\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"内存淘汰机制\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内存淘汰机制\"}},[s._v(\"#\")]),s._v(\" 内存淘汰机制\")]),s._v(\" \"),a(\"p\",[s._v(\"redis 内存淘汰机制有以下几个：\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"noeviction: 当内存不足以容纳新写入数据时，新写入操作会报错，这个一般没人用吧，实在是太恶心了。\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"allkeys-lru\")]),s._v(\"：当内存不足以容纳新写入数据时，在\"),a(\"strong\",[s._v(\"键空间\")]),s._v(\"中，移除最近最少使用的 key（这个是\"),a(\"strong\",[s._v(\"最常用\")]),s._v(\"的）。\")]),s._v(\" \"),a(\"li\",[s._v(\"allkeys-random：当内存不足以容纳新写入数据时，在\"),a(\"strong\",[s._v(\"键空间\")]),s._v(\"中，随机移除某个 key，这个一般没人用吧，为啥要随机，肯定是把最近最少使用的 key 给干掉啊。\")]),s._v(\" \"),a(\"li\",[s._v(\"volatile-lru：当内存不足以容纳新写入数据时，在\"),a(\"strong\",[s._v(\"设置了过期时间的键空间\")]),s._v(\"中，移除最近最少使用的 key（这个一般不太合适）。\")]),s._v(\" \"),a(\"li\",[s._v(\"volatile-random：当内存不足以容纳新写入数据时，在\"),a(\"strong\",[s._v(\"设置了过期时间的键空间\")]),s._v(\"中，\"),a(\"strong\",[s._v(\"随机移除\")]),s._v(\"某个 key。\")]),s._v(\" \"),a(\"li\",[s._v(\"volatile-ttl：当内存不足以容纳新写入数据时，在\"),a(\"strong\",[s._v(\"设置了过期时间的键空间\")]),s._v(\"中，有\"),a(\"strong\",[s._v(\"更早过期时间\")]),s._v(\"的 key 优先移除。\")])]),s._v(\" \"),a(\"h3\",{attrs:{id:\"手写一个-lru-算法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#手写一个-lru-算法\"}},[s._v(\"#\")]),s._v(\" 手写一个 LRU 算法\")]),s._v(\" \"),a(\"p\",[s._v(\"你可以现场手写最原始的 LRU 算法，那个代码量太大了，似乎不太现实。\")]),s._v(\" \"),a(\"p\",[s._v(\"不求自己纯手工从底层开始打造出自己的 LRU，但是起码要知道如何利用已有的 JDK 数据结构实现一个 Java 版的 LRU。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"LRUCache\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"K\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"V\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"extends\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"LinkedHashMap\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"K\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"V\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"final\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" CACHE_SIZE\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/**\\n     * 传递进来最多能缓存多少数据\\n     *\\n     * @param cacheSize 缓存大小\\n     */\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"LRUCache\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" cacheSize\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// true 表示让 linkedHashMap 按照访问顺序来进行排序，最近访问的放在头部，最老访问的放在尾部。\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"super\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Math\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"ceil\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"cacheSize \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"/\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.75\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0.75f\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"true\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        CACHE_SIZE \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" cacheSize\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Override\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"protected\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"boolean\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"removeEldestEntry\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Map\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"Entry\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"K\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"V\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" eldest\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 当 map中的数据量大于指定的缓存个数的时候，就自动删除最老的数据。\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"size\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" CACHE_SIZE\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),a(\"br\")])])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}