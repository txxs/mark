{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{532:function(e,n,o){\"use strict\";o.r(n);var r=o(13),t=Object(r.a)({},(function(){var e=this,n=e.$createElement,o=e._self._c||n;return o(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[o(\"p\",[e._v(\"周末的时候分享了一个技术session，讲到了@RestController 和 @Controller，当时没有太讲清楚，因为 team 里很多同事之前不是做 Java的，所以对这两个东西不太熟悉，于是写了篇文章整理了一下。\")]),e._v(\" \"),o(\"p\",[e._v(\"@RestController vs @Controller\\nController 返回一个页面\\n单独使用 @Controller 不加 @ResponseBody的话一般使用在要返回一个视图的情况，这种情况属于比较传统的Spring MVC 的应用，对应于前后端不分离的情况。\")]),e._v(\" \"),o(\"p\",[e._v(\"SpringMVC 传统工作流程\")]),e._v(\" \"),o(\"p\",[e._v(\"@RestController 返回JSON 或 XML 形式数据\\n但@RestController只返回对象，对象数据直接以 JSON 或 XML 形式写入 HTTP 响应(Response)中，这种情况属于 RESTful Web服务，这也是目前日常开发所接触的最常用的情况（前后端分离）。\")]),e._v(\" \"),o(\"p\",[e._v(\"SpringMVC+RestController\")]),e._v(\" \"),o(\"p\",[e._v(\"@Controller +@ResponseBody 返回JSON 或 XML 形式数据\\n如果你需要在Spring4之前开发 RESTful Web服务的话，你需要使用@Controller 并结合@ResponseBody注解，也就是说@Controller +@ResponseBody= @RestController（Spring 4 之后新加的注解）。\")]),e._v(\" \"),o(\"p\",[e._v(\"@ResponseBody 注解的作用是将 Controller 的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到HTTP 响应(Response)对象的 body 中，通常用来返回 JSON 或者 XML 数据，返回 JSON 数据的情况比较多。\")]),e._v(\" \"),o(\"p\",[e._v(\"Spring3.xMVC RESTfulWeb服务工作流程\")]),e._v(\" \"),o(\"p\",[e._v(\"Reference:\")]),e._v(\" \"),o(\"p\",[e._v(\"https://dzone.com/articles/spring-framework-restcontroller-vs-controller（图片来源）\\nhttps://javarevisited.blogspot.com/2017/08/difference-between-restcontroller-and-controller-annotations-spring-mvc-rest.html?m=1\\n示例1: @Controller 返回一个页面\\n当我们需要直接在后端返回一个页面的时候，Spring 推荐使用 Thymeleaf 模板引擎。Spring MVC中@Controller中的方法可以直接返回模板名称，接下来 Thymeleaf 模板引擎会自动进行渲染,模板中的表达式支持Spring表达式语言（Spring EL)。如果需要用到 Thymeleaf 模板引擎，注意添加依赖！不然会报错。\")]),e._v(\" \"),o(\"p\",[e._v(\"Gradle:\")]),e._v(\" \"),o(\"p\",[e._v(\"compile 'org.springframework.boot:spring-boot-starter-thymeleaf'\\nMaven:\")]),e._v(\" \"),o(\"dependency\",[o(\"groupId\",[e._v(\"org.springframework.boot\")]),e._v(\" \"),o(\"artifactId\",[e._v(\"spring-boot-starter-thymeleaf\")])],1),e._v(\"\\nsrc/main/java/com/example/demo/controller/HelloController.java\\n\"),o(\"p\",[e._v('@Controller\\npublic class HelloController {\\n@GetMapping(\"/hello\")\\npublic String greeting(@RequestParam(name = \"name\", required = false, defaultValue = \"World\") String name, Model model) {\\nmodel.addAttribute(\"name\", name);\\nreturn \"hello\";\\n}\\n}\\nsrc/main/resources/templates/hello.html')]),e._v(\" \"),o(\"p\",[e._v(\"Spring 会去 resources 目录下 templates 目录下找，所以建议把页面放在 resources/templates 目录下\")]),e._v(\"\\n<!DOCTYPE HTML>\\n\"),o(\"html\",{attrs:{\"xmlns:th\":\"http://www.thymeleaf.org\"}},[o(\"head\",[o(\"title\",[e._v(\"Getting Started: Serving Web Content\")]),e._v(\" \"),o(\"meta\",{attrs:{\"http-equiv\":\"Content-Type\",content:\"text/html; charset=UTF-8\"}})]),e._v(\" \"),o(\"body\",[o(\"p\",{attrs:{\"th:text\":\"'Hello, ' + ${name} + '!'\"}})])]),e._v(\"\\n访问：http://localhost:8999/hello?name=team-c ，你将看到下面的内容\\n\"),o(\"p\",[e._v(\"Hello, team-c!\\n如果要对页面在templates目录下的hello文件夹中的话，返回页面的时候像下面这样写就可以了。\")]),e._v(\" \"),o(\"p\",[e._v(\"src/main/resources/templates/hello/hello.html\")]),e._v(\" \"),o(\"p\",[e._v('return \"hello/hello\";\\n示例2: @Controller+@ResponseBody 返回 JSON 格式数据\\nSpringBoot 默认集成了 jackson ,对于此需求你不需要添加任何相关依赖。')]),e._v(\" \"),o(\"p\",[e._v(\"src/main/java/com/example/demo/controller/Person.java\")]),e._v(\" \"),o(\"p\",[e._v(\"public class Person {\\nprivate String name;\\nprivate Integer age;\\n......\\n省略getter/setter ，有参和无参的construtor方法\\n}\\nsrc/main/java/com/example/demo/controller/HelloController.java\")]),e._v(\" \"),o(\"p\",[e._v('@Controller\\npublic class HelloController {\\n@PostMapping(\"/hello\")\\n@ResponseBody\\npublic Person greeting(@RequestBody Person person) {\\nreturn person;\\n}')]),e._v(\" \"),o(\"p\",[e._v(\"}\\n使用 post 请求访问 http://localhost:8080/hello ，body 中附带以下参数,后端会以json 格式将 person 对象返回。\")]),e._v(\" \"),o(\"p\",[e._v('{\\n\"name\": \"teamc\",\\n\"age\": 1\\n}\\n示例3: @RestController 返回 JSON 格式数据\\n只需要将HelloController改为如下形式：')]),e._v(\" \"),o(\"p\",[e._v('@RestController\\npublic class HelloController {\\n@PostMapping(\"/hello\")\\npublic Person greeting(@RequestBody Person person) {\\nreturn person;\\n}')]),e._v(\" \"),o(\"p\",[e._v(\"}\")])],1)}),[],!1,null,null,null);n.default=t.exports}}]);","extractedComments":[]}