{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{535:function(t,a,s){\"use strict\";s.r(a);var e=s(13),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%B8%80-%E5%9F%BA%E7%A1%80%E7%AF%87\"}},[t._v(\"一 基础篇\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#1-systemoutprintln39%E8%BE%93%E5%87%BA%E4%BB%80%E4%B9%88\"}},[t._v(\"1. \"),s(\"code\",[t._v(\"System.out.println(3|9)\")]),t._v(\"输出什么?\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#2-%E8%AF%B4%E4%B8%80%E4%B8%8B%E8%BD%AC%E5%8F%91forward%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91redirect%E7%9A%84%E5%8C%BA%E5%88%AB\"}},[t._v(\"2. 说一下转发(Forward)和重定向(Redirect)的区别\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#3-%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5url%E5%9C%B0%E5%9D%80%E5%88%B0%E6%98%BE%E7%A4%BA%E4%B8%BB%E9%A1%B5%E7%9A%84%E8%BF%87%E7%A8%8B%E6%95%B4%E4%B8%AA%E8%BF%87%E7%A8%8B%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%93%AA%E4%BA%9B%E5%8D%8F%E8%AE%AE\"}},[t._v(\"3. 在浏览器中输入url地址到显示主页的过程,整个过程会使用哪些协议\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#4-tcp-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B\"}},[t._v(\"4. TCP 三次握手和四次挥手\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B\"}},[t._v(\"为什么要三次握手\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BC%A0%E5%9B%9E-syn\"}},[t._v(\"为什么要传回 SYN\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%BC%A0%E4%BA%86-syn%E4%B8%BA%E5%95%A5%E8%BF%98%E8%A6%81%E4%BC%A0-ack\"}},[t._v(\"传了 SYN,为啥还要传 ACK\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B\"}},[t._v(\"为什么要四次挥手\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#5-ip%E5%9C%B0%E5%9D%80%E4%B8%8Emac%E5%9C%B0%E5%9D%80%E7%9A%84%E5%8C%BA%E5%88%AB\"}},[t._v(\"5. IP地址与MAC地址的区别\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#6-http%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F\"}},[t._v(\"6. HTTP请求,响应报文格式\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#7-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E7%B4%A2%E5%BC%95%E8%BF%99%E4%B9%88%E5%A4%9A%E4%BC%98%E7%82%B9%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%AF%B9%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%88%97%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%B4%A2%E5%BC%95%E5%91%A2%E7%B4%A2%E5%BC%95%E6%98%AF%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E6%9F%A5%E8%AF%A2%E9%80%9F%E5%BA%A6%E7%9A%84%E8%AF%B4%E4%B8%80%E4%B8%8B%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9mysql%E7%B4%A2%E5%BC%95%E4%B8%BB%E8%A6%81%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%80%E4%B9%88%E6%98%AF%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95\"}},[t._v(\"7. 为什么要使用索引?索引这么多优点,为什么不对表中的每一个列创建一个索引呢?索引是如何提高查询速度的?说一下使用索引的注意事项?Mysql索引主要使用的两种数据结构?什么是覆盖索引?\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#8-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E5%87%A0%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E8%AF%B4%E4%B8%80%E4%B8%8B%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E5%87%A0%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E7%9F%A5%E9%81%93%E4%B8%8D\"}},[t._v(\"8. 进程与线程的区别是什么?进程间的几种通信方式说一下?线程间的几种通信方式知道不?\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#9-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E6%89%8B%E5%86%99%E5%87%A0%E7%A7%8D%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\"}},[t._v(\"9. 为什么要用单例模式?手写几种线程安全的单例模式?\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#10-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8Bbean%E7%9F%A5%E9%81%93spring%E7%9A%84bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%90%97\"}},[t._v(\"10. 简单介绍一下bean;知道Spring的bean的作用域与生命周期吗?\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#11-spring-%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%E4%BA%86%E8%A7%A3%E5%90%97transactiondefinition-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E5%93%AA%E4%BA%94%E4%B8%AA%E8%A1%A8%E7%A4%BA%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E5%B8%B8%E9%87%8F\"}},[t._v(\"11. Spring 中的事务传播行为了解吗?TransactionDefinition 接口中哪五个表示隔离级别的常量?\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA\"}},[t._v(\"事务传播行为\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB\"}},[t._v(\"隔离级别\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#12-springmvc-%E5%8E%9F%E7%90%86%E4%BA%86%E8%A7%A3%E5%90%97\"}},[t._v(\"12. SpringMVC 原理了解吗?\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#13-spring-aop-ioc-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"}},[t._v(\"13. Spring AOP IOC 实现原理\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%BA%8C-%E8%BF%9B%E9%98%B6%E7%AF%87\"}},[t._v(\"二 进阶篇\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#1-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97mq%E7%9A%84%E5%A5%97%E8%B7%AF\"}},[t._v(\"1 消息队列MQ的套路\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#11-%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97mq%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%A5%BD%E5%A4%84\"}},[t._v(\"1.1 介绍一下消息队列MQ的应用场景/使用消息队列的好处\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#1%E9%80%9A%E8%BF%87%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86%E6%8F%90%E9%AB%98%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD\"}},[t._v(\"1)通过异步处理提高系统性能\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#2%E9%99%8D%E4%BD%8E%E7%B3%BB%E7%BB%9F%E8%80%A6%E5%90%88%E6%80%A7\"}},[t._v(\"2)降低系统耦合性\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#12-%E9%82%A3%E4%B9%88%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%BC%9A%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%E8%80%83%E8%99%91%E8%BF%87%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E5%90%97\"}},[t._v(\"1.2 那么使用消息队列会带来什么问题?考虑过这些问题吗?\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#13-%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E4%BD%A0%E7%9F%A5%E9%81%93%E5%93%AA%E5%87%A0%E7%A7%8D%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E8%AF%A5%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%91%A2\"}},[t._v(\"1.3 介绍一下你知道哪几种消息队列,该如何选择呢?\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#14-%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E5%B1%95%E6%9C%9B\"}},[t._v(\"1.4 关于消息队列其他一些常见的问题展望\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#2-%E8%B0%88%E8%B0%88-innodb-%E5%92%8C-myisam-%E4%B8%A4%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB\"}},[t._v(\"2 谈谈 InnoDB 和 MyIsam 两者的区别\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#21-%E4%B8%A4%E8%80%85%E7%9A%84%E5%AF%B9%E6%AF%94\"}},[t._v(\"2.1 两者的对比\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#22-%E5%85%B3%E4%BA%8E%E4%B8%A4%E8%80%85%E7%9A%84%E6%80%BB%E7%BB%93\"}},[t._v(\"2.2 关于两者的总结\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#3-%E8%81%8A%E8%81%8A-java-%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E5%90%A7\"}},[t._v(\"3 聊聊 Java 中的集合吧！\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#31-arraylist-%E4%B8%8E-linkedlist-%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%E6%B3%A8%E6%84%8F%E5%8A%A0%E4%B8%8A%E4%BB%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90%E7%9A%84%E5%86%85%E5%AE%B9\"}},[t._v(\"3.1 ArrayList 与 LinkedList 有什么不同?(注意加上从数据结构分析的内容)\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#32-hashmap%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0\"}},[t._v(\"3.2 HashMap的底层实现\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#1jdk18%E4%B9%8B%E5%89%8D\"}},[t._v(\"1)JDK1.8之前\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#2jdk18%E4%B9%8B%E5%90%8E\"}},[t._v(\"2)JDK1.8之后\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#33-%E6%97%A2%E7%84%B6%E8%B0%88%E5%88%B0%E4%BA%86%E7%BA%A2%E9%BB%91%E6%A0%91%E4%BD%A0%E7%BB%99%E6%88%91%E6%89%8B%E7%BB%98%E4%B8%80%E4%B8%AA%E5%87%BA%E6%9D%A5%E5%90%A7%E7%84%B6%E5%90%8E%E7%AE%80%E5%8D%95%E8%AE%B2%E4%B8%80%E4%B8%8B%E8%87%AA%E5%B7%B1%E5%AF%B9%E4%BA%8E%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E7%90%86%E8%A7%A3\"}},[t._v(\"3.3 既然谈到了红黑树,你给我手绘一个出来吧,然后简单讲一下自己对于红黑树的理解\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#34-%E7%BA%A2%E9%BB%91%E6%A0%91%E8%BF%99%E4%B9%88%E4%BC%98%E7%A7%80%E4%B8%BA%E4%BD%95%E4%B8%8D%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91%E5%BE%97%E4%BA%86\"}},[t._v(\"3.4 红黑树这么优秀,为何不直接使用红黑树得了?\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#35-hashmap-%E5%92%8C-hashtable-%E7%9A%84%E5%8C%BA%E5%88%ABhashset-%E5%92%8C-hashmap-%E5%8C%BA%E5%88%AB\"}},[t._v(\"3.5 HashMap 和 Hashtable 的区别/HashSet 和 HashMap 区别\")])])])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%B8%89-%E7%BB%88%E7%BB%93%E7%AF%87\"}},[t._v(\"三 终结篇\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#1-object%E7%B1%BB%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95\"}},[t._v(\"1. Object类有哪些方法?\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#11-object%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93\"}},[t._v(\"1.1 Object类的常见方法总结\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#12-hashcode%E4%B8%8Eequals\"}},[t._v(\"1.2 hashCode与equals\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#121-hashcode%E4%BB%8B%E7%BB%8D\"}},[t._v(\"1.2.1 hashCode()介绍\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#122-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89hashcode\"}},[t._v(\"1.2.2 为什么要有hashCode\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#123-hashcode%E4%B8%8Eequals%E7%9A%84%E7%9B%B8%E5%85%B3%E8%A7%84%E5%AE%9A\"}},[t._v(\"1.2.3 hashCode()与equals()的相关规定\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#124-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84hashcode%E5%80%BC%E5%AE%83%E4%BB%AC%E4%B9%9F%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%98%AF%E7%9B%B8%E7%AD%89%E7%9A%84\"}},[t._v(\"1.2.4 为什么两个对象有相同的hashcode值,它们也不一定是相等的?\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#13-%E4%B8%8Eequals\"}},[t._v(\"1.3  ==与equals\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#2-concurrenthashmap-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98\"}},[t._v(\"2 ConcurrentHashMap 相关问题\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#21-concurrenthashmap-%E5%92%8C-hashtable-%E7%9A%84%E5%8C%BA%E5%88%AB\"}},[t._v(\"2.1 ConcurrentHashMap 和 Hashtable 的区别\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#22-concurrenthashmap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%BA%95%E5%B1%82%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0\"}},[t._v(\"2.2 ConcurrentHashMap线程安全的具体实现方式/底层具体实现\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#jdk17%E4%B8%8A%E9%9D%A2%E6%9C%89%E7%A4%BA%E6%84%8F%E5%9B%BE\"}},[t._v(\"JDK1.7(上面有示意图)\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#jdk18%E4%B8%8A%E9%9D%A2%E6%9C%89%E7%A4%BA%E6%84%8F%E5%9B%BE\"}},[t._v(\"JDK1.8(上面有示意图)\")])])])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#3-%E8%B0%88%E8%B0%88-synchronized-%E5%92%8C-reentrantlock-%E7%9A%84%E5%8C%BA%E5%88%AB\"}},[t._v(\"3 谈谈 synchronized 和 ReenTrantLock 的区别\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#4-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BA%86%E8%A7%A3%E5%90%97\"}},[t._v(\"4 线程池了解吗?\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#41-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0\"}},[t._v(\"4.1 为什么要用线程池?\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#42-java-%E6%8F%90%E4%BE%9B%E4%BA%86%E5%93%AA%E5%87%A0%E7%A7%8D%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%96%E4%BB%AC%E5%90%84%E8%87%AA%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%98%AF%E4%BB%80%E4%B9%88\"}},[t._v(\"4.2 Java 提供了哪几种线程池?他们各自的使用场景是什么?\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#java-%E4%B8%BB%E8%A6%81%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%8B%E9%9D%A24%E7%A7%8D%E7%BA%BF%E7%A8%8B%E6%B1%A0\"}},[t._v(\"Java 主要提供了下面4种线程池\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E5%90%84%E7%A7%8D%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D\"}},[t._v(\"各种线程池的适用场景介绍\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#43-%E5%88%9B%E5%BB%BA%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E6%96%B9%E5%BC%8F\"}},[t._v(\"4.3 创建的线程池的方式\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#5-nginx\"}},[t._v(\"5 Nginx\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#51-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8Bnginx\"}},[t._v(\"5.1 简单介绍一下Nginx\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\"}},[t._v(\"反向代理\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\"}},[t._v(\"负载均衡\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB\"}},[t._v(\"动静分离\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#52-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8-nginx\"}},[t._v(\"5.2 为什么要用 Nginx?\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#53-nginx-%E7%9A%84%E5%9B%9B%E4%B8%AA%E4%B8%BB%E8%A6%81%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%E4%BA%86%E8%A7%A3%E5%90%97\"}},[t._v(\"5.3  Nginx 的四个主要组成部分了解吗?\")])])])])])])]),t._v(\" \"),s(\"p\",[t._v(\"这些问题是2018年去美团面试的同学被问到的一些常见的问题，希望对你有帮助！\")]),t._v(\" \"),s(\"h1\",{attrs:{id:\"一-基础篇\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一-基础篇\"}},[t._v(\"#\")]),t._v(\" 一 基础篇\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_1-system-out-println-3-9-输出什么\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-system-out-println-3-9-输出什么\"}},[t._v(\"#\")]),t._v(\" 1. \"),s(\"code\",[t._v(\"System.out.println(3|9)\")]),t._v(\"输出什么?\")]),t._v(\" \"),s(\"p\",[t._v(\"正确答案：11。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"考察知识点：&和&&；|和||\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"&和&&：\")])]),t._v(\" \"),s(\"p\",[t._v(\"共同点：两者都可做逻辑运算符。它们都表示运算符的两边都是true时，结果为true；\")]),t._v(\" \"),s(\"p\",[t._v(\"不同点: &也是位运算符。& 表示在运算时两边都会计算，然后再判断；&&表示先运算符号左边的东西，然后判断是否为true，是true就继续运算右边的然后判断并输出，是false就停下来直接输出不会再运行后面的东西。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"|和||：\")])]),t._v(\" \"),s(\"p\",[t._v(\"共同点：两者都可做逻辑运算符。它们都表示运算符的两边任意一边为true，结果为true，两边都不是true，结果就为false；\")]),t._v(\" \"),s(\"p\",[t._v(\"不同点：|也是位运算符。| 表示两边都会运算，然后再判断结果；|| 表示先运算符号左边的东西，然后判断是否为true，是true就停下来直接输出不会再运行后面的东西，是false就继续运算右边的然后判断并输出。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"回到本题：\")])]),t._v(\" \"),s(\"p\",[t._v(\"3 | 9=0011（二进制） | 1001（二进制）=1011（二进制）=11（十进制）\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2-说一下转发-forward-和重定向-redirect-的区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-说一下转发-forward-和重定向-redirect-的区别\"}},[t._v(\"#\")]),t._v(\" 2. 说一下转发(Forward)和重定向(Redirect)的区别\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"转发是服务器行为，重定向是客户端行为。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"转发（Forword）\")]),t._v(\" 通过RequestDispatcher对象的\"),s(\"code\",[t._v(\"forward（HttpServletRequest request,HttpServletResponse response）\")]),t._v(\"方法实现的。\"),s(\"code\",[t._v(\"RequestDispatcher\")]),t._v(\" 可以通过\"),s(\"code\",[t._v(\"HttpServletRequest\")]),t._v(\" 的 \"),s(\"code\",[t._v(\"getRequestDispatcher()\")]),t._v(\"方法获得。例如下面的代码就是跳转到 login_success.jsp 页面。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[t._v(\"request\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getRequestDispatcher\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"login_success.jsp\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"forward\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"request\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" response\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\")])]),s(\"p\",[s(\"strong\",[t._v(\"重定向（Redirect）\")]),t._v(\" 是利用服务器返回的状态吗来实现的。客户端浏览器请求服务器的时候，服务器会返回一个状态码。服务器通过HttpServletRequestResponse的setStatus(int status)方法设置状态码。如果服务器返回301或者302，则浏览器会到新的网址重新请求该资源。\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"从地址栏显示来说\")]),t._v(\"：forward是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的响应内容读取过来，然后把这些内容再发给浏览器。浏览器根本不知道服务器发送的内容从哪里来的，所以它的地址栏还是原来的地址。redirect是服务端根据逻辑，发送一个状态码，告诉浏览器重新去请求那个地址。所以地址栏显示的是新的URL。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"从数据共享来说\")]),t._v(\"：forward：转发页面和转发到的页面可以共享request里面的数据。redirect：不能共享数据。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"从运用地方来说\")]),t._v(\"：forward：一般用于用户登陆的时候，根据角色转发到相应的模块。redirect：一般用于用户注销登陆时返回主页面和跳转到其它的网站等。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"从效率来说\")]),t._v(\"：forward：高。redirect：低。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_3-在浏览器中输入url地址到显示主页的过程-整个过程会使用哪些协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-在浏览器中输入url地址到显示主页的过程-整个过程会使用哪些协议\"}},[t._v(\"#\")]),t._v(\" 3. 在浏览器中输入url地址到显示主页的过程,整个过程会使用哪些协议\")]),t._v(\" \"),s(\"p\",[t._v(\"图片来源：《图解HTTP》：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/4/19/162db5e985aabdbe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\",alt:\"状态码\"}})]),t._v(\" \"),s(\"p\",[t._v(\"总体来说分为以下几个过程:\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"DNS解析\")]),t._v(\" \"),s(\"li\",[t._v(\"TCP连接\")]),t._v(\" \"),s(\"li\",[t._v(\"发送HTTP请求\")]),t._v(\" \"),s(\"li\",[t._v(\"服务器处理请求并返回HTTP报文\")]),t._v(\" \"),s(\"li\",[t._v(\"浏览器解析渲染页面\")]),t._v(\" \"),s(\"li\",[t._v(\"连接结束\")])]),t._v(\" \"),s(\"p\",[t._v(\"具体可以参考下面这篇文章：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"https://segmentfault.com/a/1190000006879700\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://segmentfault.com/a/1190000006879700\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_4-tcp-三次握手和四次挥手\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-tcp-三次握手和四次挥手\"}},[t._v(\"#\")]),t._v(\" 4. TCP 三次握手和四次挥手\")]),t._v(\" \"),s(\"p\",[t._v(\"为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"漫画图解：\")])]),t._v(\" \"),s(\"p\",[t._v(\"图片来源：《图解HTTP》\\n\"),s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/5/8/1633e127396541f1?w=864&h=439&f=png&s=226095\",alt:\"TCP三次握手\"}})]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"简单示意图：\")]),t._v(\" \"),s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/5/8/1633e14233d95972?w=542&h=427&f=jpeg&s=15088\",alt:\"TCP三次握手\"}})]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"客户端–发送带有 SYN 标志的数据包–一次握手–服务端\")]),t._v(\" \"),s(\"li\",[t._v(\"服务端–发送带有 SYN/ACK 标志的数据包–二次握手–客户端\")]),t._v(\" \"),s(\"li\",[t._v(\"客户端–发送带有带有 ACK 标志的数据包–三次握手–服务端\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"为什么要三次握手\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要三次握手\"}},[t._v(\"#\")]),t._v(\" 为什么要三次握手\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。\")])]),t._v(\" \"),s(\"p\",[t._v(\"第一次握手：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常。\")]),t._v(\" \"),s(\"p\",[t._v(\"第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己接收正常，对方发送正常\")]),t._v(\" \"),s(\"p\",[t._v(\"第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常\")]),t._v(\" \"),s(\"p\",[t._v(\"所以三次握手就能确认双发收发功能都正常，缺一不可。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"为什么要传回-syn\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要传回-syn\"}},[t._v(\"#\")]),t._v(\" 为什么要传回 SYN\")]),t._v(\" \"),s(\"p\",[t._v(\"接收端传回发送端所发送的 SYN 是为了告诉发送端，我接收到的信息确实就是你所发送的信号了。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"SYN 是 TCP/IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，最后客户机再以 ACK(Acknowledgement[汉译：确认字符 ,在数据通信传输中，接收站发给发送站的一种传输控制字符。它表示确认发来的数据已经接受无误。 ]）消息响应。这样在客户机和服务器之间才能建立起可靠的TCP连接，数据才可以在客户机和服务器之间传递。\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"传了-syn-为啥还要传-ack\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#传了-syn-为啥还要传-ack\"}},[t._v(\"#\")]),t._v(\" 传了 SYN,为啥还要传 ACK\")]),t._v(\" \"),s(\"p\",[t._v(\"双方通信无误必须是两者互相发送信息都无误。传了 SYN，证明发送方（主动关闭方）到接收方（被动关闭方）的通道没有问题，但是接收方到发送方的通道还需要 ACK 信号来进行验证。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/5/8/1633e1676e2ac0a3?w=500&h=340&f=jpeg&s=13406\",alt:\"TCP四次挥手\"}})]),t._v(\" \"),s(\"p\",[t._v(\"断开一个 TCP 连接则需要“四次挥手”：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送\")]),t._v(\" \"),s(\"li\",[t._v(\"服务器-收到这个 FIN，它发回一 个 ACK，确认序号为收到的序号加1 。和 SYN 一样，一个 FIN 将占用一个序号\")]),t._v(\" \"),s(\"li\",[t._v(\"服务器-关闭与客户端的连接，发送一个FIN给客户端\")]),t._v(\" \"),s(\"li\",[t._v(\"客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加1\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"为什么要四次挥手\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要四次挥手\"}},[t._v(\"#\")]),t._v(\" 为什么要四次挥手\")]),t._v(\" \"),s(\"p\",[t._v(\"任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了TCP连接。\")]),t._v(\" \"),s(\"p\",[t._v(\"举个例子：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”，A 回答“知道了”，这样通话才算结束。\")]),t._v(\" \"),s(\"p\",[t._v(\"上面讲的比较概括，推荐一篇讲的比较细致的文章：\"),s(\"a\",{attrs:{href:\"https://blog.csdn.net/qzcsu/article/details/72861891\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://blog.csdn.net/qzcsu/article/details/72861891\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_5-ip地址与mac地址的区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-ip地址与mac地址的区别\"}},[t._v(\"#\")]),t._v(\" 5. IP地址与MAC地址的区别\")]),t._v(\" \"),s(\"p\",[t._v(\"参考：\"),s(\"a\",{attrs:{href:\"https://blog.csdn.net/guoweimelon/article/details/50858597\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://blog.csdn.net/guoweimelon/article/details/50858597\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"p\",[t._v(\"IP地址是指互联网协议地址（Internet Protocol Address）IP Address的缩写。IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。\")]),t._v(\" \"),s(\"p\",[t._v(\"MAC 地址又称为物理地址、硬件地址，用来定义网络设备的位置。网卡的物理地址通常是由网卡生产厂家写入网卡的，具有全球唯一性。MAC地址用于在网络中唯一标示一个网卡，一台电脑会有一或多个网卡，每个网卡都需要有一个唯一的MAC地址。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_6-http请求-响应报文格式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-http请求-响应报文格式\"}},[t._v(\"#\")]),t._v(\" 6. HTTP请求,响应报文格式\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP请求报文主要由请求行、请求头部、请求正文3部分组成\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP响应报文主要由状态行、响应头部、响应正文3部分组成\")]),t._v(\" \"),s(\"p\",[t._v(\"详细内容可以参考：\"),s(\"a\",{attrs:{href:\"https://blog.csdn.net/a19881029/article/details/14002273\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://blog.csdn.net/a19881029/article/details/14002273\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_7-为什么要使用索引-索引这么多优点-为什么不对表中的每一个列创建一个索引呢-索引是如何提高查询速度的-说一下使用索引的注意事项-mysql索引主要使用的两种数据结构-什么是覆盖索引\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-为什么要使用索引-索引这么多优点-为什么不对表中的每一个列创建一个索引呢-索引是如何提高查询速度的-说一下使用索引的注意事项-mysql索引主要使用的两种数据结构-什么是覆盖索引\"}},[t._v(\"#\")]),t._v(\" 7. 为什么要使用索引?索引这么多优点,为什么不对表中的每一个列创建一个索引呢?索引是如何提高查询速度的?说一下使用索引的注意事项?Mysql索引主要使用的两种数据结构?什么是覆盖索引?\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"为什么要使用索引？\")])]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。\")]),t._v(\" \"),s(\"li\",[t._v(\"可以大大加快 数据的检索速度（大大减少的检索的数据量）,  这也是创建索引的最主要的原因。\")]),t._v(\" \"),s(\"li\",[t._v(\"帮助服务器避免排序和临时表\")]),t._v(\" \"),s(\"li\",[t._v(\"将随机IO变为顺序IO\")]),t._v(\" \"),s(\"li\",[t._v(\"可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"索引这么多优点，为什么不对表中的每一个列创建一个索引呢？\")])]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。\")]),t._v(\" \"),s(\"li\",[t._v(\"索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。\")]),t._v(\" \"),s(\"li\",[t._v(\"创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"索引是如何提高查询速度的？\")])]),t._v(\" \"),s(\"p\",[t._v(\"将无序的数据变成相对有序的数据（就像查目录一样）\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"说一下使用索引的注意事项\")])]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"避免 where 子句中对字段施加函数，这会造成无法命中索引。\")]),t._v(\" \"),s(\"li\",[t._v(\"在使用InnoDB时使用与业务无关的自增主键作为主键，即使用逻辑主键，而不要使用业务主键。\")]),t._v(\" \"),s(\"li\",[t._v(\"将打算加索引的列设置为 NOT NULL ，否则将导致引擎放弃使用索引而进行全表扫描\")]),t._v(\" \"),s(\"li\",[t._v(\"删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗 MySQL 5.7 可以通过查询 sys 库的 schema_unused_indexes 视图来查询哪些索引从未被使用\")]),t._v(\" \"),s(\"li\",[t._v(\"在使用 limit offset 查询缓慢时，可以借助索引来提高性能\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"Mysql索引主要使用的哪两种数据结构？\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"哈希索引：对于哈希索引来说，底层的数据结构就是哈希表，因此在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余大部分场景，建议选择BTree索引。\")]),t._v(\" \"),s(\"li\",[t._v(\"BTree索引：Mysql的BTree索引使用的是B树中的B+Tree。但对于主要的两种存储引擎（MyISAM和InnoDB）的实现方式是不同的。\")])]),t._v(\" \"),s(\"p\",[t._v(\"更多关于索引的内容可以查看我的这篇文章：\"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484486&idx=1&sn=215450f11e042bca8a58eac9f4a97686&chksm=fd985227caefdb3117b8375f150676f5824aa20d1ebfdbcfb93ff06e23e26efbafae6cf6b48e&token=1990180468&lang=zh_CN#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"【思维导图-索引篇】搞定数据库索引就是这么简单\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"什么是覆盖索引?\")])]),t._v(\" \"),s(\"p\",[t._v(\"如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称\\n之为“覆盖索引”。我们知道在InnoDB存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次,这样就会比较慢。覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_8-进程与线程的区别是什么-进程间的几种通信方式说一下-线程间的几种通信方式知道不\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-进程与线程的区别是什么-进程间的几种通信方式说一下-线程间的几种通信方式知道不\"}},[t._v(\"#\")]),t._v(\" 8. 进程与线程的区别是什么?进程间的几种通信方式说一下?线程间的几种通信方式知道不?\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"进程与线程的区别是什么？\")])]),t._v(\" \"),s(\"p\",[t._v(\"线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。另外，也正是因为共享资源，所以线程中执行时一般都要进行同步和互斥。总的来说，进程和线程的主要差别在于它们是不同的操作系统资源管理方式。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"进程间的几种通信方式说一下？\")])]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"管道（pipe）\")]),t._v(\"：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有血缘关系的进程间使用。进程的血缘关系通常指父子进程关系。管道分为pipe（无名管道）和fifo（命名管道）两种，有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间通信。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"信号量（semophore）\")]),t._v(\"：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它通常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"消息队列（message queue）\")]),t._v(\"：消息队列是由消息组成的链表，存放在内核中 并由消息队列标识符标识。消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。消息队列与管道通信相比，其优势是对每个消息指定特定的消息类型，接收的时候不需要按照队列次序，而是可以根据自定义条件接收特定类型的消息。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"信号（signal）\")]),t._v(\"：信号是一种比较复杂的通信方式，用于通知接收进程某一事件已经发生。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"共享内存（shared memory）\")]),t._v(\"：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问，共享内存是最快的IPC方式，它是针对其他进程间的通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量配合使用，来实现进程间的同步和通信。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"套接字（socket）\")]),t._v(\"：socket，即套接字是一种通信机制，凭借这种机制，客户/服务器（即要进行通信的进程）系统的开发工作既可以在本地单机上进行，也可以跨网络进行。也就是说它可以让不在同一台计算机但通过网络连接计算机上的进程进行通信。也因为这样，套接字明确地将客户端和服务器区分开来。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"线程间的几种通信方式知道不？\")])]),t._v(\" \"),s(\"p\",[t._v(\"1、锁机制\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"互斥锁：提供了以排它方式阻止数据结构被并发修改的方法。\")]),t._v(\" \"),s(\"li\",[t._v(\"读写锁：允许多个线程同时读共享数据，而对写操作互斥。\")]),t._v(\" \"),s(\"li\",[t._v(\"条件变量：可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。\")])]),t._v(\" \"),s(\"p\",[t._v(\"2、信号量机制：包括无名线程信号量与有名线程信号量\")]),t._v(\" \"),s(\"p\",[t._v(\"3、信号机制：类似于进程间的信号处理。\")]),t._v(\" \"),s(\"p\",[t._v(\"线程间通信的主要目的是用于线程同步，所以线程没有象进程通信中用于数据交换的通信机制。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_9-为什么要用单例模式-手写几种线程安全的单例模式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-为什么要用单例模式-手写几种线程安全的单例模式\"}},[t._v(\"#\")]),t._v(\" 9. 为什么要用单例模式?手写几种线程安全的单例模式?\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"简单来说使用单例模式可以带来下面几个好处:\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"对于频繁使用的对象，可以省略创建对象所花费的时间，这对于那些重量级对象而言，是非常可观的一笔系统开销；\")]),t._v(\" \"),s(\"li\",[t._v(\"由于 new 操作的次数减少，因而对系统内存的使用频率也会降低，这将减轻 GC 压力，缩短 GC 停顿时间。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"懒汉式(双重检查加锁版本)\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//volatile保证，当uniqueInstance变量被初始化成Singleton实例时，多个线程可以正确处理uniqueInstance变量\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"volatile\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),t._v(\" uniqueInstance\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getInstance\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n       \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//检查实例，如果不存在，就进入同步代码块\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"uniqueInstance \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//只有第一次才彻底执行这里的代码\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n               \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//进入同步代码块后，再检查一次，如果仍是null，才创建实例\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"uniqueInstance \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    uniqueInstance \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" uniqueInstance\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),s(\"br\")])]),s(\"p\",[s(\"strong\",[t._v(\"静态内部类方式\")])]),t._v(\" \"),s(\"p\",[t._v(\"静态内部实现的单例是懒加载的且线程安全。\")]),t._v(\" \"),s(\"p\",[t._v(\"只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance（只有第一次使用这个单例的实例的时候才加载，同时不会有线程安全问题）。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SingletonHolder\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),t._v(\" INSTANCE \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getInstance\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SingletonHolder\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"INSTANCE\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"  \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"   \\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\")])]),s(\"h2\",{attrs:{id:\"_10-简单介绍一下bean-知道spring的bean的作用域与生命周期吗\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10-简单介绍一下bean-知道spring的bean的作用域与生命周期吗\"}},[t._v(\"#\")]),t._v(\" 10. 简单介绍一下bean;知道Spring的bean的作用域与生命周期吗?\")]),t._v(\" \"),s(\"p\",[t._v(\"在 Spring 中，那些组成应用程序的主体及由 Spring IOC 容器所管理的对象，被称之为 bean。简单地讲，bean 就是由 IOC 容器初始化、装配及管理的对象，除此之外，bean 就与应用程序中的其他对象没有什么区别了。而 bean 的定义以及 bean 相互间的依赖关系将通过配置元数据来描述。\")]),t._v(\" \"),s(\"p\",[t._v(\"Spring中的bean默认都是单例的，这些单例Bean在多线程程序下如何保证线程安全呢？ 例如对于Web应用来说，Web容器对于每个用户请求都创建一个单独的Sevlet线程来处理请求，引入Spring框架之后，每个Action都是单例的，那么对于Spring托管的单例Service Bean，如何保证其安全呢？ Spring的单例是基于BeanFactory也就是Spring容器的，单例Bean在此容器内只有一个，Java的单例是基于 JVM，每个 JVM 内只有一个实例。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/11/10/166fd45773d5dd2e?w=563&h=299&f=webp&s=27930\",alt:\"pring的bean的作用域\"}})]),t._v(\" \"),s(\"p\",[t._v(\"Spring的bean的生命周期以及更多内容可以查看：\"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484400&idx=2&sn=7201eb365102fce017f89cb3527fb0bc&chksm=fd985591caefdc872a2fac897288119f94c345e4e12150774f960bf5f816b79e4b9b46be3d7f&token=1990180468&lang=zh_CN#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"一文轻松搞懂Spring中bean的作用域与生命周期\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_11-spring-中的事务传播行为了解吗-transactiondefinition-接口中哪五个表示隔离级别的常量\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_11-spring-中的事务传播行为了解吗-transactiondefinition-接口中哪五个表示隔离级别的常量\"}},[t._v(\"#\")]),t._v(\" 11. Spring 中的事务传播行为了解吗?TransactionDefinition 接口中哪五个表示隔离级别的常量?\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"事务传播行为\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事务传播行为\"}},[t._v(\"#\")]),t._v(\" 事务传播行为\")]),t._v(\" \"),s(\"p\",[t._v(\"事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\\n当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"支持当前事务的情况：\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"TransactionDefinition.PROPAGATION_REQUIRED： 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\")]),t._v(\" \"),s(\"li\",[t._v(\"TransactionDefinition.PROPAGATION_SUPPORTS： 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\")]),t._v(\" \"),s(\"li\",[t._v(\"TransactionDefinition.PROPAGATION_MANDATORY： 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"不支持当前事务的情况：\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"TransactionDefinition.PROPAGATION_REQUIRES_NEW： 创建一个新的事务，如果当前存在事务，则把当前事务挂起。\")]),t._v(\" \"),s(\"li\",[t._v(\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED： 以非事务方式运行，如果当前存在事务，则把当前事务挂起。\")]),t._v(\" \"),s(\"li\",[t._v(\"TransactionDefinition.PROPAGATION_NEVER： 以非事务方式运行，如果当前存在事务，则抛出异常。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"其他情况：\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"TransactionDefinition.PROPAGATION_NESTED： 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"隔离级别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#隔离级别\"}},[t._v(\"#\")]),t._v(\" 隔离级别\")]),t._v(\" \"),s(\"p\",[t._v(\"TransactionDefinition 接口中定义了五个表示隔离级别的常量：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"TransactionDefinition.ISOLATION_DEFAULT:\")]),t._v(\"  使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"TransactionDefinition.ISOLATION_READ_UNCOMMITTED:\")]),t._v(\" 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"TransactionDefinition.ISOLATION_READ_COMMITTED:\")]),t._v(\"   允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"TransactionDefinition.ISOLATION_REPEATABLE_READ:\")]),t._v(\"  对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"TransactionDefinition.ISOLATION_SERIALIZABLE:\")]),t._v(\"   最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_12-springmvc-原理了解吗\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-springmvc-原理了解吗\"}},[t._v(\"#\")]),t._v(\" 12. SpringMVC 原理了解吗?\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/11/10/166fd45787394192?w=1015&h=466&f=webp&s=35352\",alt:\"SpringMVC 原理\"}})]),t._v(\" \"),s(\"p\",[t._v(\"客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler-> HandlerAdapter 会根据 Handler 来调用真正的处理器处理请求，并处理相应的业务逻辑 -> 处理器返回一个模型视图 ModelAndView -> 视图解析器进行解析 -> 返回一个视图对象->前端控制器 DispatcherServlet 渲染数据（Model）->将得到视图对象返回给用户\")]),t._v(\" \"),s(\"p\",[t._v(\"关于 SpringMVC 原理更多内容可以查看我的这篇文章：\"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484496&idx=1&sn=5472ffa687fe4a05f8900d8ee6726de4&chksm=fd985231caefdb27fc75b44ecf76b6f43e4617e0b01b3c040f8b8fab32e51dfa5118eed1d6ad&token=1990180468&lang=zh_CN#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"SpringMVC 工作原理详解\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_13-spring-aop-ioc-实现原理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-spring-aop-ioc-实现原理\"}},[t._v(\"#\")]),t._v(\" 13. Spring AOP IOC 实现原理\")]),t._v(\" \"),s(\"p\",[t._v(\"过了秋招挺长一段时间了，说实话我自己也忘了如何简要概括 Spring AOP IOC 实现原理，就在网上找了一个较为简洁的答案，下面分享给各位。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"IOC：\")]),t._v(\" 控制反转也叫依赖注入。IOC利用java反射机制，AOP利用代理模式。IOC 概念看似很抽象，但是很容易理解。说简单点就是将对象交给容器管理，你只需要在spring配置文件中配置对应的bean以及设置相关的属性，让spring容器来生成类的实例对象以及管理对象。在spring容器启动的时候，spring会把你在配置文件中配置的bean都初始化好，然后在你需要调用的时候，就把它已经初始化好的那些bean分配给你需要调用这些bean的类。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"AOP：\")]),t._v(\" 面向切面编程。（Aspect-Oriented Programming） 。AOP可以说是对OOP的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。实现AOP的技术，主要分为两大类：一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码，属于静态代理。\")]),t._v(\" \"),s(\"h1\",{attrs:{id:\"二-进阶篇\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二-进阶篇\"}},[t._v(\"#\")]),t._v(\" 二 进阶篇\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_1-消息队列mq的套路\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-消息队列mq的套路\"}},[t._v(\"#\")]),t._v(\" 1 消息队列MQ的套路\")]),t._v(\" \"),s(\"p\",[t._v(\"消息队列/消息中间件应该是Java程序员必备的一个技能了，如果你之前没接触过消息队列的话，建议先去百度一下某某消息队列入门，然后花2个小时就差不多可以学会任何一种消息队列的使用了。如果说仅仅学会使用是万万不够的，在实际生产环境还要考虑消息丢失等等情况。关于消息队列面试相关的问题，推荐大家也可以看一下视频《Java工程师面试突击第1季-中华石杉老师》，如果大家没有资源的话，可以在我的公众号“Java面试通关手册”后台回复关键字“1”即可！\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-1-介绍一下消息队列mq的应用场景-使用消息队列的好处\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-介绍一下消息队列mq的应用场景-使用消息队列的好处\"}},[t._v(\"#\")]),t._v(\" 1.1 介绍一下消息队列MQ的应用场景/使用消息队列的好处\")]),t._v(\" \"),s(\"p\",[t._v(\"面试官一般会先问你这个问题，预热一下，看你知道消息队列不，一般在第一面的时候面试官可能只会问消息队列MQ的应用场景/使用消息队列的好处、使用消息队列会带来什么问题、消息队列的技术选型这几个问题，不会太深究下去，在后面的第二轮/第三轮技术面试中可能会深入问一下。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"《大型网站技术架构》第四章和第七章均有提到消息队列对应用性能及扩展性的提升。\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-通过异步处理提高系统性能\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-通过异步处理提高系统性能\"}},[t._v(\"#\")]),t._v(\" 1)通过异步处理提高系统性能\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/4/21/162e63a8e34ba534?w=910&h=350&f=jpeg&s=29123\",alt:\"通过异步处理提高系统性能\"}}),t._v(\"\\n如上图，\"),s(\"strong\",[t._v(\"在不使用消息队列服务器的时候，用户的请求数据直接写入数据库，在高并发的情况下数据库压力剧增，使得响应速度变慢。但是在使用消息队列之后，用户的请求数据发送给消息队列之后立即 返回，再由消息队列的消费者进程从消息队列中获取数据，异步写入数据库。由于消息队列服务器处理速度快于数据库（消息队列也比数据库有更好的伸缩性），因此响应速度得到大幅改善。\")])]),t._v(\" \"),s(\"p\",[t._v(\"通过以上分析我们可以得出\"),s(\"strong\",[t._v(\"消息队列具有很好的削峰作用的功能\")]),t._v(\"——即\"),s(\"strong\",[t._v(\"通过异步处理，将短时间高并发产生的事务消息存储在消息队列中，从而削平高峰期的并发事务。\")]),t._v(\" 举例：在电子商务一些秒杀、促销活动中，合理使用消息队列可以有效抵御促销活动刚开始大量订单涌入对系统的冲击。如下图所示：\\n\"),s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/4/21/162e64583dd3ed01?w=780&h=384&f=jpeg&s=13550\",alt:\"合理使用消息队列可以有效抵御促销活动刚开始大量订单涌入对系统的冲击\"}}),t._v(\"\\n因为\"),s(\"strong\",[t._v(\"用户请求数据写入消息队列之后就立即返回给用户了，但是请求数据在后续的业务校验、写数据库等操作中可能失败\")]),t._v(\"。因此使用消息队列进行异步处理之后，需要\"),s(\"strong\",[t._v(\"适当修改业务流程进行配合\")]),t._v(\"，比如\"),s(\"strong\",[t._v(\"用户在提交订单之后，订单数据写入消息队列，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功\")]),t._v(\"，以免交易纠纷。这就类似我们平时手机订火车票和电影票。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_2-降低系统耦合性\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-降低系统耦合性\"}},[t._v(\"#\")]),t._v(\" 2)降低系统耦合性\")]),t._v(\" \"),s(\"p\",[t._v(\"我们知道模块分布式部署以后聚合方式通常有两种：1.\"),s(\"strong\",[t._v(\"分布式消息队列\")]),t._v(\"和2.\"),s(\"strong\",[t._v(\"分布式服务\")]),t._v(\"。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"strong\",[t._v(\"先来简单说一下分布式服务：\")])])]),t._v(\" \"),s(\"p\",[t._v(\"目前使用比较多的用来构建\"),s(\"strong\",[t._v(\"SOA（Service Oriented Architecture面向服务体系结构）\"),s(\"strong\",[t._v(\"的\")]),t._v(\"分布式服务框架\")]),t._v(\"是阿里巴巴开源的\"),s(\"strong\",[t._v(\"Dubbo\")]),t._v(\"。如果想深入了解Dubbo的可以看我写的关于Dubbo的这一篇文章：\"),s(\"strong\",[t._v(\"《高性能优秀的服务框架-dubbo介绍》\")]),t._v(\"：\"),s(\"a\",{attrs:{href:\"https://juejin.im/post/5acadeb1f265da2375072f9c\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://juejin.im/post/5acadeb1f265da2375072f9c\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[s(\"strong\",[t._v(\"再来谈我们的分布式消息队列：\")])])]),t._v(\" \"),s(\"p\",[t._v(\"我们知道如果模块之间不存在直接调用，那么新增模块或者修改模块就对其他模块影响较小，这样系统的可扩展性无疑更好一些。\")]),t._v(\" \"),s(\"p\",[t._v(\"我们最常见的\"),s(\"strong\",[t._v(\"事件驱动架构\")]),t._v(\"类似生产者消费者模式，在大型网站中通常用利用消息队列实现事件驱动结构。如下图所示：\\n\"),s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/4/21/162e6665fa394b3b?w=790&h=290&f=jpeg&s=14946\",alt:\"利用消息队列实现事件驱动结构\"}}),t._v(\" \"),s(\"strong\",[t._v(\"消息队列使利用发布-订阅模式工作，消息发送者（生产者）发布消息，一个或多个消息接受者（消费者）订阅消息。\")]),t._v(\" 从上图可以看到\"),s(\"strong\",[t._v(\"消息发送者（生产者）和消息接受者（消费者）之间没有直接耦合\")]),t._v(\"，消息发送者将消息发送至分布式消息队列即结束对消息的处理，消息接受者从分布式消息队列获取该消息后进行后续处理，并不需要知道该消息从何而来。\"),s(\"strong\",[t._v(\"对新增业务，只要对该类消息感兴趣，即可订阅该消息，对原有系统和业务没有任何影响，从而实现网站业务的可扩展性设计\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[t._v(\"消息接受者对消息进行过滤、处理、包装后，构造成一个新的消息类型，将消息继续发送出去，等待其他消息接受者订阅该消息。因此基于事件（消息对象）驱动的业务架构可以是一系列流程。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"另外为了避免消息队列服务器宕机造成消息丢失，会将成功发送到消息队列的消息存储在消息生产者服务器上，等消息真正被消费者服务器处理后才删除消息。在消息队列服务器宕机后，生产者服务器会选择分布式消息队列服务器集群中的其他服务器发布消息。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"备注：\")]),t._v(\" 不要认为消息队列只能利用发布-订阅模式工作，只不过在解耦这个特定业务环境下是使用发布-订阅模式的，\"),s(\"strong\",[t._v(\"比如在我们的ActiveMQ消息队列中还有点对点工作模式\")]),t._v(\"，具体的会在后面的文章给大家详细介绍，这一篇文章主要还是让大家对消息队列有一个更透彻的了解。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"这个问题一般会在上一个问题问完之后，紧接着被问到。“使用消息队列会带来什么问题？”这个问题要引起重视，一般我们都会考虑使用消息队列会带来的好处而忽略它带来的问题！\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-2-那么使用消息队列会带来什么问题-考虑过这些问题吗\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-那么使用消息队列会带来什么问题-考虑过这些问题吗\"}},[t._v(\"#\")]),t._v(\" 1.2 那么使用消息队列会带来什么问题?考虑过这些问题吗?\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"系统可用性降低：\")]),t._v(\" 系统可用性在某种程度上降低，为什么这样说呢？在加入MQ之前，你不用考虑消息丢失或者说MQ挂掉等等的情况，但是，引入MQ之后你就需要去考虑了！\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"系统复杂性提高：\")]),t._v(\" 加入MQ之后，你需要保证消息没有被重复消费、处理消息丢失的情况、保证消息传递的顺序性等等问题！\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"一致性问题：\")]),t._v(\" 我上面讲了消息队列可以实现异步，消息队列带来的异步确实可以提高系统响应速度。但是，万一消息的真正消费者并没有正确消费消息怎么办？这样就会导致数据不一致的情况了!\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"了解下面这个问题是为了我们更好的进行技术选型！该部分摘自：《Java工程师面试突击第1季-中华石杉老师》，如果大家没有资源的话，可以在我的公众号“Java面试通关手册”后台回复关键字“1”即可！\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-3-介绍一下你知道哪几种消息队列-该如何选择呢\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-介绍一下你知道哪几种消息队列-该如何选择呢\"}},[t._v(\"#\")]),t._v(\" 1.3 介绍一下你知道哪几种消息队列,该如何选择呢?\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"特性\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"ActiveMQ\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"RabbitMQ\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"RocketMQ\")]),t._v(\" \"),s(\"th\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"Kafaka\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"单机吞吐量\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"万级，吞吐量比RocketMQ和Kafka要低了一个数量级\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"万级，吞吐量比RocketMQ和Kafka要低了一个数量级\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"10万级，RocketMQ也是可以支撑高吞吐的一种MQ\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"10万级别，这是kafka最大的优点，就是吞吐量高。一般配合大数据类的系统来进行实时数据计算、日志采集等场景\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"topic数量对吞吐量的影响\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}}),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}}),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"topic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"topic从几十个到几百个的时候，吞吐量会大幅度下降。所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"可用性\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"高，基于主从架构实现高可用性\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"高，基于主从架构实现高可用性\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"非常高，分布式架构\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"消息可靠性\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"有较低的概率丢失数据\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}}),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"经过参数优化配置，可以做到0丢失\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"经过参数优化配置，消息可以做到0丢失\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"时效性\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"ms级\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"微秒级，这是rabbitmq的一大特点，延迟是最低的\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"ms级\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"延迟在ms级以内\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"功能支持\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"MQ领域的功能极其完备\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"基于erlang开发，所以并发能力很强，性能极其好，延时很低\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"MQ功能较为完善，还是分布式的，扩展性好\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"left\"}},[t._v(\"优劣势总结\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"非常成熟，功能强大，在业内大量的公司以及项目中都有应用。偶尔会有较低概率丢失消息，而且现在社区以及国内应用都越来越少，官方社区现在对ActiveMQ 5.x维护越来越少，几个月才发布一个版本而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"erlang语言开发，性能极其好，延时很低；吞吐量到万级，MQ功能比较完备而且开源提供的管理界面非常棒，用起来很好用。社区相对比较活跃，几乎每个月都发布几个版本分在国内一些互联网公司近几年用rabbitmq也比较多一些但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。而且erlang开发，国内有几个公司有实力做erlang源码级别的研究和定制？如果说你没这个实力的话，确实偶尔会有一些问题，你很难去看懂源码，你公司对这个东西的掌控很弱，基本职能依赖于开源社区的快速维护和修复bug。而且rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"接口简单易用，而且毕竟在阿里大规模应用过，有阿里品牌保障。日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景。而且一个很大的优势在于，阿里出品都是java系的，我们可以自己阅读源码，定制自己公司的MQ，可以掌控。社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码。还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ挺好的\")]),t._v(\" \"),s(\"td\",{staticStyle:{\"text-align\":\"right\"}},[t._v(\"kafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展。同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量。而且kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略这个特性天然适合大数据实时计算以及日志收集。\")])])])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"这部分内容，我这里不给出答案，大家可以自行根据自己学习的消息队列查阅相关内容，我可能会在后面的文章中介绍到这部分内容。另外，下面这些问题在视频《Java工程师面试突击第1季-中华石杉老师》中都有提到，如果大家没有资源的话，可以在我的公众号“Java面试通关手册”后台回复关键字“1”即可！\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-4-关于消息队列其他一些常见的问题展望\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-4-关于消息队列其他一些常见的问题展望\"}},[t._v(\"#\")]),t._v(\" 1.4 关于消息队列其他一些常见的问题展望\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"引入消息队列之后如何保证高可用性？\")]),t._v(\" \"),s(\"li\",[t._v(\"如何保证消息不被重复消费呢？\")]),t._v(\" \"),s(\"li\",[t._v(\"如何保证消息的可靠性传输（如何处理消息丢失的问题）？\")]),t._v(\" \"),s(\"li\",[t._v(\"我该怎么保证从消息队列里拿到的数据按顺序执行？\")]),t._v(\" \"),s(\"li\",[t._v(\"如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？\")]),t._v(\" \"),s(\"li\",[t._v(\"如果让你来开发一个消息队列中间件，你会怎么设计架构？\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2-谈谈-innodb-和-myisam-两者的区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-谈谈-innodb-和-myisam-两者的区别\"}},[t._v(\"#\")]),t._v(\" 2 谈谈 InnoDB 和 MyIsam 两者的区别\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2-1-两者的对比\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-两者的对比\"}},[t._v(\"#\")]),t._v(\" 2.1 两者的对比\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"count运算上的区别：\")]),t._v(\" 因为MyISAM缓存有表meta-data（行数等），因此在做COUNT(*)时对于一个结构很好的查询是不需要消耗多少资源的。而对于InnoDB来说，则没有这种缓存\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"是否支持事务和崩溃后的安全恢复：\")]),t._v(\" MyISAM 强调的是性能，每次查询具有原子性，其执行速度比InnoDB类型更快，但是不提供事务支持。但是 InnoDB 提供事务支持，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"是否支持外键：\")]),t._v(\" MyISAM不支持，而InnoDB支持。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2-2-关于两者的总结\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-关于两者的总结\"}},[t._v(\"#\")]),t._v(\" 2.2 关于两者的总结\")]),t._v(\" \"),s(\"p\",[t._v(\"MyISAM更适合读密集的表，而InnoDB更适合写密集的表。 在数据库做主从分离的情况下，经常选择MyISAM作为主库的存储引擎。\")]),t._v(\" \"),s(\"p\",[t._v(\"一般来说，如果需要事务支持，并且有较高的并发读取频率(MyISAM的表锁的粒度太大，所以当该表写并发量较高时，要等待的查询就会很多了)，InnoDB是不错的选择。如果你的数据量很大（MyISAM支持压缩特性可以减少磁盘的空间占用），而且不需要支持事务时，MyISAM是最好的选择。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_3-聊聊-java-中的集合吧\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-聊聊-java-中的集合吧\"}},[t._v(\"#\")]),t._v(\" 3 聊聊 Java 中的集合吧!\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3-1-arraylist-与-linkedlist-有什么不同-注意加上从数据结构分析的内容\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-arraylist-与-linkedlist-有什么不同-注意加上从数据结构分析的内容\"}},[t._v(\"#\")]),t._v(\" 3.1 Arraylist 与 LinkedList 有什么不同?(注意加上从数据结构分析的内容)\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"1. 是否保证线程安全：\")]),t._v(\" ArrayList 和 LinkedList 都是不同步的，也就是不保证线程安全；\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"2. 底层数据结构：\")]),t._v(\" Arraylist 底层使用的是Object数组；LinkedList 底层使用的是双向链表数据结构（注意双向链表和双向循环链表的区别：）；\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"3. 插入和删除是否受元素位置的影响：\")]),t._v(\" ① \"),s(\"strong\",[t._v(\"ArrayList 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。\")]),t._v(\" 比如：执行\"),s(\"code\",[t._v(\"add(E e)\")]),t._v(\"方法的时候， ArrayList 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是O(1)。但是如果要在指定位置 i 插入和删除元素的话（\"),s(\"code\",[t._v(\"add(int index, E element)\")]),t._v(\"）时间复杂度就为 O(n-i)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。 ② \"),s(\"strong\",[t._v(\"LinkedList 采用链表存储，所以插入，删除元素时间复杂度不受元素位置的影响，都是近似 O(1) 而数组为近似 O(n) 。\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"4. 是否支持快速随机访问：\")]),t._v(\" LinkedList 不支持高效的随机元素访问，而 ArrayList 支持。快速随机访问就是通过元素的序号快速获取元素对象（对应于\"),s(\"code\",[t._v(\"get(int index)\")]),t._v(\"方法）。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"5. 内存空间占用：\")]),t._v(\" ArrayList的空 间浪费主要体现在在list列表的结尾会预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗比ArrayList更多的空间（因为要存放直接后继和直接前驱以及数据）。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"补充内容:RandomAccess接口\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RandomAccess\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\")])]),s(\"p\",[t._v(\"查看源码我们发现实际上 RandomAccess 接口中什么都没有定义。所以，在我看来 RandomAccess 接口不过是一个标识罢了。标识什么？ 标识实现这个接口的类具有随机访问功能。\")]),t._v(\" \"),s(\"p\",[t._v(\"在 binarySearch() 方法中，它要判断传入的 list 是否RamdomAccess的实例，如果是，调用 indexedBinarySearch() 方法，如果不是，那么调用 iteratorBinarySearch() 方法\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[t._v(\"    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"T\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"binarySearch\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"List\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"extends\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Comparable\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"super\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"T\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" list\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"T\")]),t._v(\" key\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"list \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"instanceof\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"RandomAccess\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"||\")]),t._v(\" list\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"size\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"BINARYSEARCH_THRESHOLD\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Collections\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"indexedBinarySearch\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"list\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" key\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Collections\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"iteratorBinarySearch\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"list\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" key\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\")])]),s(\"p\",[t._v(\"ArraysList 实现了 RandomAccess 接口， 而 LinkedList 没有实现。为什么呢？我觉得还是和底层数据结构有关！ArraysList 底层是数组，而 LinkedList 底层是链表。数组天然支持随机访问，时间复杂度为 O(1) ，所以称为快速随机访问。链表需要遍历到特定位置才能访问特定位置的元素，时间复杂度为 O(n) ，所以不支持快速随机访问。，ArraysList 实现了 RandomAccess 接口，就表明了他具有快速随机访问功能。 RandomAccess 接口只是标识，并不是说 ArraysList 实现 RandomAccess 接口才具有快速随机访问功能的！\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"下面再总结一下 list 的遍历方式选择：\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"实现了RandomAccess接口的list，优先选择普通for循环 ，其次foreach,\")]),t._v(\" \"),s(\"li\",[t._v(\"未实现RandomAccess接口的ist， 优先选择iterator遍历（foreach遍历底层也是通过iterator实现的），大size的数据，千万不要使用普通for循环\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"Java 中的集合这类问题几乎是面试必问的，问到这类问题的时候，HashMap 又是几乎必问的问题，所以大家一定要引起重视！\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3-2-hashmap的底层实现\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-hashmap的底层实现\"}},[t._v(\"#\")]),t._v(\" 3.2 HashMap的底层实现\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-jdk1-8之前\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-jdk1-8之前\"}},[t._v(\"#\")]),t._v(\" 1)JDK1.8之前\")]),t._v(\" \"),s(\"p\",[t._v(\"JDK1.8 之前 HashMap 底层是 \"),s(\"strong\",[t._v(\"数组和链表\")]),t._v(\" 结合在一起使用也就是 \"),s(\"strong\",[t._v(\"链表散列\")]),t._v(\"。\"),s(\"strong\",[t._v(\"HashMap 通过 key 的 hashCode 经过扰动函数处理过后得到 hash  值，然后通过 \"),s(\"code\",[t._v(\"(n - 1) & hash\")]),t._v(\" 判断当前元素存放的位置（这里的 n 指的时数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法 换句话说使用扰动函数之后可以减少碰撞。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"JDK 1.8 HashMap 的 hash 方法源码:\")])]),t._v(\" \"),s(\"p\",[t._v(\"JDK 1.8 的 hash方法 相比于 JDK 1.7 hash 方法更加简化，但是原理不变。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[t._v(\"      \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"hash\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" key\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" h\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// key.hashCode()：返回散列值也就是hashcode\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// ^ ：按位异或\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// >>>:无符号右移，忽略符号位，空位都以0补齐\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"key \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"null\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"h \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" key\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"hashCode\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"^\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"h \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">>>\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"16\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\")])]),s(\"p\",[t._v(\"对比一下 JDK1.7的 HashMap 的 hash 方法源码.\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"hash\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" h\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// This function ensures that hashCodes that differ only by\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// constant multiples at each bit position have a bounded\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// number of collisions (approximately 8 at default load factor).\")]),t._v(\"\\n\\n    h \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"^=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"h \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">>>\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"20\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"^\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"h \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">>>\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"12\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" h \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"^\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"h \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">>>\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"7\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"^\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"h \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">>>\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"4\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\")])]),s(\"p\",[t._v(\"相比于 JDK1.8 的 hash 方法 ，JDK 1.7 的 hash 方法的性能会稍差一点点，因为毕竟扰动了 4 次。\")]),t._v(\" \"),s(\"p\",[t._v(\"所谓 \"),s(\"strong\",[t._v(\"“拉链法”\")]),t._v(\" 就是：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/3/20/16240dbcc303d872?w=348&h=427&f=png&s=10991\",alt:\"jdk1.8之前的内部结构\"}})]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_2-jdk1-8之后\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-jdk1-8之后\"}},[t._v(\"#\")]),t._v(\" 2)JDK1.8之后\")]),t._v(\" \"),s(\"p\",[t._v(\"相比于之前的版本， JDK1.8之后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/11/14/16711ac29c351da9?w=720&h=545&f=jpeg&s=23933\",alt:\"JDK1.8之后的HashMap底层数据结构\"}})]),t._v(\" \"),s(\"p\",[t._v(\"TreeMap、TreeSet以及JDK1.8之后的HashMap底层都用到了红黑树。红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"问完 HashMap 的底层原理之后，面试官可能就会紧接着问你 HashMap 底层数据结构相关的问题！\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3-3-既然谈到了红黑树-你给我手绘一个出来吧-然后简单讲一下自己对于红黑树的理解\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-既然谈到了红黑树-你给我手绘一个出来吧-然后简单讲一下自己对于红黑树的理解\"}},[t._v(\"#\")]),t._v(\" 3.3 既然谈到了红黑树,你给我手绘一个出来吧,然后简单讲一下自己对于红黑树的理解\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/11/14/16711ac29c138cba?w=851&h=614&f=jpeg&s=34458\",alt:\"红黑树\"}})]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"红黑树特点:\")])]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"每个节点非红即黑；\")]),t._v(\" \"),s(\"li\",[t._v(\"根节点总是黑色的；\")]),t._v(\" \"),s(\"li\",[t._v(\"每个叶子节点都是黑色的空节点（NIL节点）；\")]),t._v(\" \"),s(\"li\",[t._v(\"如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；\")]),t._v(\" \"),s(\"li\",[t._v(\"从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"红黑树的应用：\")])]),t._v(\" \"),s(\"p\",[t._v(\"TreeMap、TreeSet以及JDK1.8之后的HashMap底层都用到了红黑树。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"为什么要用红黑树\")])]),t._v(\" \"),s(\"p\",[t._v(\"简单来说红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3-4-红黑树这么优秀-为何不直接使用红黑树得了\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-4-红黑树这么优秀-为何不直接使用红黑树得了\"}},[t._v(\"#\")]),t._v(\" 3.4 红黑树这么优秀,为何不直接使用红黑树得了?\")]),t._v(\" \"),s(\"p\",[t._v(\"说一下自己对于这个问题的看法：我们知道红黑树属于（自）平衡二叉树，但是为了保持“平衡”是需要付出代价的，红黑树在插入新数据后可能需要通过左旋，右旋、变色这些操作来保持平衡，这费事啊。你说说我们引入红黑树就是为了查找数据快，如果链表长度很短的话，根本不需要引入红黑树的，你引入之后还要付出代价维持它的平衡。但是链表过长就不一样了。至于为什么选 8 这个值呢？通过概率统计所得，这个值是综合查询成本和新增元素成本得出的最好的一个值。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3-5-hashmap-和-hashtable-的区别-hashset-和-hashmap-区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-5-hashmap-和-hashtable-的区别-hashset-和-hashmap-区别\"}},[t._v(\"#\")]),t._v(\" 3.5 HashMap 和 Hashtable 的区别/HashSet 和 HashMap 区别\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"HashMap 和 Hashtable 的区别\")])]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"线程是否安全：\")]),t._v(\" HashMap 是非线程安全的，Hashtable 是线程安全的；Hashtable 内部的方法基本都经过  \"),s(\"code\",[t._v(\"synchronized\")]),t._v(\"  修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）；\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"效率：\")]),t._v(\" 因为线程安全的问题，HashMap 要比 Hashtable 效率高一点。另外，Hashtable 基本被淘汰，不要在代码中使用它；\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"对Null key 和Null value的支持：\")]),t._v(\" HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。但是在 Hashtable 中 put 进的键值只要有一个 null，直接抛出 NullPointerException。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"初始容量大小和每次扩充容量大小的不同 ：\")]),t._v(\"   ①创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。②创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小（HashMap 中的\"),s(\"code\",[t._v(\"tableSizeFor()\")]),t._v(\"方法保证，下面给出了源代码）。也就是说 HashMap 总是使用2的幂作为哈希表的大小,后面会介绍到为什么是2的幂次方。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"底层数据结构：\")]),t._v(\" JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"HashSet 和 HashMap 区别\")])]),t._v(\" \"),s(\"p\",[t._v(\"如果你看过 HashSet 源码的话就应该知道：HashSet 底层就是基于 HashMap 实现的。（HashSet 的源码非常非常少，因为除了 clone() 方法、writeObject()方法、readObject()方法是 HashSet 自己不得不实现之外，其他方法都是直接调用 HashMap 中的方法。）\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/3/2/161e717d734f3b23?w=896&h=363&f=jpeg&s=205536\",alt:\"HashSet 和 HashMap 区别\"}})]),t._v(\" \"),s(\"h1\",{attrs:{id:\"三-终结篇\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三-终结篇\"}},[t._v(\"#\")]),t._v(\" 三 终结篇\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_1-object类有哪些方法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-object类有哪些方法\"}},[t._v(\"#\")]),t._v(\" 1. Object类有哪些方法?\")]),t._v(\" \"),s(\"p\",[t._v(\"这个问题，面试中经常出现。我觉得不论是出于应付面试还是说更好地掌握Java这门编程语言，大家都要掌握！\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-1-object类的常见方法总结\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-object类的常见方法总结\"}},[t._v(\"#\")]),t._v(\" 1.1 Object类的常见方法总结\")]),t._v(\" \"),s(\"p\",[t._v(\"Object类是一个特殊的类，是所有类的父类。它主要提供了以下11个方法：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"native\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Class\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getClass\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//native方法，用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写。\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"native\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"hashCode\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//native方法，用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"boolean\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"equals\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" obj\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等。\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"protected\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"native\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Object\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"clone\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"CloneNotSupportedException\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//naitive方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为true。Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常。\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"toString\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"native\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"notify\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//native方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"native\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"notifyAll\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//native方法，并且不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"native\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"wait\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" timeout\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//native方法，并且不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"wait\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"long\")]),t._v(\" timeout\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" nanos\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"wait\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"InterruptedException\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"protected\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"finalize\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Throwable\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//实例被垃圾回收器回收的时候触发的操作\")]),t._v(\"\\n\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"21\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"22\")]),s(\"br\")])]),s(\"blockquote\",[s(\"p\",[t._v(\"问完上面这个问题之后，面试官很可能紧接着就会问你“hashCode与equals”相关的问题。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-2-hashcode与equals\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-hashcode与equals\"}},[t._v(\"#\")]),t._v(\" 1.2 hashCode与equals\")]),t._v(\" \"),s(\"p\",[t._v(\"面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写equals时必须重写hashCode方法？”\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-2-1-hashcode-介绍\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-1-hashcode-介绍\"}},[t._v(\"#\")]),t._v(\" 1.2.1 hashCode()介绍\")]),t._v(\" \"),s(\"p\",[t._v(\"hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。另外需要注意的是： Object 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的 内存地址 转换为整数之后返回。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[t._v(\"    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"native\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"hashCode\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\")])]),s(\"p\",[t._v(\"散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-2-2-为什么要有hashcode\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-2-为什么要有hashcode\"}},[t._v(\"#\")]),t._v(\" 1.2.2 为什么要有hashCode\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"我们以“HashSet如何检查重复”为例子来说明为什么要有hashCode：\")])]),t._v(\" \"),s(\"p\",[t._v(\"当你把对象加入HashSet时，HashSet会先计算对象的hashcode值来判断对象加入的位置，同时也会与其他已经加入的对象的hashcode值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同hashcode值的对象，这时会调用equals（）方法来检查hashcode相等的对象是否真的相同。如果两者相同，HashSet就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的Java启蒙书《Head fist java》第二版）。这样我们就大大减少了equals的次数，相应就大大提高了执行速度。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-2-3-hashcode-与equals-的相关规定\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-3-hashcode-与equals-的相关规定\"}},[t._v(\"#\")]),t._v(\" 1.2.3 hashCode()与equals()的相关规定\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"如果两个对象相等，则hashcode一定也是相同的\")]),t._v(\" \"),s(\"li\",[t._v(\"两个对象相等，对两个对象分别调用equals方法都返回true\")]),t._v(\" \"),s(\"li\",[t._v(\"两个对象有相同的hashcode值，它们也不一定是相等的\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"因此，equals方法被覆盖过，则hashCode方法也必须被覆盖\")])]),t._v(\" \"),s(\"li\",[t._v(\"hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_1-2-4-为什么两个对象有相同的hashcode值-它们也不一定是相等的\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-4-为什么两个对象有相同的hashcode值-它们也不一定是相等的\"}},[t._v(\"#\")]),t._v(\" 1.2.4 为什么两个对象有相同的hashcode值,它们也不一定是相等的?\")]),t._v(\" \"),s(\"p\",[t._v(\"在这里解释一位小伙伴的问题。以下内容摘自《Head Fisrt Java》。\")]),t._v(\" \"),s(\"p\",[t._v(\"因为hashCode() 所使用的杂凑算法也许刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode）。\")]),t._v(\" \"),s(\"p\",[t._v(\"我们刚刚也提到了 HashSet,如果 HashSet 在对比的时候，同样的 hashcode 有多个对象，它会使用 equals() 来判断是否真的相同。也就是说 hashcode 只是用来缩小查找成本。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"==与equals 的对比也是比较常问的基础问题之一！\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-3-与equals\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-与equals\"}},[t._v(\"#\")]),t._v(\" 1.3  ==与equals\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"==\")]),t._v(\" : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象。(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"equals()\")]),t._v(\" : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"情况1：类没有覆盖equals()方法。则通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象。\")]),t._v(\" \"),s(\"li\",[t._v(\"情况2：类覆盖了equals()方法。一般，我们都覆盖equals()方法来两个对象的内容相等；若它们的内容相等，则返回true(即，认为这两个对象相等)。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"举个例子：\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" test1 \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" a \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"ab\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// a 为一个引用\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" b \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"ab\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// b为另一个引用,对象的内容一样\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" aa \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"ab\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 放在常量池中\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" bb \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"ab\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 从常量池中查找\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"aa \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" bb\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// true\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"aa==bb\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" b\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// false，非同一对象\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"a==b\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"a\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"equals\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"b\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// true\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"aEQb\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"42\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"42.0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// true\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"true\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),s(\"br\")])]),s(\"p\",[s(\"strong\",[t._v(\"说明：\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"String中的equals()方法是被重写过的，因为Object的equals()方法是比较的对象的内存地址，而String的equals()方法比较的是对象的值。\")]),t._v(\" \"),s(\"li\",[t._v(\"当创建String类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个String对象。\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"在\"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484625&idx=1&sn=9c4fa1f7d4291a5fbd7daa44bac2b012&chksm=fd9852b0caefdba6edcf9a827aa4a17ddc97bf6ad2e5ee6f7e1aa1b443b54444d05d2b76732b&token=723699735&lang=zh_CN#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"【备战春招/秋招系列5】美团面经总结进阶篇 （附详解答案）\"),s(\"OutboundLink\")],1),t._v(\" 这篇文章中，我们已经提到了一下关于 HashMap 在面试中常见的问题：HashMap 的底层实现、简单讲一下自己对于红黑树的理解、红黑树这么优秀，为何不直接使用红黑树得了、HashMap 和 Hashtable 的区别/HashSet 和 HashMap 区别。HashMap 和 ConcurrentHashMap 这俩兄弟在一般只要面试中问到集合相关的问题就一定会被问到，所以各位务必引起重视！\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2-concurrenthashmap-相关问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-concurrenthashmap-相关问题\"}},[t._v(\"#\")]),t._v(\" 2 ConcurrentHashMap 相关问题\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2-1-concurrenthashmap-和-hashtable-的区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-concurrenthashmap-和-hashtable-的区别\"}},[t._v(\"#\")]),t._v(\" 2.1 ConcurrentHashMap 和 Hashtable 的区别\")]),t._v(\" \"),s(\"p\",[t._v(\"ConcurrentHashMap 和 Hashtable 的区别主要体现在实现线程安全的方式上不同。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"底层数据结构：\")]),t._v(\" JDK1.7的 ConcurrentHashMap 底层采用 \"),s(\"strong\",[t._v(\"分段的数组+链表\")]),t._v(\" 实现，JDK1.8 采用的数据结构跟HashMap1.8的结构一样，数组+链表/红黑二叉树。Hashtable 和 JDK1.8 之前的 HashMap 的底层数据结构类似都是采用 \"),s(\"strong\",[t._v(\"数组+链表\")]),t._v(\" 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"实现线程安全的方式（重要）：\")]),t._v(\" ① \"),s(\"strong\",[t._v(\"在JDK1.7的时候，ConcurrentHashMap（分段锁）\")]),t._v(\" 对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。（默认分配16个Segment，比Hashtable效率提高16倍。） \"),s(\"strong\",[t._v(\"到了 JDK1.8 的时候已经摒弃了Segment的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。（JDK1.6以后 对 synchronized锁做了很多优化）\")]),t._v(\"  整个看起来就像是优化过且线程安全的 HashMap，虽然在JDK1.8中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；② \"),s(\"strong\",[t._v(\"Hashtable(同一把锁)\")]),t._v(\"：使用 synchronized 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。\")])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"两者的对比图：\")])]),t._v(\" \"),s(\"p\",[t._v(\"图片来源：http://www.cnblogs.com/chengxiao/p/6842045.html\")]),t._v(\" \"),s(\"p\",[t._v(\"Hashtable：\\n\"),s(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-8-22/50656681.jpg\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"JDK1.7的ConcurrentHashMap：\\n\"),s(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-8-22/33120488.jpg\",alt:\"\"}}),t._v(\"\\nJDK1.8的ConcurrentHashMap（TreeBin: 红黑二叉树节点\\nNode: 链表节点）：\\n\"),s(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-8-22/97739220.jpg\",alt:\"\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2-2-concurrenthashmap线程安全的具体实现方式-底层具体实现\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-concurrenthashmap线程安全的具体实现方式-底层具体实现\"}},[t._v(\"#\")]),t._v(\" 2.2 ConcurrentHashMap线程安全的具体实现方式/底层具体实现\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"jdk1-7-上面有示意图\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jdk1-7-上面有示意图\"}},[t._v(\"#\")]),t._v(\" JDK1.7(上面有示意图)\")]),t._v(\" \"),s(\"p\",[t._v(\"首先将数据分为一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[t._v(\"Segment 实现了 ReentrantLock，所以 Segment 是一种可重入锁，扮演锁的角色。HashEntry 用于存储键值对数据。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Segment\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"K\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"V\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"extends\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ReentrantLock\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"implements\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Serializable\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\")])]),s(\"p\",[t._v(\"一个 ConcurrentHashMap 里包含一个 Segment 数组。Segment 的结构和HashMap类似，是一种数组和链表结构，一个 Segment 包含一个 HashEntry  数组，每个 HashEntry 是一个链表结构的元素，每个 Segment 守护着一个HashEntry数组里的元素，当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment的锁。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"jdk1-8-上面有示意图\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jdk1-8-上面有示意图\"}},[t._v(\"#\")]),t._v(\" JDK1.8(上面有示意图)\")]),t._v(\" \"),s(\"p\",[t._v(\"ConcurrentHashMap取消了Segment分段锁，采用CAS和synchronized来保证并发安全。数据结构跟HashMap1.8的结构类似，数组+链表/红黑二叉树。\")]),t._v(\" \"),s(\"p\",[t._v(\"synchronized只锁定当前链表或红黑二叉树的首节点，这样只要hash不冲突，就不会产生并发，效率又提升N倍。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_3-谈谈-synchronized-和-reentrantlock-的区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-谈谈-synchronized-和-reentrantlock-的区别\"}},[t._v(\"#\")]),t._v(\" 3 谈谈 synchronized 和 ReentrantLock 的区别\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"① 两者都是可重入锁\")])]),t._v(\" \"),s(\"p\",[t._v(\"两者都是可重入锁。“可重入锁”概念是：自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果不可锁重入的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增1，所以要等到锁的计数器下降为0时才能释放锁。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"② synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API\")])]),t._v(\" \"),s(\"p\",[t._v(\"synchronized 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 synchronized 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。ReentrantLock 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"③ ReentrantLock 比 synchronized 增加了一些高级功能\")])]),t._v(\" \"),s(\"p\",[t._v(\"相比synchronized，ReentrantLock增加了一些高级功能。主要来说主要有三点：\"),s(\"strong\",[t._v(\"①等待可中断；②可实现公平锁；③可实现选择性通知（锁可以绑定多个条件）\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"ReentrantLock提供了一种能够中断等待锁的线程的机制\")]),t._v(\"，通过 lock.lockInterruptibly() 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。\")]),t._v(\" ReentrantLock默认情况是非公平的，可以通过 ReentrantLock类的\"),s(\"code\",[t._v(\"ReentrantLock(boolean fair)\")]),t._v(\"构造方法来制定是否是公平的。\")]),t._v(\" \"),s(\"li\",[t._v(\"synchronized关键字与wait()和notify/notifyAll()方法相结合可以实现等待/通知机制，ReentrantLock类当然也可以实现，但是需要借助于Condition接口与newCondition() 方法。Condition是JDK1.5之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个Lock对象中可以创建多个Condition实例（即对象监视器），\"),s(\"strong\",[t._v(\"线程对象可以注册在指定的Condition中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用notify/notifyAll()方法进行通知时，被通知的线程是由 JVM 选择的，用ReentrantLock类结合Condition实例可以实现“选择性通知”\")]),t._v(\" ，这个功能非常重要，而且是Condition接口默认提供的。而synchronized关键字就相当于整个Lock对象中只有一个Condition实例，所有的线程都注册在它一个身上。如果执行notifyAll()方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而Condition实例的signalAll()方法 只会唤醒注册在该Condition实例中的所有等待线程。\")])]),t._v(\" \"),s(\"p\",[t._v(\"如果你想使用上述功能，那么选择ReentrantLock是一个不错的选择。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"④ 两者的性能已经相差无几\")])]),t._v(\" \"),s(\"p\",[t._v(\"在JDK1.6之前，synchronized 的性能是比 ReentrantLock 差很多。具体表示为：synchronized 关键字吞吐量岁线程数的增加，下降得非常严重。而ReentrantLock 基本保持一个比较稳定的水平。我觉得这也侧面反映了， synchronized 关键字还有非常大的优化余地。后续的技术发展也证明了这一点，我们上面也讲了在 JDK1.6 之后 JVM 团队对 synchronized 关键字做了很多优化。JDK1.6 之后，synchronized 和 ReentrantLock 的性能基本是持平了。所以网上那些说因为性能才选择 ReentrantLock 的文章都是错的！JDK1.6之后，性能已经不是选择synchronized和ReentrantLock的影响因素了！而且虚拟机在未来的性能改进中会更偏向于原生的synchronized，所以还是提倡在synchronized能满足你的需求的情况下，优先考虑使用synchronized关键字来进行同步！优化后的synchronized和ReentrantLock一样，在很多地方都是用到了CAS操作。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_4-线程池了解吗\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-线程池了解吗\"}},[t._v(\"#\")]),t._v(\" 4 线程池了解吗?\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_4-1-为什么要用线程池\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-1-为什么要用线程池\"}},[t._v(\"#\")]),t._v(\" 4.1 为什么要用线程池?\")]),t._v(\" \"),s(\"p\",[t._v(\"线程池提供了一种限制和管理资源（包括执行一个任务）。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。\")]),t._v(\" \"),s(\"p\",[t._v(\"这里借用《Java并发编程的艺术》提到的来说一下使用线程池的好处：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"降低资源消耗。\")]),t._v(\" 通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"提高响应速度。\")]),t._v(\" 当任务到达时，任务可以不需要的等到线程创建就能立即执行。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"提高线程的可管理性。\")]),t._v(\" 线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_4-2-java-提供了哪几种线程池-他们各自的使用场景是什么\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-2-java-提供了哪几种线程池-他们各自的使用场景是什么\"}},[t._v(\"#\")]),t._v(\" 4.2 Java 提供了哪几种线程池?他们各自的使用场景是什么?\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"java-主要提供了下面4种线程池\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-主要提供了下面4种线程池\"}},[t._v(\"#\")]),t._v(\" Java 主要提供了下面4种线程池\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"FixedThreadPool：\")]),t._v(\" 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"SingleThreadExecutor：\")]),t._v(\" 方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"CachedThreadPool：\")]),t._v(\" 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"ScheduledThreadPoolExecutor：\")]),t._v(\" 主要用来在给定的延迟后运行任务，或者定期执行任务。ScheduledThreadPoolExecutor又分为：ScheduledThreadPoolExecutor（包含多个线程）和SingleThreadScheduledExecutor （只包含一个线程）两种。\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"各种线程池的适用场景介绍\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#各种线程池的适用场景介绍\"}},[t._v(\"#\")]),t._v(\" 各种线程池的适用场景介绍\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"FixedThreadPool：\")]),t._v(\" 适用于为了满足资源管理需求，而需要限制当前线程数量的应用场景。它适用于负载比较重的服务器；\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"SingleThreadExecutor：\")]),t._v(\" 适用于需要保证顺序地执行各个任务并且在任意时间点，不会有多个线程是活动的应用场景；\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"CachedThreadPool：\")]),t._v(\" 适用于执行很多的短期异步任务的小程序，或者是负载较轻的服务器；\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"ScheduledThreadPoolExecutor：\")]),t._v(\" 适用于需要多个后台执行周期任务，同时为了满足资源管理需求而需要限制后台线程的数量的应用场景；\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"SingleThreadScheduledExecutor：\")]),t._v(\" 适用于需要单个后台线程执行周期任务，同时保证顺序地执行各个任务的应用场景。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_4-3-创建的线程池的方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-3-创建的线程池的方式\"}},[t._v(\"#\")]),t._v(\" 4.3 创建的线程池的方式\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"（1） 使用 Executors 创建\")])]),t._v(\" \"),s(\"p\",[t._v(\"我们上面刚刚提到了 Java 提供的几种线程池，通过 Executors 工具类我们可以很轻松的创建我们上面说的几种线程池。但是实际上我们一般都不是直接使用Java提供好的线程池，另外在《阿里巴巴Java开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 构造函数 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Executors\")]),t._v(\" 返回线程池对象的弊端如下：\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FixedThreadPool\")]),t._v(\" 和 \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SingleThreadExecutor\")]),t._v(\" ： 允许请求的队列长度为 \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"MAX_VALUE\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"可能堆积大量的请求，从而导致OOM。\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"CachedThreadPool\")]),t._v(\" 和 \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ScheduledThreadPool\")]),t._v(\" ： 允许创建的线程数量为 \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"MAX_VALUE ，可能会创建大量线程，从而导致OOM。\\n\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\")])]),s(\"p\",[s(\"strong\",[t._v(\"（2） ThreadPoolExecutor的构造函数创建\")])]),t._v(\" \"),s(\"p\",[t._v(\"我们可以自己直接调用 ThreadPoolExecutor 的构造函数来自己创建线程池。在创建的同时，给 BlockQueue 指定容量就可以了。示例如下：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutorService\")]),t._v(\" executor \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadPoolExecutor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"13\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"13\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"60L\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TimeUnit\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"SECONDS\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ArrayBlockingQueue\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"13\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\")])]),s(\"p\",[t._v(\"这种情况下，一旦提交的线程数超过当前可用线程数时，就会抛出java.util.concurrent.RejectedExecutionException，这是因为当前线程池使用的队列是有边界队列，队列已经满了便无法继续处理新的请求。但是异常（Exception）总比发生错误（Error）要好。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"（3） 使用开源类库\")])]),t._v(\" \"),s(\"p\",[t._v(\"Hollis 大佬之前在他的文章中也提到了：“除了自己定义ThreadPoolExecutor外。还有其他方法。这个时候第一时间就应该想到开源类库，如apache和guava等。”他推荐使用guava提供的ThreadFactoryBuilder来创建线程池。下面是参考他的代码示例：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutorsDemo\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadFactory\")]),t._v(\" namedThreadFactory \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadFactoryBuilder\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setNameFormat\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"demo-pool-%d\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"build\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ExecutorService\")]),t._v(\" pool \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadPoolExecutor\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"200\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0L\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"TimeUnit\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"MILLISECONDS\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"LinkedBlockingQueue\")]),s(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Runnable\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1024\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" namedThreadFactory\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ThreadPoolExecutor\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"AbortPolicy\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"main\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" args\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"int\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Integer\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"MAX_VALUE\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"++\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            pool\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"execute\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SubThread\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),s(\"br\")])]),s(\"p\",[t._v(\"通过上述方式创建线程时，不仅可以避免OOM的问题，还可以自定义线程名称，更加方便的出错的时候溯源。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_5-nginx\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-nginx\"}},[t._v(\"#\")]),t._v(\" 5 Nginx\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_5-1-简单介绍一下nginx\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-1-简单介绍一下nginx\"}},[t._v(\"#\")]),t._v(\" 5.1 简单介绍一下Nginx\")]),t._v(\" \"),s(\"p\",[t._v(\"Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。 Nginx  主要提供反向代理、负载均衡、动静分离(静态资源服务)等服务。下面我简单地介绍一下这些名词。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"反向代理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反向代理\"}},[t._v(\"#\")]),t._v(\" 反向代理\")]),t._v(\" \"),s(\"p\",[t._v(\"谈到反向代理，就不得不提一下正向代理。无论是正向代理，还是反向代理，说到底，就是代理模式的衍生版本罢了\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"**正向代理：**某些情况下，代理我们用户去访问服务器，需要用户手动的设置代理服务器的ip和端口号。正向代理比较常见的一个例子就是 VPN 了。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"反向代理：\")]),t._v(\" 是用来代理服务器的，代理我们要访问的目标服务器。代理服务器接受请求，然后将请求转发给内部网络的服务器，并将从服务器上得到的结果返回给客户端，此时代理服务器对外就表现为一个服务器。\")])]),t._v(\" \"),s(\"p\",[t._v(\"通过下面两幅图，大家应该更好理解（图源：http://blog.720ui.com/2016/nginx_action_05_proxy/）：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-15/60925795.jpg\",alt:\"正向代理\"}})]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-15/62563930.jpg\",alt:\"反向代理\"}})]),t._v(\" \"),s(\"p\",[t._v(\"所以，简单的理解，就是正向代理是为客户端做代理，代替客户端去访问服务器，而反向代理是为服务器做代理，代替服务器接受客户端请求。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"负载均衡\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#负载均衡\"}},[t._v(\"#\")]),t._v(\" 负载均衡\")]),t._v(\" \"),s(\"p\",[t._v(\"在高并发情况下需要使用，其原理就是将并发请求分摊到多个服务器执行，减轻每台服务器的压力，多台服务器(集群)共同完成工作任务，从而提高了数据的吞吐量。\")]),t._v(\" \"),s(\"p\",[t._v(\"Nginx支持的weight轮询（默认）、ip_hash、fair、url_hash这四种负载均衡调度算法，感兴趣的可以自行查阅。\")]),t._v(\" \"),s(\"p\",[t._v(\"负载均衡相比于反向代理更侧重的是将请求分担到多台服务器上去，所以谈论负载均衡只有在提供某服务的服务器大于两台时才有意义。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"动静分离\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#动静分离\"}},[t._v(\"#\")]),t._v(\" 动静分离\")]),t._v(\" \"),s(\"p\",[t._v(\"动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_5-2-为什么要用-nginx\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-2-为什么要用-nginx\"}},[t._v(\"#\")]),t._v(\" 5.2 为什么要用 Nginx?\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"这部分内容参考极客时间—\"),s(\"a\",{attrs:{href:\"https://time.geekbang.org/course/intro/138?code=AycjiiQk6uQRxnVJzBupFkrGkvZlmYELPRsZbWzaAHE=\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Nginx核心知识100讲的内容\"),s(\"OutboundLink\")],1),t._v(\"。\")])]),t._v(\" \"),s(\"p\",[t._v(\"如果面试官问你这个问题，就一定想看你知道 Nginx 服务器的一些优点吗。\")]),t._v(\" \"),s(\"p\",[t._v(\"Nginx 有以下5个优点：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"高并发、高性能（这是其他web服务器不具有的）\")]),t._v(\" \"),s(\"li\",[t._v(\"可扩展性好（模块化设计，第三方插件生态圈丰富）\")]),t._v(\" \"),s(\"li\",[t._v(\"高可靠性（可以在服务器行持续不间断的运行数年）\")]),t._v(\" \"),s(\"li\",[t._v(\"热部署（这个功能对于 Nginx 来说特别重要，热部署指可以在不停止 Nginx服务的情况下升级 Nginx）\")]),t._v(\" \"),s(\"li\",[t._v(\"BSD许可证（意味着我们可以将源代码下载下来进行修改然后使用自己的版本）\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_5-3-nginx-的四个主要组成部分了解吗\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-3-nginx-的四个主要组成部分了解吗\"}},[t._v(\"#\")]),t._v(\" 5.3 Nginx 的四个主要组成部分了解吗?\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"这部分内容参考极客时间—\"),s(\"a\",{attrs:{href:\"https://time.geekbang.org/course/intro/138?code=AycjiiQk6uQRxnVJzBupFkrGkvZlmYELPRsZbWzaAHE=\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Nginx核心知识100讲的内容\"),s(\"OutboundLink\")],1),t._v(\"。\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"Nginx 二进制可执行文件：由各模块源码编译出一个文件\")]),t._v(\" \"),s(\"li\",[t._v(\"nginx.conf 配置文件：控制Nginx 行为\")]),t._v(\" \"),s(\"li\",[t._v(\"acess.log 访问日志： 记录每一条HTTP请求信息\")]),t._v(\" \"),s(\"li\",[t._v(\"error.log 错误日志：定位问题\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"补充\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#补充\"}},[t._v(\"#\")]),t._v(\" 补充\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"hashmap的put怎么实现-如何解决hash冲突。\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hashmap的put怎么实现-如何解决hash冲突。\"}},[t._v(\"#\")]),t._v(\" HashMap的put怎么实现，如何解决hash冲突。\")]),t._v(\" \"),s(\"p\",[t._v(\"调用putval，计算相应hash码，然后初始化（默认64的capacity）或调用resize函数调整大小，判断bucket是否有值，若没有在数组初始化改值。若有则以拉链法（链表的形式）解决hash冲突，这里和ThreadLocalMap不一样，ThreadLocalMap使用的是线性探测法，接着将相应节点加入链表头部。如果超过8个元素会进化为红黑树，防止hash攻击。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"红黑树是怎么样的数据结构-有什么样的性质\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#红黑树是怎么样的数据结构-有什么样的性质\"}},[t._v(\"#\")]),t._v(\" 红黑树是怎么样的数据结构，有什么样的性质\")]),t._v(\" \"),s(\"p\",[t._v(\"二叉树，有序的\")]),t._v(\" \"),s(\"p\",[t._v(\"性质：\")]),t._v(\" \"),s(\"p\",[t._v(\"（1）每个节点或者是黑色，或者是红色。\")]),t._v(\" \"),s(\"p\",[t._v(\"（2）根节点是黑色。\")]),t._v(\" \"),s(\"p\",[t._v(\"（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]\")]),t._v(\" \"),s(\"p\",[t._v(\"（4）如果一个节点是红色的，则它的子节点必须是黑色的。\")]),t._v(\" \"),s(\"p\",[t._v(\"（5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。[这里指到叶子节点的路径]\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"红黑树什么时候变色\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#红黑树什么时候变色\"}},[t._v(\"#\")]),t._v(\" 红黑树什么时候变色\")]),t._v(\" \"),s(\"p\",[t._v(\"旋转的时候变色，共有四种旋转的方式，一般是为了保持平衡，如左边太长，右边太短这样。通过左旋或者右旋实现的\")]),t._v(\" \"),s(\"p\",[t._v(\"https://cloud.tencent.com/developer/article/1368454 这篇文章讲的不错\")]),t._v(\" \"),s(\"p\",[t._v(\"https://www.jianshu.com/p/e136ec79235c\")]),t._v(\" \"),s(\"p\",[t._v(\"左旋：以某个结点作为支点(旋转结点)，其右子结点变为旋转结点的父结点，右子结点的左子结点变为旋转结点的右子结点，左子结点保持不变。如图3。\")]),t._v(\" \"),s(\"p\",[t._v(\"右旋：以某个结点作为支点(旋转结点)，其左子结点变为旋转结点的父结点，左子结点的右子结点变为旋转结点的左子结点，右子结点保持不变。如图4。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"hashmap什么时候会调整大小\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hashmap什么时候会调整大小\"}},[t._v(\"#\")]),t._v(\" hashmap什么时候会调整大小？\")]),t._v(\" \"),s(\"p\",[t._v(\"根据负载因子来搞事，默认为0.75。什么是负载因子？根据capacity来，举个例子，当capacity为100时，如果HashMap的ele的数量到了75就会resize，resize后的大小为原来的2倍，这样可以直接使用位运算得到原来的元素新的hash值。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"hashmap扩容存在什么问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hashmap扩容存在什么问题\"}},[t._v(\"#\")]),t._v(\" hashmap扩容存在什么问题？\")]),t._v(\" \"),s(\"p\",[t._v(\"（楞了一会，发现应该是说多线程的情况）然后说了多线程会有死循环问题。如果要解决可以使用concurrentHashMap。多线程下容易出现resize（）死循环 本质 = 并发 执行 put（）操作导致触发 扩容行为，从而导致 环形链表，使得在获取数据遍历链表时形成死循环，即Infinite Loop\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"你刚才提到concurrenthashmap-你知道怎么实现吗\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#你刚才提到concurrenthashmap-你知道怎么实现吗\"}},[t._v(\"#\")]),t._v(\" 你刚才提到concurrentHashMap，你知道怎么实现吗\")]),t._v(\" \"),s(\"p\",[t._v(\"1.7使用分段锁，分为16个，每个segment可以视为一个hashtable，然后一次一个线程只锁一个segment，减小了锁的粒度，提高了并发。1.7使用的是Lock的实现类，可重入锁来同步的。1.8使用的是CAS和synchronized。如果已有元素，需要解决hash冲突，会使用synchronized锁住相应的bucket，然后再添加，同样元素在八个以上会转化为RBtree。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"你提到lock-知道哪些相应的锁\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#你提到lock-知道哪些相应的锁\"}},[t._v(\"#\")]),t._v(\" 你提到Lock，知道哪些相应的锁？\")]),t._v(\" \"),s(\"p\",[t._v(\"https://tech.meituan.com/2018/11/15/java-lock.html\")]),t._v(\" \"),s(\"p\",[t._v(\"1、公平锁/非公平锁\")]),t._v(\" \"),s(\"p\",[t._v(\"公平锁是指多个线程按照申请锁的顺序来获取锁。非公平锁是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁。有可能，会造成优先级反转或者饥饿现象。\")]),t._v(\" \"),s(\"p\",[t._v(\"对于Java ReentrantLock而言，通过构造函数指定该锁是否是公平锁，默认是非公平锁。非公平锁的优点在于吞吐量比公平锁大。\")]),t._v(\" \"),s(\"p\",[t._v(\"对于Synchronized而言，也是一种非公平锁。由于其并不像ReentrantLock是通过AQS的来实现线程调度，所以并没有任何办法使其变成公平锁。\")]),t._v(\" \"),s(\"p\",[t._v(\"2、可重入锁\")]),t._v(\" \"),s(\"p\",[t._v(\"可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，在进入内层方法会自动获取锁。说的有点抽象，下面会有一个代码的示例。对于Java ReentrantLock而言, 他的名字就可以看出是一个可重入锁，其名字是Rerentrant Lock重新进入锁。对于Synchronized而言,也是一个可重入锁。可重入锁的一个好处是可一定程度避免死锁。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"synchronized void setA() throws Exception{\\n    Thread.sleep(1000);\\n    setB();\\n}\\nsynchronized void setB() throws Exception{\\n    Thread.sleep(1000);\\n}\\n\")])]),t._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),s(\"br\")])]),s(\"p\",[t._v(\"上面的代码就是一个可重入锁的一个特点，如果不是可重入锁的话，setB可能不会被当前线程执行，可能造成死锁。\")]),t._v(\" \"),s(\"p\",[t._v(\"3、独享锁/共享锁\")]),t._v(\" \"),s(\"p\",[t._v(\"独享锁是指该锁一次只能被一个线程所持有。共享锁是指该锁可被多个线程所持有。\")]),t._v(\" \"),s(\"p\",[t._v(\"对于JavaReentrantLock而言，其是独享锁。但是对于Lock的另一个实现类ReadWriteLock，其读锁是共享锁，其写锁是独享锁。读锁的共享锁可保证并发读是非常高效的，读写，写读 ，写写的过程是互斥的。独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。\")]),t._v(\" \"),s(\"p\",[t._v(\"对于Synchronized而言，当然是独享锁。\")]),t._v(\" \"),s(\"p\",[t._v(\"4、互斥锁/读写锁\")]),t._v(\" \"),s(\"p\",[t._v(\"上面讲的独享锁/共享锁就是一种广义的说法，互斥锁/读写锁就是具体的实现。\")]),t._v(\" \"),s(\"p\",[t._v(\"互斥锁在Java中的具体实现就是ReentrantLock\")]),t._v(\" \"),s(\"p\",[t._v(\"读写锁在Java中的具体实现就是ReadWriteLock\")]),t._v(\" \"),s(\"p\",[t._v(\"5、乐观锁/悲观锁\")]),t._v(\" \"),s(\"p\",[t._v(\"乐观锁与悲观锁不是指具体的什么类型的锁，而是指看待并发同步的角度。悲观锁认为对于同一个数据的并发操作，一定是会发生修改的，哪怕没有修改，也会认为修改。因此对于同一个数据的并发操作，悲观锁采取加锁的形式。悲观的认为，不加锁的并发操作一定会出问题。乐观锁则认为对于同一个数据的并发操作，是不会发生修改的。在更新数据的时候，会采用尝试更新，不断重新的方式更新数据。乐观的认为，不加锁的并发操作是没有事情的。\")]),t._v(\" \"),s(\"p\",[t._v(\"从上面的描述我们可以看出，悲观锁适合写操作非常多的场景，乐观锁适合读操作非常多的场景，不加锁会带来大量的性能提升。\\n悲观锁在Java中的使用，就是利用各种锁。乐观锁在Java中的使用，是无锁编程，常常采用的是CAS算法，典型的例子就是原子类，通过CAS自旋实现原子操作的更新。\")]),t._v(\" \"),s(\"p\",[t._v(\"6、分段锁\")]),t._v(\" \"),s(\"p\",[t._v(\"分段锁其实是一种锁的设计，并不是具体的一种锁，对于ConcurrentHashMap而言，其并发的实现就是通过分段锁的形式来实现高效的并发操作。我们以ConcurrentHashMap来说一下分段锁的含义以及设计思想，ConcurrentHashMap中的分段锁称为Segment，它即类似于HashMap（JDK7与JDK8中HashMap的实现）的结构，即内部拥有一个Entry数组，数组中的每个元素又是一个链表；同时又是一个ReentrantLock（Segment继承了ReentrantLock)。当需要put元素的时候，并不是对整个hashmap进行加锁，而是先通过hashcode来知道他要放在那一个分段中，然后对这个分段进行加锁，所以当多线程put的时候，只要不是放在一个分段中，就实现了真正的并行的插入。但是，在统计size的时候，可就是获取hashmap全局信息的时候，就需要获取所有的分段锁才能统计。分段锁的设计目的是细化锁的粒度，当操作不需要更新整个数组的时候，就仅仅针对数组中的一项进行加锁操作。\")]),t._v(\" \"),s(\"p\",[t._v(\"7、偏向锁/轻量级锁/重量级锁\")]),t._v(\" \"),s(\"p\",[t._v(\"这三种锁是指锁的状态，并且是针对Synchronized。在Java 5通过引入锁升级的机制来实现高效Synchronized。这三种锁的状态是通过对象监视器在对象头中的字段来表明的。\\n偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价。\\n轻量级锁是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。\\n重量级锁是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低。\")]),t._v(\" \"),s(\"p\",[t._v(\"8、自旋锁\")]),t._v(\" \"),s(\"p\",[t._v(\"在Java中，自旋锁是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU。\\n典型的自旋锁实现的例子，可以参考自旋锁的实现\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"aqs如何实现可重入\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#aqs如何实现可重入\"}},[t._v(\"#\")]),t._v(\" AQS如何实现可重入\")]),t._v(\" \"),s(\"p\",[t._v(\"http://blog.11034.org/2016-06/reentrantlock.html\")]),t._v(\" \"),s(\"p\",[t._v(\"可重入锁需要在内部维持一个进入次数N和占有锁的线程对象S，当N == 0时表示锁闲置，获取锁时set N = 1并set S = currentThread，每次进入锁N++，每次退出锁N–，直到N == 0锁被释放并set S = null，当然前提所有操作要保证currentThread == S才行。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"volatile什么作用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#volatile什么作用\"}},[t._v(\"#\")]),t._v(\" volatile什么作用\")]),t._v(\" \"),s(\"p\",[t._v(\"指令重排序，内存可见性，编译器重排序，cpu重排序，内存重排序。好处是流水线技术，提高并发性能等。通过禁止编译器优化，以及汇编使用Lock信号，java中的cpp加入volatile等防止。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"内存可见性具体指什么-volatile通过什么机制防止\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内存可见性具体指什么-volatile通过什么机制防止\"}},[t._v(\"#\")]),t._v(\" 内存可见性具体指什么？volatile通过什么机制防止\")]),t._v(\" \"),s(\"p\",[t._v(\"讲了下JMM，以及计组原理中的三级cache，buffer，缓存行等。顺便扯了下c语言的volatile只保证防止编译器优化以及内存可见性的语义，而不能保证顺序性。然后是C11的acquire，release语义 接着回归java，扯了下内存屏障的实现与作用。（并发编程的艺术）然后扯了下#LOCK信号，包括总线锁，mesi的缓存一致性等。最后是先行发生的语义（语无伦次，不过基本点都讲到了）\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"synchronized内部分为几种锁-他们的使用场景是什么\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#synchronized内部分为几种锁-他们的使用场景是什么\"}},[t._v(\"#\")]),t._v(\" synchronized内部分为几种锁，他们的使用场景是什么\")]),t._v(\" \"),s(\"p\",[t._v(\"偏向锁，轻量级锁，重量级锁（又有自旋锁等）,然后详细讲了实现和使用场景（周志明的书和并发编程的艺术都有讲，此处省略）。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"操作系统调度进程有哪些算法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#操作系统调度进程有哪些算法\"}},[t._v(\"#\")]),t._v(\" 操作系统调度进程有哪些算法？\")]),t._v(\" \"),s(\"p\",[t._v(\"优先级，时间片，FIFO，最近deadline什么的。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"数据库特性\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据库特性\"}},[t._v(\"#\")]),t._v(\" 数据库特性\")]),t._v(\" \"),s(\"p\",[t._v(\"ACID，顺便分别提了下实现原理\")]),t._v(\" \"),s(\"p\",[t._v(\"https://www.cnblogs.com/rjzheng/p/10841031.html\")]),t._v(\" \"),s(\"p\",[t._v(\"问题一：Mysql怎么保证一致性的？\")]),t._v(\" \"),s(\"p\",[t._v(\"OK，这个问题分为两个层面来说。\")]),t._v(\" \"),s(\"p\",[t._v(\"从数据库层面，数据库通过原子性、隔离性、持久性来保证一致性。也就是说ACID四大特性之中，C(一致性)是目的，A(原子性)、I(隔离性)、D(持久性)是手段，是为了保证一致性，数据库提供的手段。数据库必须要实现AID三大特性，才有可能实现一致性。例如，原子性无法保证，显然一致性也无法保证。但是，如果你在事务里故意写出违反约束的代码，一致性还是无法保证的。例如，你在转账的例子中，你的代码里故意不给B账户加钱，那一致性还是无法保证。因此，还必须从应用层角度考虑。\")]),t._v(\" \"),s(\"p\",[t._v(\"从应用层面，通过代码判断数据库数据是否有效，然后决定回滚还是提交数据！\")]),t._v(\" \"),s(\"p\",[t._v(\"问题二: Mysql怎么保证原子性的？\")]),t._v(\" \"),s(\"p\",[t._v(\"OK，是利用Innodb的undo log。undo log名为回滚日志，是实现原子性的关键，当事务回滚时能够撤销所有已经成功执行的sql语句，他需要记录你要回滚的相应日志信息。\\n例如\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"(1)当你delete一条数据的时候，就需要记录这条数据的信息，回滚的时候，insert这条旧数据\")]),t._v(\" \"),s(\"li\",[t._v(\"(2)当你update一条数据的时候，就需要记录之前的旧值，回滚的时候，根据旧值执行update操作\")]),t._v(\" \"),s(\"li\",[t._v(\"(3)当年insert一条数据的时候，就需要这条记录的主键，回滚的时候，根据主键执行delete操作\")])]),t._v(\" \"),s(\"p\",[t._v(\"undo log记录了这些回滚需要的信息，当事务执行失败或调用了rollback，导致事务需要回滚，便可以利用undo log中的信息将数据回滚到修改之前的样子。\")]),t._v(\" \"),s(\"p\",[t._v(\"ps:具体的undo log日志长啥样，这个可以写一篇文章了。而且写出来，看的人也不多，姑且先这么简单的理解吧。\")]),t._v(\" \"),s(\"p\",[t._v(\"问题三: Mysql怎么保证持久性的？\")]),t._v(\" \"),s(\"p\",[t._v(\"OK，是利用Innodb的redo log。正如之前说的，Mysql是先把磁盘上的数据加载到内存中，在内存中对数据进行修改，再刷回磁盘上。如果此时突然宕机，内存中的数据就会丢失。\")]),t._v(\" \"),s(\"p\",[t._v(\"怎么解决这个问题？简单啊，事务提交前直接把数据写入磁盘就行啊。\")]),t._v(\" \"),s(\"p\",[t._v(\"这么做有什么问题？\")]),t._v(\" \"),s(\"p\",[t._v(\"只修改一个页面里的一个字节，就要将整个页面刷入磁盘，太浪费资源了。毕竟一个页面16kb大小，你只改其中一点点东西，就要将16kb的内容刷入磁盘，听着也不合理。\\n毕竟一个事务里的SQL可能牵涉到多个数据页的修改，而这些数据页可能不是相邻的，也就是属于随机IO。显然操作随机IO，速度会比较慢。\\n于是，决定采用redo log解决上面的问题。当做数据修改的时候，不仅在内存中操作，还会在redo log中记录这次操作。当事务提交的时候，会将redo log日志进行刷盘(redo log一部分在内存中，一部分在磁盘上)。当数据库宕机重启的时候，会将redo log中的内容恢复到数据库中，再根据undo log和binlog内容决定回滚数据还是提交数据。\")]),t._v(\" \"),s(\"p\",[t._v(\"采用redo log的好处？其实好处就是将redo log进行刷盘比对数据页刷盘效率高，具体表现如下\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"redo log体积小，毕竟只记录了哪一页修改了啥，因此体积小，刷盘快。\")]),t._v(\" \"),s(\"li\",[t._v(\"redo log是一直往末尾进行追加，属于顺序IO。效率显然比随机IO来的快。\")])]),t._v(\" \"),s(\"p\",[t._v(\"ps:不想具体去谈redo log具体长什么样，因为内容太多了。\")]),t._v(\" \"),s(\"p\",[t._v(\"问题四: Mysql怎么保证隔离性的？\")]),t._v(\" \"),s(\"p\",[t._v(\"OK,利用的是锁和MVCC机制。还是拿转账例子来说明，有一个账户表如下\")]),t._v(\" \"),s(\"p\",[t._v(\"表名t_balance\")]),t._v(\" \"),s(\"p\",[t._v(\"id\\tuser_id\\tbalance\")]),t._v(\" \"),s(\"p\",[t._v(\"1\\tA\\t200\")]),t._v(\" \"),s(\"p\",[t._v(\"2\\tB\\t0\")]),t._v(\" \"),s(\"p\",[t._v(\"其中id是主键，user_id为账户名，balance为余额。还是以转账两次为例，如下图所示\")]),t._v(\" \"),s(\"p\",[t._v(\"至于MVCC,即多版本并发控制(Multi Version Concurrency Control),一个行记录数据有多个版本对快照数据，这些快照数据在undo log中。\\n如果一个事务读取的行正在做DELELE或者UPDATE操作，读取操作不会等行上的锁释放，而是读取该行的快照版本。\\n由于MVCC机制在可重复读(Repeateable Read)和读已提交(Read Commited)的MVCC表现形式不同，就不赘述了。\\n但是有一点说明一下，在事务隔离级别为读已提交(Read Commited)时，一个事务能够读到另一个事务已经提交的数据，是不满足隔离性的。但是当事务隔离级别为可重复读(Repeateable Read)中，是满足隔离性的。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"四种隔离级别和实现方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四种隔离级别和实现方式\"}},[t._v(\"#\")]),t._v(\" 四种隔离级别和实现方式\")]),t._v(\" \"),s(\"p\",[t._v(\"https://www.hollischuang.com/archives/943\")]),t._v(\" \"),s(\"p\",[t._v(\"https://my.oschina.net/jikeh/blog/2961450\")]),t._v(\" \"),s(\"p\",[t._v(\"不同的隔离级别是在数据可靠性和并发性之间的均衡取舍，隔离级别越高，对应的并发性能越差，数据越安全可靠。\")]),t._v(\" \"),s(\"p\",[t._v(\"READ UNCOMMITTED\")]),t._v(\" \"),s(\"p\",[t._v(\"顾名思义，事务之间可以读取彼此未提交的数据。机智如你会记得，在前文有说到所有写操作都会加排它锁，那还怎么读未提交呢？机智如你，前面我们介绍排它锁的时候，有这种说明： 排他锁会阻止其它事务再对其锁定的数据加读或写的锁，但是对不加锁的读就不起作用了。READ UNCOMMITTED隔离级别下, 读不会加任何锁。而写会加排他锁，并到事务结束之后释放。\")]),t._v(\" \"),s(\"p\",[t._v(\"实例1：\")]),t._v(\" \"),s(\"p\",[t._v(\"查-写：查并没有阻止写，表明查肯定并没有加锁，要不写肯定就阻塞了。写很明显，会加排它锁的。\")]),t._v(\" \"),s(\"p\",[t._v(\"实例2： 写-写：阻塞，表明，写会加排它锁。\")]),t._v(\" \"),s(\"p\",[t._v(\"READ COMMITTED\")]),t._v(\" \"),s(\"p\",[t._v(\"顾名思义，事务之间可以读取彼此已提交的数据。InnoDB在该隔离级别READCOMMITTED写数据时，使用排它锁,读取数据不加锁而是使用了MVCC机制。因此，在读已提交的级别下，都会通过MVCC获取当前数据的最新快照，不加任何锁，也无视任何锁(因为历史数据是构造出来的，身上不可能有锁)。\")]),t._v(\" \"),s(\"p\",[t._v(\"但是，该级别下还是遗留了不可重复读和幻读问题： MVCC版本的生成时机: 是每次select时。这就意味着，如果我们在事务A中执行多次的select，在每次select之间有其他事务更新了我们读取的数据并提交了，那就出现了不可重复读，即：重复读时，会出现数据不一致问题，后面我们会讲解超支现象，就是这种引起的。\")]),t._v(\" \"),s(\"p\",[t._v(\"REPEATABLE READ\")]),t._v(\" \"),s(\"p\",[t._v(\"READ COMMITTED级别不同的是MVCC版本的生成时机，即：一次事务中只在第一次select时生成版本，后续的查询都是在这个版本上进行，从而实现了可重复读。但是因为MVCC的快照只对读操作有效，对写操作无效，举例说明会更清晰一点： 事务A依次执行如下3条sql，事务B在语句1和2之间，插入10条age=20的记录，事务A就幻读了。\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"select count(1) from user where age=20;\")])]),t._v(\" \"),s(\"p\",[t._v(\"-- return 0: 当前没有age=20的\")]),t._v(\" \"),s(\"ol\",{attrs:{start:\"2\"}},[s(\"li\",[t._v(\"update user set name=test where age=20;\")])]),t._v(\" \"),s(\"p\",[t._v(\"-- Affects 10 rows: 因为事务B刚写入10条age=20的记录，而写操作是不受MVCC影响，能看到最新数据的，所以更新成功，而一旦操作成功，这些被操作的数据就会对当前事务可见\")]),t._v(\" \"),s(\"ol\",{attrs:{start:\"3\"}},[s(\"li\",[t._v(\"select count(1) from user where age=20;\")])]),t._v(\" \"),s(\"p\",[t._v(\"-- return 10: 出现幻读\")]),t._v(\" \"),s(\"p\",[t._v(\"REPEATABLE READ级别，可以防止大部分的幻读，但像前边举例读-写-读的情况，使用不加锁的select依然会幻读。\")]),t._v(\" \"),s(\"p\",[t._v(\"SERIALISABLE\")]),t._v(\" \"),s(\"p\",[t._v(\"大杀器，该级别下，会自动将所有普通select转化为select ... lock in share mode执行，即针对同一数据的所有读写都变成互斥的了，可靠性大大提高，并发性大大降低。\")]),t._v(\" \"),s(\"p\",[t._v(\"读-写，写-写均互斥。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"什么时候会加锁\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么时候会加锁\"}},[t._v(\"#\")]),t._v(\" 什么时候会加锁？\")]),t._v(\" \"),s(\"p\",[t._v(\"在数据库增删改查四种操作中，insert、delete和update都是会加排它锁(Exclusive Locks)的，而select只有显式声明才会加锁:\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"select: 即最常用的查询，是不加任何锁的\")]),t._v(\" \"),s(\"li\",[t._v(\"select ... lock in share mode: 会加共享锁(Shared Locks)\")]),t._v(\" \"),s(\"li\",[t._v(\"select ... for update: 会加排它锁\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"一致性的三种级别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一致性的三种级别\"}},[t._v(\"#\")]),t._v(\" 一致性的三种级别\")]),t._v(\" \"),s(\"p\",[t._v(\"强，弱，最终一致性\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"持久性的实现方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#持久性的实现方式\"}},[t._v(\"#\")]),t._v(\" 持久性的实现方式\")]),t._v(\" \"),s(\"p\",[t._v(\"redo，同时使用insert buffer等方式。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"redis有几种持久化方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis有几种持久化方式\"}},[t._v(\"#\")]),t._v(\" Redis有几种持久化方式？\")]),t._v(\" \"),s(\"p\",[t._v(\"四种，2种被废弃，比如磁盘交换。目前主要使用rdb，aof。rdb属于物理备份，aof属于逻辑日志（逐行追加）。然后又讲了aof重写。rdb和aof的配置。以及aof的rewrite机制。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"b-树和b树区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#b-树和b树区别\"}},[t._v(\"#\")]),t._v(\" B+树和B树区别\")]),t._v(\" \"),s(\"p\",[t._v(\"B树：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",[s(\"code\",[t._v(\"每个节点都存储key和data，所有节点组成这棵树，并且叶子节点指针为null。\\n\\nB树优点在于：由于B树的每一个节点都包含key和value，因此经常访问的元素可能离根节点更近，因此访问也更迅速。\\n\")])])]),s(\"p\",[t._v(\"B+树：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",[s(\"code\",[t._v(\"只有叶子节点存储data，叶子节点包含了这棵树的所有键值，叶子节点不存储指针。所有非终端节点看成是索引，节点中仅含有其子树根节点最大（或最小）的关键字，不包含查找的有效信息。B+树中所有叶子节点都是通过指针连接在一起。\\n\\nB+ 树的优点在于：\\n由于B+树在内部节点上不包含数据信息，因此在内存页中能够存放更多的key。数据存放的更加紧密，具有更好的空间局部性。因此访问叶子节点上关联的数据也具有更好的缓存命中率。B+树的叶子结点都是相链的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。而且由于数据顺序排列并且相连，所以便于区间查找和搜索。而B树则需要进行每一层的递归遍历。相邻的元素可能在内存中不相邻，所以缓存命中性没有B+树好。\\n\")])])]),s(\"p\",[t._v(\"为什么使用B+树？\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",[s(\"code\",[t._v(\"1.文件很大，不可能全部存储在内存中，故要存储到磁盘上 \\n\\n2.索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数（为什么使用B-/+Tree，还跟磁盘存取原理有关，具体看下边分析） \\n\\n3.局部性原理与磁盘预读，预读的长度一般为页（page）的整倍数，（在许多操作系统中，页得大小通常为4k） \\n\\n4.数据库系统巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样 每个节点只需要一次I/O 就可以完全载入，(由于节点中有两个数组，所以地址连续)。而红黑树这种结构， h 明显要深的多。由于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性。\\n\")])])]),s(\"p\",[t._v(\"为什么B+树比B树更适合做索引？\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",[s(\"code\",[t._v(\"1.B+树磁盘读写代价更低: B+的内部结点并没有指向关键字具体信息的指针，即内部节点不存储数据。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。\\n2.B+-tree的查询效率更加稳定: 由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。\\n\")])])]),s(\"p\",[t._v(\"在MySQL中，最常用的两个存储引擎是MyISAM和InnoDB，它们对索引的实现方式是不同的。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",[s(\"code\",[t._v(\"MyISAM data存的是数据地址。索引是索引，数据是数据。\\n\\nInnoDB data存的是数据本身。索引也是数据。聚集索引\\n\")])])]),s(\"h3\",{attrs:{id:\"linux进程间有几种通信方式-各种方式的优缺点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#linux进程间有几种通信方式-各种方式的优缺点\"}},[t._v(\"#\")]),t._v(\" linux进程间有几种通信方式，各种方式的优缺点\")]),t._v(\" \"),s(\"p\",[t._v(\"1.管道（pipe）,流管道(s_pipe)和有名管道（FIFO）\")]),t._v(\" \"),s(\"p\",[t._v(\"2.信号（signal）\")]),t._v(\" \"),s(\"p\",[t._v(\"3.消息队列\")]),t._v(\" \"),s(\"p\",[t._v(\"4.共享内存\")]),t._v(\" \"),s(\"p\",[t._v(\"5.信号量\")]),t._v(\" \"),s(\"p\",[t._v(\"6.套接字（socket)\")]),t._v(\" \"),s(\"p\",[t._v(\"管道( pipe )\\n管道这种通讯方式有两种限制，一是半双工的通信，数据只能单向流动，二是只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。\\n流管道s_pipe: 去除了第一种限制,可以双向传输.\\n命名管道:name_pipe克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；\")]),t._v(\" \"),s(\"p\",[t._v(\"信号量( semophore )\\n信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。\")]),t._v(\" \"),s(\"p\",[t._v(\"信号 ( singal )\\n信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；主要作为进程间以及同一进程内不同线程之间的同步手段。\")]),t._v(\" \"),s(\"p\",[t._v(\"消息队列( message queue )\\n消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。 消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。\")]),t._v(\" \"),s(\"p\",[t._v(\"共享内存( shared memory )\\n共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。 使得多个进程可以访问同一块内存空间。\")]),t._v(\" \"),s(\"p\",[t._v(\"套接字( socket )\\n套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信，更为一般的进程间通信机制。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。\")]),t._v(\" \"),s(\"p\",[t._v(\"管道：速度慢。容量有限，仅仅有父子进程能通讯\")]),t._v(\" \"),s(\"p\",[t._v(\"FIFO：不论什么进程间都能通讯，但速度慢\")]),t._v(\" \"),s(\"p\",[t._v(\"信号量：不能传递复杂消息，仅仅能用来同步\")]),t._v(\" \"),s(\"p\",[t._v(\"信号：假设用户传递的信息较少或是须要通过信号来触发某些行为．前文提到的软中断信号机制不失为一种简捷有效的进程间通信方式．\")]),t._v(\" \"),s(\"p\",[t._v(\"消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题。可是信息的复制须要额外消耗CPU的时间，不适宜于信息量大或操作频繁的场合。\")]),t._v(\" \"),s(\"p\",[t._v(\"共享内存区：能够非常easy控制容量，速度快，信息量大，高效双向通信，但要保持同步，比方一个进程在写的时候。还有一个进程要注意读写的问题，相当于线程中的线程安全。\")]),t._v(\" \"),s(\"p\",[t._v(\"socket:即套接字是一种通信机制，凭借这种机制，客户/服务器（即要进行通信的进程）系统的开发工作既可以在本地单机上进行，也可以跨网络进行。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"mysql要加上nextkey锁-语句该怎么写\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mysql要加上nextkey锁-语句该怎么写\"}},[t._v(\"#\")]),t._v(\" mysql要加上nextkey锁，语句该怎么写\")]),t._v(\" \"),s(\"p\",[t._v(\"select * from table1 where id < 4 lock in share mode.\")]),t._v(\" \"),s(\"p\",[t._v(\"这里会在table1上加一个next_key lock(间隙锁)，基本原理是什么呢？大致是这样的，内存中有一个lock hash。是一个key（类似于tableid+pageid+offset）到value（所加的锁）--- 这就是行锁的原理。所以 id<4的话，会给0 1 2 4(假设当前数据库没有3)加上行锁，这样就保证了不会出现插入id=3.5这种事情的发生。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"怎么查看系统负载\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#怎么查看系统负载\"}},[t._v(\"#\")]),t._v(\" 怎么查看系统负载\")]),t._v(\" \"),s(\"p\",[t._v(\"$ uptime\\n 12:20:30 up 44 days, 21:46,  2 users,  load average: 8.99, 7.55, 5.40\")]),t._v(\" \"),s(\"p\",[t._v(\"$ w\")]),t._v(\" \"),s(\"p\",[t._v(\"12:22:02 up 44 days, 21:48,  2 users,  load average: 3.96, 6.28, 5.16\")]),t._v(\" \"),s(\"p\",[t._v(\"load average分别对应于过去1分钟，5分钟，15分钟的负载平均值。\")]),t._v(\" \"),s(\"p\",[t._v(\"这两个命令只是单纯的反映出负载，linux提供了更为强大，也更为实用的top命令来查看服务器负载。\")]),t._v(\" \"),s(\"p\",[t._v(\"$ top\")]),t._v(\" \"),s(\"p\",[t._v(\"top命令能够清晰的展现出系统的状态，而且它是实时的监控，按q退出。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"查找磁盘上最大的文件的命令\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#查找磁盘上最大的文件的命令\"}},[t._v(\"#\")]),t._v(\" 查找磁盘上最大的文件的命令\")]),t._v(\" \"),s(\"p\",[t._v(\"du : 计算出单个文件或者文件夹的磁盘空间占用.\")]),t._v(\" \"),s(\"p\",[t._v(\"sort : 对文件行或者标准输出行记录排序后输出.\")]),t._v(\" \"),s(\"p\",[t._v(\"head : 输出文件内容的前面部分.\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"从底层解释最左匹配原则\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#从底层解释最左匹配原则\"}},[t._v(\"#\")]),t._v(\" 从底层解释最左匹配原则\")]),t._v(\" \"),s(\"p\",[t._v(\"https://www.javazhiyin.com/25708.html\")]),t._v(\" \"),s(\"p\",[t._v(\"首先Mysql的基本存储结构是页(记录都存在页里边)：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://txxs.github.io/pic/tofutureinterview/1-1.png\",alt:\"1\"}})]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://txxs.github.io/pic/tofutureinterview/1-2.png\",alt:\"1\"}})]),t._v(\" \"),s(\"p\",[t._v(\"各个数据页可以组成一个双向链表；\")]),t._v(\" \"),s(\"p\",[t._v(\"而每个数据页中的记录又可以组成一个单向链表；\")]),t._v(\" \"),s(\"p\",[t._v(\"每个数据页都会为存储在它里边儿的记录生成一个页目录，在通过主键查找某条记录的时候可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录；\")]),t._v(\" \"),s(\"p\",[t._v(\"以其他列(非主键)作为搜索条件：只能从最小记录开始依次遍历单链表中的每条记录。\")]),t._v(\" \"),s(\"p\",[t._v(\"所以说，如果我们写select * from user where username = 'Java3y'这样没有进行任何优化的sql语句，默认会这样做：\")]),t._v(\" \"),s(\"p\",[t._v(\"定位到记录所在的页\")]),t._v(\" \"),s(\"p\",[t._v(\"需要遍历双向链表，找到所在的页\")]),t._v(\" \"),s(\"p\",[t._v(\"从所在的页内中查找相应的记录\")]),t._v(\" \"),s(\"p\",[t._v(\"由于不是根据主键查询，只能遍历所在页的单链表了\")]),t._v(\" \"),s(\"p\",[t._v(\"很明显，在数据量很大的情况下这样查找会很慢！\")]),t._v(\" \"),s(\"p\",[t._v(\"索引做了些什么可以让我们查询加快速度呢？\")]),t._v(\" \"),s(\"p\",[t._v(\"其实就是将无序的数据变成有序(相对)：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://txxs.github.io/pic/tofutureinterview/1-3.png\",alt:\"1\"}})]),t._v(\" \"),s(\"p\",[t._v(\"要找到id为8的记录简要步骤：\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://txxs.github.io/pic/tofutureinterview/1-4.png\",alt:\"1\"}})]),t._v(\" \"),s(\"p\",[t._v('很明显的是：没有用索引我们是需要遍历双向链表来定位对应的页，现在通过\"目录\"就可以很快地定位到对应的页上了！')]),t._v(\" \"),s(\"p\",[t._v(\"其实底层结构就是B+树，B+树作为树的一种实现，能够让我们很快地查找出对应的记录。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"spring支持五种类型的通知\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spring支持五种类型的通知\"}},[t._v(\"#\")]),t._v(\" Spring支持五种类型的通知：\")]),t._v(\" \"),s(\"p\",[t._v(\"Before(前)  org.apringframework.aop.MethodBeforeAdvice\")]),t._v(\" \"),s(\"p\",[t._v(\"After-returning(返回后) org.springframework.aop.AfterReturningAdvice\")]),t._v(\" \"),s(\"p\",[t._v(\"After-throwing(抛出后) org.springframework.aop.ThrowsAdvice\")]),t._v(\" \"),s(\"p\",[t._v(\"Arround(周围) org.aopaliance.intercept.MethodInterceptor\")]),t._v(\" \"),s(\"p\",[t._v(\"Introduction(引入) org.springframework.aop.IntroductionInterceptor\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"spring-aop四种实现方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spring-aop四种实现方式\"}},[t._v(\"#\")]),t._v(\" spring AOP四种实现方式\")]),t._v(\" \"),s(\"p\",[t._v(\"配置可以通过xml文件来进行，大概有四种方式：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[t._v(\"配置ProxyFactoryBean，显式地设置advisors, advice, target等（基于代理的AOP ）\")])]),t._v(\" \"),s(\"p\",[t._v(\"2.        配置AutoProxyCreator，这种方式下，还是如以前一样使用定义的bean，但是从容器中获得的其实已经是代理对象\")]),t._v(\" \"),s(\"p\",[t._v(\"3.        通过\"),s(\"a\",{attrs:{href:\"aop:config\"}},[t._v(\"aop:config\")]),t._v(\"来配置（纯POJO切面）\")]),t._v(\" \"),s(\"p\",[t._v(\"4.        通过<aop: aspectj-autoproxy>来配置，使用AspectJ的注解来标识通知及切入点\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"jvm为什么要指令重排\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jvm为什么要指令重排\"}},[t._v(\"#\")]),t._v(\" jvm为什么要指令重排\")]),t._v(\" \"),s(\"p\",[t._v(\"https://www.cnblogs.com/chenyangyao/p/5269622.html\")]),t._v(\" \"),s(\"p\",[t._v(\"https://blog.csdn.net/blueheart20/article/details/52117761\")]),t._v(\" \"),s(\"p\",[t._v(\"As-if-serial语义的意思是，所有的动作(Action)都可以为了优化而被重排序，但是必须保证它们重排序后的结果和程序代码本身的应有结果是一致的。Java编译器、运行时和处理器都会保证单线程下的as-if-serial语义。\")]),t._v(\" \"),s(\"p\",[t._v(\"在计算机执行指令的顺序在经过程序编译器编译之后形成的指令序列，一般而言，这个指令序列是会输出确定的结果；以确保每一次的执行都有确定的结果。但是，一般情况下，CPU和编译器为了提升程序执行的效率，会按照一定的规则允许进行指令优化，在某些情况下，这种优化会带来一些执行的逻辑问题，主要的原因是代码逻辑之间是存在一定的先后顺序，在并发执行情况下，会发生二义性，即按照不同的执行逻辑，会得到不同的结果信息。\")]),t._v(\" \"),s(\"p\",[t._v(\"主要还是编译器以及CPU为了优化代码或者执行的效率而执行的优化操作；应用条件是单线程场景下，对于并发多线程场景下，指令重排会产生不确定的执行效果。\")]),t._v(\" \"),s(\"p\",[t._v(\"volatile关键字可以保证变量的可见性，因为对volatile的操作都在Main Memory中，而Main Memory是被所有线程所共享的，这里的代价就是牺牲了性能，无法利用寄存器或Cache，因为它们都不是全局的，无法保证可见性，可能产生脏读。\")]),t._v(\" \"),s(\"p\",[t._v(\"volatile还有一个作用就是局部阻止重排序的发生，对volatile变量的操作指令都不会被重排序，因为如果重排序，又可能产生可见性问题。\")]),t._v(\" \"),s(\"p\",[t._v(\"在保证可见性方面，锁（包括显式锁、对象锁）以及对原子变量的读写都可以确保变量的可见性。但是实现方式略有不同，例如同步锁保证得到锁时从内存里重新读入数据刷新缓存，释放锁时将数据写回内存以保数据可见，而volatile变量干脆都是读写内存。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"jvm优化\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jvm优化\"}},[t._v(\"#\")]),t._v(\" JVM优化\")]),t._v(\" \"),s(\"p\",[t._v(\"https://www.cnblogs.com/leeSmall/p/9325164.html\")]),t._v(\" \"),s(\"p\",[t._v(\"1、禁用System.\")]),t._v(\" \"),s(\"p\",[t._v(\"因为System.gc会触发full GC，非常耗系统性能，所以要禁用\")]),t._v(\" \"),s(\"p\",[t._v(\"参数设置：\")]),t._v(\" \"),s(\"p\",[t._v(\"-XX:-DisableExplicitGC，禁用了System.gc()的显示调用\")]),t._v(\" \"),s(\"p\",[t._v(\"2、关闭偏向锁优化\")]),t._v(\" \"),s(\"p\",[t._v(\"偏向锁的概念：一把锁被使用之后不主动释放，保留给当前的使用者，预判等下一个进程来获取的时候再释放出来，\")]),t._v(\" \"),s(\"p\",[t._v(\"参数设置：\")]),t._v(\" \"),s(\"p\",[t._v(\"偏向锁关闭： -XX:-UseBiasedLocking\")]),t._v(\" \"),s(\"p\",[t._v(\"-XX:+UseBiasedLocking -XX:BiasedLockingStartupDelay=0\")]),t._v(\" \"),s(\"p\",[t._v(\"3、getter方法优化\")]),t._v(\" \"),s(\"p\",[t._v(\"指内联函数的优化，何为内联函数呢，即一个方法里面调用了另外一个方法，JVM在编译的时候把被调用的方法合入到调用的方法里面，这样就能减少栈帧的创建（因为每一个方法执行时都会创建一个栈帧），节约内存getter方法优化，-XX:UseFastAccessorMethods\")]),t._v(\" \"),s(\"p\",[t._v(\"4、增加内联函数的可能性\")]),t._v(\" \"),s(\"p\",[t._v(\"增加函数内联的可能性能减少栈帧的创建，节约内存空间\")]),t._v(\" \"),s(\"p\",[t._v(\"参数设置：\")]),t._v(\" \"),s(\"p\",[t._v(\"使用final修饰函数向编译器建议可以内联，启动参数不宜设置，注意只是建议，具体是否内联看JVM决定\")]),t._v(\" \"),s(\"p\",[t._v(\"5、将新对象预留在年轻代\")]),t._v(\" \"),s(\"p\",[t._v(\"参数设置：\")]),t._v(\" \"),s(\"p\",[t._v(\"-XX:TargetSurvivorRatio=90\")]),t._v(\" \"),s(\"p\",[t._v(\"90表示让新生代的from区的利用率为90%，这样新对象进来就会优先在里面\")]),t._v(\" \"),s(\"p\",[t._v(\"6、让大对象进入年老代\")]),t._v(\" \"),s(\"p\",[t._v(\"参数设置：\")]),t._v(\" \"),s(\"p\",[t._v(\"-XX:PetenureSizeThreshold=1000000，1M\")]),t._v(\" \"),s(\"p\",[t._v(\"大小为1M的对象为大对象\")]),t._v(\" \"),s(\"p\",[t._v(\"7、设置对象进入年老代的年龄\")]),t._v(\" \"),s(\"p\",[t._v(\"参数设置：\")]),t._v(\" \"),s(\"p\",[t._v(\"-XX:MaxTenuringThreshold=31\")]),t._v(\" \"),s(\"p\",[t._v(\"表示在新生代经过31次回收以后还存活的对象移到老年代，默认值是15，设置31的目的是让对象尽可能的在新生代就被回收，避免进入老年代触发full GC\")]),t._v(\" \"),s(\"p\",[t._v(\"8、稳定的 Java 堆\")]),t._v(\" \"),s(\"p\",[t._v(\"参数设置：\")]),t._v(\" \"),s(\"p\",[t._v(\"Xmx与Xms相同\")]),t._v(\" \"),s(\"p\",[t._v(\"最小堆内存和最大堆内存设置为一样的目的是避免频繁的向操作系统申请内存占用系统资源\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"jit编译器的原理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jit编译器的原理\"}},[t._v(\"#\")]),t._v(\" jit编译器的原理\")]),t._v(\" \"),s(\"p\",[t._v(\"https://my.oschina.net/sallency/blog/538751\")]),t._v(\" \"),s(\"p\",[t._v(\"https://blog.csdn.net/ns_code/article/details/18009455\")]),t._v(\" \"),s(\"p\",[t._v(\"just-in-time，被翻译为即时编译，要理解即时编译我觉得和普通的编译（C，C++等静态语言）相对比便可理解，普通编译可以说是 all before runtime，在你运行程序前你需要提前把程序完全编译为机器码，然后载入运行。而即时编译，并不是在运行前就编译好，而是在运行时，in runtime，对一些频繁使用的代码段，比如被经常调用的函数，循环段等编译成机器码，以使这些“热区”无需重复性的被解释器解释来提高程序的执行效率。\")]),t._v(\" \"),s(\"p\",[t._v(\"于是后来在虚拟机中引入了JIT编译器（即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是JIT编译器。运行过程中会被即时编译器编译的“热点代码”有两类：\")]),t._v(\" \"),s(\"p\",[t._v(\"被多次调用的方法。\")]),t._v(\" \"),s(\"p\",[t._v(\"被多次调用的循环体。\")]),t._v(\" \"),s(\"p\",[t._v(\"当程序需要迅速启动和执行时，解释器可以首先发挥作用，省去编译的时间，立即执行；当程序运行后，随着时间的推移，编译器逐渐会返回作用，把越来越多的代码编译成本地代码后，可以获取更高的执行效率。解释执行可以节约内存，而编译执行可以提升效率。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"有一个系统需要做负载均衡-请设计架构怎么去实现负载均衡-考虑易用性-可以再拓展\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#有一个系统需要做负载均衡-请设计架构怎么去实现负载均衡-考虑易用性-可以再拓展\"}},[t._v(\"#\")]),t._v(\" 有一个系统需要做负载均衡？请设计架构怎么去实现负载均衡，考虑易用性？（可以再拓展）\")]),t._v(\" \"),s(\"p\",[t._v(\"答：\")]),t._v(\" \"),s(\"p\",[t._v(\"应用层：DNS负载均衡、http反向代理\")]),t._v(\" \"),s(\"p\",[t._v(\"ip层：NAT、ip tunnel\")]),t._v(\" \"),s(\"p\",[t._v(\"链路层：DR负载\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"aof如何缩减自身文件大小\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#aof如何缩减自身文件大小\"}},[t._v(\"#\")]),t._v(\" AOF如何缩减自身文件大小\")]),t._v(\" \"),s(\"p\",[t._v(\"https://www.cnblogs.com/kgdxpr/p/7155718.html\")]),t._v(\" \"),s(\"p\",[t._v(\"https://blog.csdn.net/stevendbaguo/article/details/82855726\")]),t._v(\" \"),s(\"p\",[t._v(\"Redis的AOF机制有点类似于Mysql binlog，是Redis的提供的一种持久化方式（另一种是RDB），它会将所有的写命令按照一定频率(no, always, every seconds)写入到日志文件中，当Redis停机重启后恢复数据库。\")]),t._v(\" \"),s(\"p\",[t._v(\"AOF重写：\")]),t._v(\" \"),s(\"p\",[t._v(\"(1) 随着AOF文件越来越大，里面会有大部分是重复命令或者可以合并的命令（100次incr = set key 100）;lplush list a,lplush list b转换为lplush a b\")]),t._v(\" \"),s(\"p\",[t._v(\"(2) 旧文件中的无效命令不会保留，如del key1,sort。\")]),t._v(\" \"),s(\"p\",[t._v(\"(3) 重写的好处：减少AOF日志尺寸，减少内存占用，加快数据库恢复时间。\")]),t._v(\" \"),s(\"p\",[t._v(\"执行一个 AOF文件重写操作，重写会创建一个当前 AOF 文件的体积优化版本。\\n即使 BGREWRITEAOF 执行失败，也不会有任何数据丢失，因为旧的 AOF 文件在 BGREWRITEAOF 成功之前不会被修改。\\n从 Redis 2.4 开始，AOF 重写由 Redis 自行触发， BGREWRITEAOF 仅仅用于手动触发重写操作。但网上有网友说已经3.2.5版本了，貌似redis还是没有自动触发BGREWRITEAOF\\n稳妥的方法还写一个脚本每天定时去执行\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"mysql如何在rr隔离级别下避免幻读问题-repeatable-read\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mysql如何在rr隔离级别下避免幻读问题-repeatable-read\"}},[t._v(\"#\")]),t._v(\" mysql如何在RR隔离级别下避免幻读问题：(Repeatable Read)\")]),t._v(\" \"),s(\"p\",[t._v(\"https://www.cnblogs.com/aspirant/p/9177978.html\")]),t._v(\" \"),s(\"p\",[t._v(\"https://zhuanlan.zhihu.com/p/48269420\")]),t._v(\" \"),s(\"p\",[t._v(\"Mysql知识实在太丰富了，前几天百度的面试官问我MySql在Repeatable Read下面是否会有幻读出现，我说按照事务的特性当然会有，\")]),t._v(\" \"),s(\"p\",[t._v(\"但是面试官却说 Mysql 在Repeatable Read底下 也不会发生幻读的情况，因为Mysql有间隙锁的可以防止幻读；\")]),t._v(\" \"),s(\"p\",[t._v(\"l   行锁（Record Lock）:锁直接加在索引记录上面，锁住的是key。\")]),t._v(\" \"),s(\"p\",[t._v(\"l   间隙锁（Gap Lock）:锁定索引记录间隙，确保索引记录的间隙不变。间隙锁是针对事务隔离级别为可重复读或以上级别而已的。\")]),t._v(\" \"),s(\"p\",[t._v(\"l   Next-Key Lock ：行锁和间隙锁组合起来就叫Next-Key Lock。\")]),t._v(\" \"),s(\"p\",[t._v(\"产生间隙锁的条件（RR事务隔离级别下；）：\")]),t._v(\" \"),s(\"p\",[t._v(\"使用普通索引锁定；\")]),t._v(\" \"),s(\"p\",[t._v(\"使用多列唯一索引；\")]),t._v(\" \"),s(\"p\",[t._v(\"使用唯一索引锁定多行记录。\")]),t._v(\" \"),s(\"p\",[t._v(\"innodb_locks_unsafe_for_binlog：默认值为OFF，即启用间隙锁。\")]),t._v(\" \"),s(\"p\",[t._v(\"记录锁、间隙锁、临键锁，都属于排它锁；\")]),t._v(\" \"),s(\"p\",[t._v(\"记录锁就是锁住一行记录；\")]),t._v(\" \"),s(\"p\",[t._v(\"间隙锁只有在事务隔离级别 RR 中才会产生；\")]),t._v(\" \"),s(\"p\",[t._v(\"唯一索引只有锁住多条记录或者一条不存在的记录的时候，才会产生间隙锁，指定给某条存在的记录加锁的时候，只会加记录锁，不会产生间隙锁；\")]),t._v(\" \"),s(\"p\",[t._v(\"普通索引不管是锁住单条，还是多条记录，都会产生间隙锁；\")]),t._v(\" \"),s(\"p\",[t._v(\"间隙锁会封锁该条记录相邻两个键之间的空白区域，防止其它事务在这个区域内插入、修改、删除数据，这是为了防止出现 幻读 现象；\")]),t._v(\" \"),s(\"p\",[t._v(\"普通索引的间隙，优先以普通索引排序，然后再根据主键索引排序（多普通索引情况还未研究）；\")]),t._v(\" \"),s(\"p\",[t._v(\"事务级别是RC（读已提交）级别的话，间隙锁将会失效。\")])])}),[],!1,null,null,null);a.default=n.exports}}]);","extractedComments":[]}